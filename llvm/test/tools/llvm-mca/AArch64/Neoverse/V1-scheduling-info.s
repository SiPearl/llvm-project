# NOTE: Assertions have been autogenerated by utils/update_mca_test_checks.py
# RUN: llvm-mca -mtriple=aarch64 -mcpu=neoverse-v1 -scheduling-info < %s | FileCheck %s

  .text
  .globl	test
  .p2align	4
  .type	test,@function
test:
  abs D20, D11  /* ABS <V><d>, <V><n>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV */
  abs V12.2S, V20.2S  // ABS <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  abs Z27.S, P4/M, Z29.S  // ABS <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  adc W9, W3, W3  // ADC <Wd>, <Wn>, <Wm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  adc X28, X16, X22  // ADC <Xd>, <Xn>, <Xm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  adcs W12, W18, W18  // ADCS <Wd>, <Wn>, <Wm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  adcs X12, X3, X7  // ADCS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  add WSP, WSP, W27  // ADD <Wd|WSP>, <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.0 V1UnitI
  add WSP, WSP, W23, UXTH   // ADD <Wd|WSP>, <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.0 V1UnitI
  add WSP, WSP, W2, SXTW #2  // ADD <Wd|WSP>, <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.0 V1UnitI
  add WSP, WSP, W9, LSL #3  // ADD <Wd|WSP>, <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 2  2  2.0 V1UnitI
  add X6, X2, X2  // ADD <Xd|SP>, <Xn|SP>, X<m>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  add X30, X1, W25, UXTB  // ADD <Xd|SP>, <Xn|SP>, <R><m>, <extend>  \\ ALU, basic  \\ 1 2  2  2.0 V1UnitI
  add X9, X5, W8, UXTB #2  // ADD <Xd|SP>, <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 2  2  2.0 V1UnitM
  add X25, X25, X4, LSL #3  // ADD <Xd|SP>, <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
  add WSP, WSP, #3397  // ADD <Wd|WSP>, <Wn|WSP>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  add WSP, WSP, #1985, LSL #12  // ADD <Wd|WSP>, <Wn|WSP>, #<imm>, <shift>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  add X12, X20, #1434  // ADD <Xd|SP>, <Xn|SP>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  add X23, X24, #2054, LSL #12  // ADD <Xd|SP>, <Xn|SP>, #<imm>, <shift>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  add Z25.S, Z25.S, #244  // ADD <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  add Z27.H, Z27.H, #78, LSL #8  // ADD <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  add W0, W4, W20, LSL #0  // ADD <Wd>, <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, no flagset   \\ 1 1  1  4.0 V1UnitI
  add W11, W7, W19, LSL #7  // ADD <Wd>, <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  add W10, W7, W6, LSR #0  // ADD <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  add X12, X0, X12, LSL #3  // ADD <Xd>, <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
  add X6, X4, X3, LSL #15  // ADD <Xd>, <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  add X16, X0, X26, LSR #52  // ADD <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  add D1, D2, D17  // ADD <V><d>, <V><n>, <V><m>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  add V5.2D, V31.2D, V12.2D  // ADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  add Z6.D, P6/M, Z6.D, Z7.D  // ADD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  add Z2.H, Z22.H, Z4.H  // ADD <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  addhn V13.2S, V9.2D, V26.2D  // ADDHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  addhn2 V29.8H, V13.4S, V16.4S  // ADDHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  addp D16, V17.2D  // ADDP <V><d>, <Vn>.<T>  \\ ASIMD arith, pair-wise  \\ 1 2  2  4.0 V1UnitV
  addp V1.4S, V2.4S, V20.4S  // ADDP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, pair-wise  \\ 1 2  2  4.0 V1UnitV
  addpl X7, X3, #30  // ADDPL <Xd|SP>, <Xn|SP>, #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  adds W29, WSP, W0  // ADDS <Wd>, <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.0 V1UnitJ
  adds W3, WSP, W17, UXTB   // ADDS <Wd>, <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  adds W11, WSP, W13, SXTH #4  // ADDS <Wd>, <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.0 V1UnitJ
  adds W30, WSP, W2, LSL #3  // ADDS <Wd>, <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 2  2  2.0 V1UnitJ
  adds X18, X30, X24  // ADDS <Xd>, <Xn|SP>, X<m>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  adds X17, X0, X6, SXTX  // ADDS <Xd>, <Xn|SP>, <R><m>, <extend>  \\ ALU, basic, flagset  \\ 1 2  2  2.0 V1UnitJ
  adds X28, X8, W6, UXTB #1  // ADDS <Xd>, <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 1  1  3.0 V1UnitM
  adds X3, X16, X3, LSL #1  // ADDS <Xd>, <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
  adds W14, WSP, #3787  // ADDS <Wd>, <Wn|WSP>, #<imm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  adds W7, WSP, #702, LSL #12  // ADDS <Wd>, <Wn|WSP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 1  1  3.0 V1UnitM
  adds X6, X17, #3827  // ADDS <Xd>, <Xn|SP>, #<imm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  adds X18, X30, #1484, LSL #12  // ADDS <Xd>, <Xn|SP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 1  1  3.0 V1UnitM
  adds W10, W18, W21  // ADDS <Wd>, <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  adds W2, W8, W19, LSL #2  // ADDS <Wd>, <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
  adds W30, W29, W0, LSL #24  // ADDS <Wd>, <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  adds W19, W24, W19, ASR #1  // ADDS <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  adds X14, X11, X12  // ADDS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  adds X22, X6, X8, LSL #2  // ADDS <Xd>, <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
  adds X0, X16, X16, LSL #50  // ADDS <Xd>, <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  adds X25, X9, X14, LSR #61  // ADDS <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  addv B6, V29.8B  // ADDV B<d>, <Vn>.8B  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.0 V1UnitV13
  addv B2, V15.16B  // ADDV B<d>, <Vn>.16B  \\ ASIMD arith, reduce, 16B  \\ 2 4  4  1.0 V1UnitV13[2]
  addv H30, V1.4H  // ADDV H<d>, <Vn>.4H  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  addv H26, V13.8H  // ADDV H<d>, <Vn>.8H  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.0 V1UnitV13
  addv S30, V0.4S  // ADDV S<d>, <Vn>.4S  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  addvl X24, X19, #-19  // ADDVL <Xd|SP>, <Xn|SP>, #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  adr X19, test  // ADR <Xd>, <label>  \\ Address generation  \\ 1 1  1  4.0 V1UnitI
  adr Z10.S, [Z16.S, Z4.S]  // ADR <Zd>.<T>, [<Zn>.<T>, <Zm>.<T>]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  adr Z6.S, [Z11.S, Z8.S, LSL #1]  // ADR <Zd>.<T>, [<Zn>.<T>, <Zm>.<T>, <mod> #<amount>]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  adr Z31.D, [Z4.D, Z18.D, SXTW ]  // ADR <Zd>.D, [<Zn>.D, <Zm>.D, SXTW ]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  adr Z9.D, [Z3.D, Z7.D, SXTW #1]  // ADR <Zd>.D, [<Zn>.D, <Zm>.D, SXTW #<amount>]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  adr Z30.D, [Z2.D, Z18.D, UXTW ]  // ADR <Zd>.D, [<Zn>.D, <Zm>.D, UXTW ]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  adr Z20.D, [Z13.D, Z31.D, UXTW #3]  // ADR <Zd>.D, [<Zn>.D, <Zm>.D, UXTW #<amount>]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  adrp X7, test  // ADRP <Xd>, <label>  \\ Address generation  \\ 1 1  1  4.0 V1UnitI
  and WSP, W10, #0xe00  // AND <Wd|WSP>, <Wn>, #<imms>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  and X30, X15, #0xe00  // AND <Xd|SP>, <Xn>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  and Z20.B, Z20.B, #0x70  // AND <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  and Z23.H, Z23.H, #0x60  // AND <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  and Z28.S, Z28.S, #0x2  // AND <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  and Z25.D, Z25.D, #0x4  // AND <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  and P1.B, P7/Z, P4.B, P0.B  // AND <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  and W23, W11, W20  // AND <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  and W5, W22, W4, ASR #22  // AND <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  and X18, X3, X28  // AND <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  and X13, X21, X24, ASR #1  // AND <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  and V3.8B, V3.8B, V15.8B  // AND <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  and Z20.B, P4/M, Z20.B, Z5.B  // AND <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  and Z2.D, Z1.D, Z12.D  // AND <Zd>.D, <Zn>.D, <Zm>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  ands W21, W15, #0x70  // ANDS <Wd>, <Wn>, #<imms>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  ands X17, X2, #0x60  // ANDS <Xd>, <Xn>, #<immd>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  ands W19, W8, W25  // ANDS <Wd>, <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.0 V1UnitJ
  ands W26, W11, W19, ASR #6  // ANDS <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift by immed, flagset, unconditional  \\ 1 2  2  2.0 V1UnitM
  ands X21, X3, X17  // ANDS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 2  2  2.00 V1UnitJ
  ands X29, X0, X5, LSR #62  // ANDS <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, flagset  \\ 1 2  2  2.0 V1UnitM
  ands P4.B, P3/Z, P4.B, P2.B  // ANDS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  andv D20, P1, Z28.D  // ANDV <V><d>, <Pg>, <Zn>.<T>  \\ Reduction, logical   \\ 4 12  12  0.50 V1UnitV01[4]
  asr W9, W13, #0  // ASR <Wd>, <Wn>, #<shifts>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  asr X21, X12, #48  // ASR <Xd>, <Xn>, #<shiftd>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  asr Z0.B, P4/M, Z0.B, #3  // ASR <Zdn>.B, <Pg>/M, <Zdn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr Z2.H, P2/M, Z2.H, #7  // ASR <Zdn>.H, <Pg>/M, <Zdn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr Z19.S, P2/M, Z19.S, #1  // ASR <Zdn>.S, <Pg>/M, <Zdn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr Z6.D, P5/M, Z6.D, #25  // ASR <Zdn>.D, <Pg>/M, <Zdn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr Z24.B, Z5.B, #3  // ASR <Zd>.B, <Zn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr Z22.H, Z16.H, #2  // ASR <Zd>.H, <Zn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr Z9.S, Z12.S, #8  // ASR <Zd>.S, <Zn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr Z23.D, Z10.D, #25  // ASR <Zd>.D, <Zn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr W29, W11, W27  // ASR <Wd>, <Wn>, <Wm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
  asr X1, X4, X23  // ASR <Xd>, <Xn>, <Xm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
  asr Z29.B, P2/M, Z29.B, Z20.B  // ASR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr Z6.B, P3/M, Z6.B, Z19.D  // ASR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asr Z18.H, Z2.H, Z24.D  // ASR <Zd>.<T>, <Zn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asrd Z8.B, P5/M, Z8.B, #1  // ASRD <Zdn>.B, <Pg>/M, <Zdn>.B, #<constb>  \\ Arithmetic, shift right for divide  \\ 1 4  4  1.0 V1UnitV1
  asrd Z12.H, P3/M, Z12.H, #5  // ASRD <Zdn>.H, <Pg>/M, <Zdn>.H, #<consth>  \\ Arithmetic, shift right for divide  \\ 1 4  4  1.0 V1UnitV1
  asrd Z14.S, P6/M, Z14.S, #13  // ASRD <Zdn>.S, <Pg>/M, <Zdn>.S, #<consts>  \\ Arithmetic, shift right for divide  \\ 1 4  4  1.0 V1UnitV1
  asrd Z0.D, P5/M, Z0.D, #2  // ASRD <Zdn>.D, <Pg>/M, <Zdn>.D, #<constd>  \\ Arithmetic, shift right for divide  \\ 1 4  4  1.0 V1UnitV1
  asrr Z0.H, P4/M, Z0.H, Z9.H  // ASRR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  asrv W3, W25, W22  // ASRV <Wd>, <Wn>, <Wm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
  asrv X6, X0, X9  // ASRV <Xd>, <Xn>, <Xm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
  at s1e2w, X17  // AT <at_op>, <Xt>  \\ No description \\ No scheduling info
  b test  // B <label>  \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.eq test // B.eq <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.none test // B.none <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.ne test // B.ne <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.any test // B.any <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.cs test // B.cs <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.hs test // B.hs <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.nlast test // B.nlast <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.cc test // B.cc <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.lo test // B.lo <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.last test // B.last <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.mi test // B.mi <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.first test // B.first <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.pl test // B.pl <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.nfrst test // B.nfrst <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.vs test // B.vs <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.vc test // B.vc <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.hi test // B.hi <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.pmore test // B.pmore <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.ls test // B.ls <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.plast test // B.plast <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.ge test // B.ge <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.tcont test // B.tcont <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.lt test // B.lt <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.tstop test // B.tstop <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.gt test // B.gt <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.le test // B.le <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.al test // B.al <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  b.nv test // B.nv <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
  bfcvt H4, S2  // BFCVT <Hd>, <Sn>  \\ Scalar convert, F32 to BF16  \\ 1 3  3  2.0 V1UnitV02
  bfcvt Z1.H, P7/M, Z9.S  // BFCVT <Zd>.H, <Pg>/M, <Zn>.S  \\ Convert, F32 to BF16  \\ 1 4  4  1.0 V1UnitV0
  bfcvtn V25.4H, V28.4S  // BFCVTN <Vd>.<Ta>, <Vn>.4S  \\ ASIMD convert, F32 to BF16  \\ 1 4  4  2.00 V1UnitV02[2]
  bfcvtn2 V18.8H, V26.4S  // BFCVTN2 <Vd>.<Ta>, <Vn>.4S  \\ ASIMD convert, F32 to BF16  \\ 1 4  4  2.00 V1UnitV02[2]
  bfcvtnt Z25.H, P5/M, Z8.S  // BFCVTNT <Zd>.H, <Pg>/M, <Zn>.S  \\ Convert, F32 to BF16  \\ 1 4  4  1.0 V1UnitV0
  bfdot V20.2S, V5.4H, V20.2H[1]  // BFDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.2H[<index>]  \\ ASIMD dot product  \\ 1 4 2 4.0 V1UnitV
  bfdot Z16.S, Z27.H, Z6.H[0]  // BFDOT <Zda>.S, <Zn>.H, <Zm>.H[<imm>]  \\ Dot product  \\ 1 4 2 2.0 V1UnitV01
  bfdot V11.2S, V19.4H, V26.4H  // BFDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD dot product  \\ 1 4 2 4.0 V1UnitV
  bfdot Z25.S, Z18.H, Z10.H  // BFDOT <Zda>.S, <Zn>.H, <Zm>.H  \\ Dot product  \\ 1 4 2 2.0 V1UnitV01
  bfi W22, W2, #16, #9  // BFI <Wd>, <Wn>, #<lsbs>, #<widths>  \\ Bit field insert/clear, unconditional  \\ 1 2  2  2.0 V1UnitM
  bfi X2, X14, #42, #21  // BFI <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ Bit field insert/clear, unconditional  \\ 1 2  2  2.0 V1UnitM
  bfm W27, W10, #7, #2  // BFM <Wd>, <Wn>, #<immrs>, #<immss>  \\ Bitfield move, insert  \\ 1 2  2  2.0 V1UnitM
  bfm X25, X13, #55, #14  // BFM <Xd>, <Xn>, #<immrd>, #<immsd>  \\ Bitfield move, insert  \\ 1 2  2  2.0 V1UnitM
  bfmlalb Z22.S, Z24.H, Z6.H[4]  // BFMLALB <Zda>.S, <Zn>.H, <Zm>.H[<imm>]  \\ Multiply accumulate long  \\ 1 5 2 2.0 V1UnitV01
  bfmlalb Z6.S, Z14.H, Z26.H  // BFMLALB <Zda>.S, <Zn>.H, <Zm>.H  \\ Multiply accumulate long  \\ 1 5 2 2.0 V1UnitV01
  bfmlalb V4.4S, V26.8H, V10.H[3]  // BFMLALB <Vd>.4S, <Vn>.8H, <Vm>.H[<index>]  \\ ASIMD multiply accumulate long  \\ 1 4 2 4.0 V1UnitV
  bfmlalt V2.4S, V7.8H, V6.H[4]  // BFMLALT <Vd>.4S, <Vn>.8H, <Vm>.H[<index>]  \\ ASIMD multiply accumulate long  \\ 1 4 2 4.0 V1UnitV
  bfmlalb V16.4S, V8.8H, V6.8H  // BFMLALB <Vd>.4S, <Vn>.8H, <Vm>.8H  \\ ASIMD multiply accumulate long  \\ 1 4 2 4.0 V1UnitV
  bfmlalt V0.4S, V2.8H, V25.8H  // BFMLALT <Vd>.4S, <Vn>.8H, <Vm>.8H  \\ ASIMD multiply accumulate long  \\ 1 4 2 4.0 V1UnitV
  bfmlalt Z4.S, Z0.H, Z3.H[0]  // BFMLALT <Zda>.S, <Zn>.H, <Zm>.H[<imm>]  \\ Multiply accumulate long  \\ 1 5 2 2.0 V1UnitV01
  bfmlalt Z12.S, Z29.H, Z14.H  // BFMLALT <Zda>.S, <Zn>.H, <Zm>.H  \\ Multiply accumulate long  \\ 1 5 2 2.0 V1UnitV01
  bfmmla V25.4S, V6.8H, V29.8H  // BFMMLA <Vd>.4S, <Vn>.8H, <Vm>.8H  \\ ASIMD matrix multiply accumulate  \\ 1 5 3 4.0 V1UnitV
  bfmmla Z8.S, Z2.H, Z0.H  // BFMMLA <Zda>.S, <Zn>.H, <Zm>.H  \\ Matrix multiply accumulate  \\ 1 5 3 2.0 V1UnitV01
  bfxil W18, W23, #21, #3  // BFXIL <Wd>, <Wn>, #<lsbs>, #<widths>  \\ No description \\ No scheduling info
  bfxil X19, X9, #44, #20  // BFXIL <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ No description \\ No scheduling info
  bic Z20.B, Z20.B, #0x70  // BIC <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  bic Z0.H, Z0.H, #0x60  // BIC <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  bic Z3.S, Z3.S, #0x2  // BIC <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  bic Z18.D, Z18.D, #0x4  // BIC <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  bic P6.B, P7/Z, P1.B, P4.B  // BIC <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  bic W30, W22, W9  // BIC <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  bic W17, W15, W22, ASR #25  // BIC <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  bic X9, X10, X0  // BIC <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  bic X18, X3, X21, ASR #48  // BIC <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  bic V22.8H, #13  // BIC <Vd>.<Th>, #<imm8>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  bic V0.4H, #24, LSL #0  // BIC <Vd>.<Th>, #<imm8>, LSL #<amounth>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  bic V2.2S, #247  // BIC <Vd>.<T>, #<imm8>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  bic V19.2S, #241, LSL #16  // BIC <Vd>.<T>, #<imm8>, LSL #<amount>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  bic V17.8B, V19.8B, V13.8B  // BIC <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  bic Z21.B, P2/M, Z21.B, Z25.B  // BIC <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  bic Z29.D, Z8.D, Z8.D  // BIC <Zd>.D, <Zn>.D, <Zm>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  bics W27, W16, W28  // BICS <Wd>, <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  bics W26, W18, W23, LSR #5  // BICS <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift by immed, flagset, unconditional  \\ 1 2  2  2.0 V1UnitM
  bics X16, X11, X18  // BICS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 2  2  2.00 V1UnitJ
  bics X7, X1, X9, ASR #61  // BICS <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, flagset  \\ 1 2  2  2.0 V1UnitM
  bics P3.B, P1/Z, P2.B, P2.B  // BICS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  bif V2.16B, V24.16B, V16.16B  // BIF <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD bitwise insert  \\ 1 2  2  4.0 V1UnitV
  bit V14.8B, V15.8B, V22.8B  // BIT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD bitwise insert  \\ 1 2  2  4.0 V1UnitV
  bl test  // BL <label>  \\ Branch and link, immed  \\ 2 1  1  2.0 V1UnitB,V1UnitS
  blr X0  // BLR <Xn>  \\ Branch and link, register   \\ 2 1  1  2.0 V1UnitB,V1UnitS
  br X16  // BR <Xn>  \\ Branch, register  \\ 1 1  1  2.0 V1UnitB
  brk #24734  // BRK #<imm>  \\ No description \\ No scheduling info
  brka P5.B, P0/M, P5.B  // BRKA <Pd>.B, <Pg>/<ZM>, <Pn>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
  brkas P0.B, P4/Z, P2.B  // BRKAS <Pd>.B, <Pg>/Z, <Pn>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
  brkb P5.B, P5/M, P1.B  // BRKB <Pd>.B, <Pg>/<ZM>, <Pn>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
  brkbs P1.B, P1/Z, P2.B  // BRKBS <Pd>.B, <Pg>/Z, <Pn>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
  brkn P2.B, P1/Z, P1.B, P2.B  // BRKN <Pdm>.B, <Pg>/Z, <Pn>.B, <Pdm>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
  brkns P0.B, P4/Z, P6.B, P0.B  // BRKNS <Pdm>.B, <Pg>/Z, <Pn>.B, <Pdm>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
  brkpa P3.B, P4/Z, P6.B, P6.B  // BRKPA <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
  brkpas P7.B, P5/Z, P6.B, P1.B  // BRKPAS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
  brkpb P0.B, P3/Z, P1.B, P7.B  // BRKPB <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
  brkpbs P2.B, P0/Z, P2.B, P3.B  // BRKPBS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
  bsl V1.16B, V22.16B, V12.16B  // BSL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD bitwise insert  \\ 1 2  2  4.0 V1UnitV
  cbnz W17, test  // CBNZ <Wt>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
  cbnz X21, test  // CBNZ <Xt>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
  cbz W12, test  // CBZ <Wt>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
  cbz X20, test  // CBZ <Xt>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
  ccmn W30, #30, #14, VS  // CCMN <Wn>, #<imm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
  ccmn X4, #29, #13, GT  // CCMN <Xn>, #<imm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
  ccmn W12, W10, #9, MI  // CCMN <Wn>, <Wm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
  ccmn X12, X24, #13, VS  // CCMN <Xn>, <Xm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
  ccmp W18, #16, #12, PMORE  // CCMP <Wn>, #<imm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
  ccmp X9, #3, #3, EQ  // CCMP <Xn>, #<imm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
  ccmp W6, W12, #9, GT  // CCMP <Wn>, <Wm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
  ccmp X12, X2, #13, NLAST  // CCMP <Xn>, <Xm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
  cinc W28, W12, GT  // CINC <Wd>, <Wn>, <cond>  \\ No description \\ No scheduling info
  cinc X13, X8, NONE  // CINC <Xd>, <Xn>, <cond>  \\ No description \\ No scheduling info
  cinv W22, W0, HI  // CINV <Wd>, <Wn>, <cond>  \\ No description \\ No scheduling info
  cinv X29, X26, MI  // CINV <Xd>, <Xn>, <cond>  \\ No description \\ No scheduling info
  clasta H11, P6, H11, Z12.H  // CLASTA <V><dn>, <Pg>, <V><dn>, <Zm>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
  clasta X20, P6, X20, Z16.D  // CLASTA <R><dn>, <Pg>, <R><dn>, <Zm>.<T>  \\ Conditional extract operations, scalar form  \\ 2 9  9  1.0 V1UnitM0,V1UnitV1
  clasta Z7.D, P0, Z7.D, Z5.D  // CLASTA <Zdn>.<T>, <Pg>, <Zdn>.<T>, <Zm>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
  clastb B17, P4, B17, Z24.B  // CLASTB <V><dn>, <Pg>, <V><dn>, <Zm>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
  clastb W1, P2, W1, Z13.B  // CLASTB <R><dn>, <Pg>, <R><dn>, <Zm>.<T>  \\ Conditional extract operations, scalar form  \\ 2 9  9  1.0 V1UnitM0,V1UnitV1
  clastb Z0.B, P5, Z0.B, Z27.B  // CLASTB <Zdn>.<T>, <Pg>, <Zdn>.<T>, <Zm>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
  clrex   // CLREX   \\ No description \\ No scheduling info
  clrex #5  // CLREX #<imm>  \\ No description \\ No scheduling info
  cls V2.4S, V26.4S  // CLS <Vd>.<T>, <Vn>.<T>  \\ ASIMD count  \\ 1 2  2  4.0 V1UnitV
  cls W21, W22  // CLS <Wd>, <Wn>  \\ Count leading  \\ 1 1  1  4.0 V1UnitI
  cls X3, X10  // CLS <Xd>, <Xn>  \\ Count leading  \\ 1 1  1  4.0 V1UnitI
  cls Z19.H, P2/M, Z27.H  // CLS <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Count/reverse bits  \\ 1 2  2  2.0 V1UnitV01
  clz V25.2S, V29.2S  // CLZ <Vd>.<T>, <Vn>.<T>  \\ ASIMD count  \\ 1 2  2  4.0 V1UnitV
  clz W8, W20  // CLZ <Wd>, <Wn>  \\ Count leading zeros  \\ 1 1  1  4.0 V1UnitI
  clz X7, X2  // CLZ <Xd>, <Xn>  \\ Count leading zeros  \\ 1 1  1  4.0 V1UnitI
  clz Z14.S, P0/M, Z11.S  // CLZ <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Count/reverse bits  \\ 1 2  2  2.0 V1UnitV01
  cmeq D9, D1, D15  // CMEQ <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmeq V1.2S, V17.2S, V19.2S  // CMEQ <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmeq D6, D17, #0  // CMEQ <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmeq V11.8H, V25.8H, #0  // CMEQ <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmge D16, D29, D4  // CMGE <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmge V6.2S, V28.2S, V14.2S  // CMGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmge D23, D23, #0  // CMGE <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmge V7.4S, V1.4S, #0  // CMGE <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmgt D27, D9, D20  // CMGT <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmgt V31.8H, V0.8H, V31.8H  // CMGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmgt D14, D29, #0  // CMGT <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmgt V19.16B, V1.16B, #0  // CMGT <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmhi D0, D11, D6  // CMHI <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmhi V25.8B, V5.8B, V3.8B  // CMHI <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmhs D6, D13, D24  // CMHS <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmhs V14.16B, V4.16B, V27.16B  // CMHS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmle D11, D26, #0  // CMLE <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmle V21.2D, V30.2D, #0  // CMLE <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmlt D27, D26, #0  // CMLT <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmlt V26.4H, V31.4H, #0  // CMLT <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmn WSP, W6  // CMN <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  cmn WSP, W27, SXTH  // CMN <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  cmn WSP, W15, UXTH #2  // CMN <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  cmn WSP, W28, LSL #4  // CMN <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 2  2  2.00 V1UnitJ
  cmn X21, X25  // CMN <Xn|SP>, X<m>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmn X16, W3, UXTB  // CMN <Xn|SP>, <R><m>, <extend>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmn X10, W2, UXTB #4  // CMN <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 1  1  3.00 V1UnitM
  cmn X2, X9, LSL #2  // CMN <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
  cmn WSP, #87  // CMN <Wn|WSP>, #<imm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmn WSP, #1199, LSL #12  // CMN <Wn|WSP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 1  1  3.00 V1UnitM
  cmn X15, #1872  // CMN <Xn|SP>, #<imm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmn X7, #2434, LSL #12  // CMN <Xn|SP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 1  1  3.00 V1UnitM
  cmn W22, W23  // CMN <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmn W1, W11, LSL #3  // CMN <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
  cmn W15, W8, LSL #24  // CMN <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  cmn W3, W3, ASR #6  // CMN <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  cmn X10, X17  // CMN <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmn X2, X2, LSL #1  // CMN <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
  cmn X29, X3, LSL #34  // CMN <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  cmn X21, X16, ASR #52  // CMN <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  cmp WSP, W8  // CMP <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  cmp WSP, W19, SXTH  // CMP <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  cmp WSP, W29, SXTB #1  // CMP <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  cmp WSP, W22, LSL #4  // CMP <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 2  2  2.00 V1UnitJ
  cmp X28, X19  // CMP <Xn|SP>, X<m>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmp X15, W15, UXTB  // CMP <Xn|SP>, <R><m>, <extend>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmp X26, X14, SXTX #1  // CMP <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 2  2  2.0 V1UnitM
  cmp X30, X2, LSL #2  // CMP <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
  cmp WSP, #1603  // CMP <Wn|WSP>, #<imm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmp WSP, #3756, LSL #12  // CMP <Wn|WSP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 1  1  3.00 V1UnitM
  cmp X7, #1698  // CMP <Xn|SP>, #<imm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  cmp X25, #754, LSL #12  // CMP <Xn|SP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 1  1  3.00 V1UnitM
  cmp W26, W16, LSL #2  // CMP <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
  cmp W13, W20, LSL #26  // CMP <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  cmp W21, W1, LSR #16  // CMP <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  cmp X10, X25, LSL #1  // CMP <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
  cmp X5, X15, LSL #21  // CMP <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  cmp X13, X19, LSR #7  // CMP <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  cmpeq P3.H, P4/Z, Z9.H, #9  // CMPEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpge P6.D, P4/Z, Z0.D, #15  // CMPGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpgt P6.B, P3/Z, Z2.B, #14  // CMPGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmphi P4.D, P2/Z, Z25.D, #119  // CMPHI <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmphs P4.H, P7/Z, Z6.H, #86  // CMPHS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmple P2.D, P2/Z, Z22.D, #-16  // CMPLE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmplo P0.D, P5/Z, Z20.D, #61  // CMPLO <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpls P1.D, P1/Z, Z29.D, #119  // CMPLS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmplt P7.B, P1/Z, Z29.B, #14  // CMPLT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpne P4.S, P1/Z, Z31.S, #-10  // CMPNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpeq P0.H, P0/Z, Z6.H, Z1.H  // CMPEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpge P7.S, P0/Z, Z22.S, Z30.S  // CMPGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpgt P2.B, P2/Z, Z9.B, Z26.B  // CMPGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmphi P7.D, P3/Z, Z27.D, Z26.D  // CMPHI <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmphs P0.D, P7/Z, Z19.D, Z23.D  // CMPHS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpne P6.B, P5/Z, Z13.B, Z4.B  // CMPNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpeq P6.B, P0/Z, Z23.B, Z5.D  // CMPEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpge P4.B, P3/Z, Z14.B, Z29.D  // CMPGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpgt P6.S, P1/Z, Z17.S, Z18.D  // CMPGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmphi P6.D, P4/Z, Z29.D, Z29.D  // CMPHI <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmphs P5.B, P5/Z, Z11.B, Z21.D  // CMPHS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmple P5.B, P1/Z, Z24.B, Z17.D  // CMPLE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmplo P2.B, P5/Z, Z17.B, Z12.D  // CMPLO <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpls P4.D, P5/Z, Z28.D, Z25.D  // CMPLS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmplt P1.S, P2/Z, Z12.S, Z10.D  // CMPLT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpne P2.S, P0/Z, Z17.S, Z14.D  // CMPNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmple P5.S, P4/Z, Z27.S, Z9.S  // CMPLE <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmplo P1.D, P6/Z, Z17.D, Z30.D  // CMPLO <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmpls P0.S, P6/Z, Z16.S, Z5.S  // CMPLS <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmplt P5.D, P6/Z, Z20.D, Z30.D  // CMPLT <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
  cmtst D23, D13, D9  // CMTST <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cmtst V14.8H, V23.8H, V7.8H  // CMTST <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
  cneg W13, W27, LO  // CNEG <Wd>, <Wn>, <cond>  \\ No description \\ No scheduling info
  cneg X29, X9, NLAST  // CNEG <Xd>, <Xn>, <cond>  \\ No description \\ No scheduling info
  cnot Z14.H, P3/M, Z23.H  // CNOT <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  cnt V11.8B, V23.8B  // CNT <Vd>.<T>, <Vn>.<T>  \\ ASIMD count  \\ 1 2  2  4.0 V1UnitV
  cnt Z5.B, P6/M, Z20.B  // CNT <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Predicate counting vector  \\ 1 2  2  2.0 V1UnitV01
  cntb X24  // CNTB <Xd>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cntb X21, VL2  // CNTB <Xd>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cntb X11, VL16, MUL #8  // CNTB <Xd>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cntd X28  // CNTD <Xd>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cntd X15, MUL3  // CNTD <Xd>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cntd X15, VL256, MUL #5  // CNTD <Xd>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cnth X20  // CNTH <Xd>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cnth X29, VL3  // CNTH <Xd>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cnth X25, VL4, MUL #12  // CNTH <Xd>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cntw X17  // CNTW <Xd>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cntw X3, ALL  // CNTW <Xd>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cntw X26, VL6, MUL #6  // CNTW <Xd>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  cntp X21, P5, P0.H  // CNTP <Xd>, <Pg>, <Pn>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  compact Z14.S, P3, Z10.S  // COMPACT <Zd>.<T>, <Pg>, <Zn>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
  cpy Z16.H, P7/M, H12  // CPY <Zd>.<T>, <Pg>/M, <V><n>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  cpy Z28.B, P4/M, #55  // CPY <Zd>.B, <Pg>/M, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  cpy Z15.D, P6/M, #23  // CPY <Zd>.<T>, <Pg>/M, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  cpy Z8.D, P1/M, #-41, LSL #8  // CPY <Zd>.<T>, <Pg>/M, #<imm>, <shift>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  cpy Z4.B, P7/Z, #105  // CPY <Zd>.B, <Pg>/Z, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  cpy Z29.D, P0/Z, #-74  // CPY <Zd>.<T>, <Pg>/Z, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  cpy Z0.D, P2/Z, #62, LSL #8  // CPY <Zd>.<T>, <Pg>/Z, #<imm>, <shift>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  cpy Z17.D, P1/M, X12  // CPY <Zd>.<T>, <Pg>/M, <R><n>  \\ Copy, scalar  \\ 2 5  5  1.0 V1UnitM0,V1UnitV01
  cpy Z3.H, P1/M, WSP  // CPY <Zd>.<T>, <Pg>/M, <R2>SP  \\ Copy, scalar  \\ 2 5  5  1.0 V1UnitM0,V1UnitV01
  crc32b W13, W24, W28  // CRC32B <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
  crc32h W3, W12, W25  // CRC32H <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
  crc32w W8, W27, W19  // CRC32W <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
  crc32x W24, W16, X20  // CRC32X <Wd>, <Wn>, <Xm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
  crc32cb W22, W22, W19  // CRC32CB <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
  crc32ch W4, W21, W16  // CRC32CH <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
  crc32cw W12, W28, W7  // CRC32CW <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
  crc32cx W23, W29, X14  // CRC32CX <Wd>, <Wn>, <Xm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
  csdb  // CSDB  \\ No description \\ No scheduling info
  csel W3, W5, W11, VC  // CSEL <Wd>, <Wn>, <Wm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
  csel X19, X24, X22, NFRST  // CSEL <Xd>, <Xn>, <Xm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
  cset W2, TCONT  // CSET <Wd>, <cond>  \\ No description \\ No scheduling info
  cset X17, LO  // CSET <Xd>, <cond>  \\ No description \\ No scheduling info
  csetm W16, LO  // CSETM <Wd>, <cond>  \\ No description \\ No scheduling info
  csetm X24, HS  // CSETM <Xd>, <cond>  \\ No description \\ No scheduling info
  csinc W4, W20, W16, VC  // CSINC <Wd>, <Wn>, <Wm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
  csinc X1, X2, X27, TSTOP  // CSINC <Xd>, <Xn>, <Xm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
  csinv W6, W24, W11, CS  // CSINV <Wd>, <Wn>, <Wm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
  csinv X29, X7, X30, MI  // CSINV <Xd>, <Xn>, <Xm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
  csneg W17, W11, W8, LAST  // CSNEG <Wd>, <Wn>, <Wm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
  csneg X10, X25, X27, TSTOP  // CSNEG <Xd>, <Xn>, <Xm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
  ctermeq X5, X3  // CTERMEQ <R><n>, <R><m>  \\ Loop terminate  \\ 1 1  1  1.0 V1UnitM0
  ctermne X8, X18  // CTERMNE <R><n>, <R><m>  \\ Loop terminate  \\ 1 1  1  1.0 V1UnitM0
  dc IVAC, X1  // DC <dc_op>, <Xt>  \\ No description \\ No scheduling info
  dcps1   // DCPS1   \\ No description \\ No scheduling info
  dcps1 #41552  // DCPS1 #<imm>  \\ No description \\ No scheduling info
  dcps2   // DCPS2   \\ No description \\ No scheduling info
  dcps2 #52262  // DCPS2 #<imm>  \\ No description \\ No scheduling info
  dcps3   // DCPS3   \\ No description \\ No scheduling info
  dcps3 #35269  // DCPS3 #<imm>  \\ No description \\ No scheduling info
  decb X7  // DECB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  decb X18, ALL  // DECB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  decb X20, ALL, MUL #4  // DECB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  decd X9  // DECD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  decd X11, VL64  // DECD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  decd X29, VL16, MUL #16  // DECD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  dech X2  // DECH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  dech X1, VL5  // DECH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  dech X0, VL4, MUL #16  // DECH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  decw X7  // DECW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  decw X30, VL6  // DECW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  decw X28, VL32, MUL #5  // DECW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  decd Z3.D  // DECD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  decd Z11.D, VL3  // DECD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  decd Z27.D, VL1, MUL #2  // DECD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  dech Z28.H  // DECH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  dech Z3.H, VL5  // DECH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  dech Z9.H, VL256, MUL #15  // DECH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  decw Z27.S  // DECW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  decw Z13.S, POW2  // DECW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  decw Z2.S, VL3, MUL #15  // DECW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  decp X21, P5.S  // DECP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  decp Z21.S, P5.S  // DECP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
  dmb ISH  // DMB <option>  \\ No description \\ No scheduling info
  dmb #4  // DMB #<imm>  \\ No description \\ No scheduling info
  drps  // DRPS  \\ No description \\ No scheduling info
  dup B18, V30.B[10]  // DUP B<d>, <Vn>.B[<indexb>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  dup H1, V3.H[6]  // DUP H<d>, <Vn>.H[<indexh>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  dup S10, V13.S[2]  // DUP S<d>, <Vn>.S[<indexs>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  dup D2, V16.D[1]  // DUP D<d>, <Vn>.D[<indexd>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  dup V18.16B, V4.B[9]  // DUP <Vd>.<Tb>, <Vn>.B[<indexb>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  dup V8.8H, V29.H[6]  // DUP <Vd>.<Th>, <Vn>.H[<indexh>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  dup V11.4S, V28.S[3]  // DUP <Vd>.<Ts>, <Vn>.S[<indexs>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  dup V15.2D, V11.D[1]  // DUP <Vd>.<Td>, <Vn>.D[<indexd>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  dup V30.4H, W27  // DUP <Vd>.<T>, <R><n>  \\ ASIMD duplicate, gen reg  \\ 1 3  3  1.0 V1UnitM0
  dup Z31.B, #94  // DUP <Zd>.B, #<imm>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  dup Z15.D, #-34  // DUP <Zd>.<T>, #<imm>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  dup Z26.H, #-121, LSL #0  // DUP <Zd>.<T>, #<imm>, <shift>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  dup Z4.B, Z18.B[59]  // DUP <Zd>.B, <Zn>.B[<immb>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  dup Z24.H, Z6.H[10]  // DUP <Zd>.H, <Zn>.H[<immh>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  dup Z5.S, Z12.S[14]  // DUP <Zd>.S, <Zn>.S[<imms>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  dup Z18.D, Z30.D[2]  // DUP <Zd>.D, <Zn>.D[<immd>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  dup Z15.H, W14  // DUP <Zd>.<T>, <R><n>  \\ Duplicate, scalar form  \\ 1 3  3  1.0 V1UnitM0
  dup Z6.H, WSP  // DUP <Zd>.<T>, <R2>SP  \\ Duplicate, scalar form  \\ 1 3  3  1.0 V1UnitM0
  dupm Z29.B, #0x70  // DUPM <Zd>.B, #<constb>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
  dupm Z11.H, #0x60  // DUPM <Zd>.H, #<consth>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
  dupm Z31.S, #0x2  // DUPM <Zd>.S, #<consts>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
  dupm Z8.D, #0x4  // DUPM <Zd>.D, #<constd>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
  eon W0, W2, W15  // EON <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  eon W17, W16, W5, LSL #23  // EON <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  eon X9, X23, X27  // EON <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  eon X12, X21, X26, LSR #40  // EON <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  eon Z7.B, Z7.B, #0x70  // EON <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eon Z4.H, Z4.H, #0x60  // EON <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eon Z6.S, Z6.S, #0x2  // EON <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eon Z26.D, Z26.D, #0x4  // EON <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eor WSP, W11, #0xe00  // EOR <Wd|WSP>, <Wn>, #<imms>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  eor X25, X10, #0xe00  // EOR <Xd|SP>, <Xn>, #<immd>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  eor Z27.B, Z27.B, #0x70  // EOR <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eor Z20.H, Z20.H, #0x60  // EOR <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eor Z31.S, Z31.S, #0x2  // EOR <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eor Z0.D, Z0.D, #0x4  // EOR <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eor P1.B, P6/Z, P2.B, P4.B  // EOR <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  eor W0, W19, W17  // EOR <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  eor W26, W14, W12, LSR #5  // EOR <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  eor X26, X25, X18  // EOR <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  eor X10, X10, X4, ASR #33  // EOR <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  eor V26.8B, V9.8B, V23.8B  // EOR <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  eor Z4.H, P7/M, Z4.H, Z16.H  // EOR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eor Z6.D, Z6.D, Z20.D  // EOR <Zd>.D, <Zn>.D, <Zm>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  eors P0.B, P5/Z, P2.B, P2.B  // EORS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  eorv H8, P7, Z17.H  // EORV <V><d>, <Pg>, <Zn>.<T>  \\ Reduction, logical   \\ 4 12  12  0.50 V1UnitV01[4]
  eret  // ERET  \\ No description \\ No scheduling info
  esb  // ESB  \\ No description \\ No scheduling info
  ext V9.8B, V20.8B, V16.8B, #7  // EXT <Vd>.8B, <Vn>.8B, <Vm>.8B, #<index8>  \\ ASIMD extract  \\ 1 2  2  4.0 V1UnitV
  ext V18.16B, V12.16B, V29.16B, #1  // EXT <Vd>.16B, <Vn>.16B, <Vm>.16B, #<index16>  \\ ASIMD extract  \\ 1 2  2  4.0 V1UnitV
  extr W18, W24, W24, #13  // EXTR <Wd>, <Wn>, <Wn>, #<lsbs>  \\ Bitfield extract, one reg  \\ 1 1  1  4.0 V1UnitI
  extr W5, W7, W8, #24  // EXTR <Wd>, <Wn>, <Wm>, #<lsbs>  \\ Bitfield extract, two regs  \\ 2 3  3  2.00 V1UnitM
  extr X3, X7, X7, #55  // EXTR <Xd>, <Xn>, <Xn>, #<lsbd>  \\ Bitfield extract, one reg  \\ 1 1  1  4.0 V1UnitI
  extr X14, X25, X26, #49  // EXTR <Xd>, <Xn>, <Xm>, #<lsbd>  \\ Bitfield extract, two regs  \\ 2 3  3  2.00 V1UnitM
  fabd H26, H2, H11  // FABD <Hd>, <Hn>, <Hm>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
  fabd S13, S26, S15  // FABD <V><d>, <V><n>, <V><m>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
  fabd V24.4H, V31.4H, V11.4H  // FABD <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
  fabd V4.2D, V1.2D, V18.2D  // FABD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
  fabd Z23.H, P1/M, Z23.H, Z1.H  // FABD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point absolute value/difference  \\ 1 2  2  2.0 V1UnitV01
  fabs H19, H5  // FABS <Hd>, <Hn>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
  fabs S0, S18  // FABS <Sd>, <Sn>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
  fabs D12, D1  // FABS <Dd>, <Dn>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
  fabs V1.4S, V1.4S  // FABS <Vd>.<T>, <Vn>.<T>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
  fabs V27.4S, V20.4S  // FABS <Vd>.<T>, <Vn>.<T>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
  fabs Z9.S, P1/M, Z3.S  // FABS <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Floating point absolute value/difference  \\ 1 2  2  2.0 V1UnitV01
  facge P7.S, P7/Z, Z1.S, Z15.S  // FACGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  facgt P0.S, P3/Z, Z1.S, Z18.S  // FACGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  facge H14, H31, H27  // FACGE <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  facge S7, S11, S3  // FACGE <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  facge V26.4S, V7.4S, V29.4S  // FACGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  facge V30.2S, V24.2S, V31.2S  // FACGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  facgt H11, H22, H30  // FACGT <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  facgt D0, D1, D5  // FACGT <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  facgt V15.8H, V2.8H, V20.8H  // FACGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  facgt V6.4H, V2.4H, V8.4H  // FACGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  facle P6.D, P7/Z, Z25.D, Z30.D  // FACLE <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  faclt P3.D, P5/Z, Z29.D, Z16.D  // FACLT <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fadd Z12.S, P2/M, Z12.S, #0.5  // FADD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
  fadd H30, H5, H14  // FADD <Hd>, <Hn>, <Hm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fadd S23, S15, S20  // FADD <Sd>, <Sn>, <Sm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fadd D30, D4, D26  // FADD <Dd>, <Dn>, <Dm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fadd V14.2D, V25.2D, V8.2D  // FADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fadd V11.2D, V13.2D, V7.2D  // FADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fadd Z15.S, P1/M, Z15.S, Z21.S  // FADD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
  fadd Z27.H, Z6.H, Z1.H  // FADD <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
  fadda H2, P4, H2, Z24.H  // FADDA H<dn>, <Pg>, H<dn>, <Zm>.H  \\ Floating point associative add, F16  \\ 18 19  19  0.06 V1UnitV0[17]
  fadda S2, P3, S2, Z23.S  // FADDA S<dn>, <Pg>, S<dn>, <Zm>.S  \\ Floating point associative add, F32  \\ 10 11  11  0.10 V1UnitV0[11]
  fadda D1, P3, D1, Z7.D  // FADDA D<dn>, <Pg>, D<dn>, <Zm>.D  \\ Floating point associative add, F64  \\ 3 8  8  0.67 V1UnitV01[3]
  faddp H22, V29.2H  // FADDP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  faddp S12, V10.2S  // FADDP <V><d>, <Vn>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  faddp V22.4S, V12.4S, V29.4S  // FADDP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  faddp V12.4S, V29.4S, V24.4S  // FADDP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  faddv H21, P6, Z17.H  // FADDV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
  faddv S10, P7, Z18.S  // FADDV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
  faddv D1, P6, Z9.D  // FADDV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
  fcadd Z30.H, P1/M, Z30.H, Z29.H, #90  // FCADD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>, <const>  \\ Floating point complex add  \\ 1 3  3  2.0 V1UnitV01
  fccmp H22, H12, #2, LO  // FCCMP <Hn>, <Hm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fccmp S26, S3, #14, NE  // FCCMP <Sn>, <Sm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fccmp D1, D16, #2, HS  // FCCMP <Dn>, <Dm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fccmpe H13, H8, #4, ANY  // FCCMPE <Hn>, <Hm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fccmpe S25, S6, #5, MI  // FCCMPE <Sn>, <Sm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fccmpe D26, D10, #1, NONE  // FCCMPE <Dn>, <Dm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmeq P3.S, P4/Z, Z14.S, Z30.S  // FCMEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmge P3.S, P2/Z, Z14.S, Z9.S  // FCMGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmgt P4.H, P0/Z, Z21.H, Z10.H  // FCMGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmne P5.H, P7/Z, Z18.H, Z29.H  // FCMNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmuo P4.H, P7/Z, Z4.H, Z13.H  // FCMUO <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmeq P7.S, P1/Z, Z11.S, #0.0  // FCMEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmge P6.H, P5/Z, Z31.H, #0.0  // FCMGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmgt P7.D, P4/Z, Z2.D, #0.0  // FCMGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmle P3.D, P6/Z, Z7.D, #0.0  // FCMLE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmlt P0.H, P7/Z, Z18.H, #0.0  // FCMLT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmne P7.D, P6/Z, Z9.D, #0.0  // FCMNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmeq H16, H2, H7  // FCMEQ <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmeq D10, D23, D5  // FCMEQ <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmeq V26.8H, V18.8H, V10.8H  // FCMEQ <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmeq V24.4H, V7.4H, V24.4H  // FCMEQ <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmeq H9, H3, #0.0  // FCMEQ <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmeq S0, S21, #0.0  // FCMEQ <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmeq V26.8H, V10.8H, #0.0  // FCMEQ <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmeq V22.8H, V22.8H, #0.0  // FCMEQ <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmge H8, H8, H17  // FCMGE <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmge D16, D0, D20  // FCMGE <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmge V28.4H, V22.4H, V5.4H  // FCMGE <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmge V30.2D, V22.2D, V10.2D  // FCMGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmge H2, H25, #0.0  // FCMGE <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmge S12, S9, #0.0  // FCMGE <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmge V28.4H, V21.4H, #0.0  // FCMGE <Vd>.<Th>, <Vn>.<Th>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmge V17.4S, V30.4S, #0.0  // FCMGE <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmgt H19, H5, H14  // FCMGT <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmgt D17, D19, D16  // FCMGT <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmgt V4.8H, V30.8H, V13.8H  // FCMGT <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmgt V11.2D, V7.2D, V14.2D  // FCMGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmgt H1, H3, #0.0  // FCMGT <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmgt D29, D8, #0.0  // FCMGT <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmgt V24.4H, V14.4H, #0.0  // FCMGT <Vd>.<Th>, <Vn>.<Th>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmgt V9.4S, V15.4S, #0.0  // FCMGT <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmla Z8.H, Z27.H, Z3.H[2], #90  // FCMLA <Zda>.H, <Zn>.H, <Zmh>.H[<immh>], <const>  \\ Floating point complex multiply add   \\ 1 5 2 2.0 V1UnitV01
  fcmla Z5.S, Z21.S, Z3.S[1], #90  // FCMLA <Zda>.S, <Zn>.S, <Zm>.S[<imm>], <const>  \\ Floating point complex multiply add   \\ 1 5 2 2.0 V1UnitV01
  fcmla Z6.H, P5/M, Z13.H, Z4.H, #180  // FCMLA <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>, <const>  \\ Floating point complex multiply add   \\ 1 5 2 2.0 V1UnitV01
  fcmle P3.S, P6/Z, Z26.S, Z17.S  // FCMLE <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmle H10, H25, #0.0  // FCMLE <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmle D19, D24, #0.0  // FCMLE <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmle V17.4H, V25.4H, #0.0  // FCMLE <Vd>.<Th>, <Vn>.<Th>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmle V28.2D, V15.2D, #0.0  // FCMLE <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmlt P6.D, P2/Z, Z14.D, Z28.D  // FCMLT <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
  fcmlt H9, H12, #0.0  // FCMLT <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmlt S5, S21, #0.0  // FCMLT <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmlt V15.4H, V7.4H, #0.0  // FCMLT <Vd>.<Th>, <Vn>.<Th>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmlt V18.4S, V16.4S, #0.0  // FCMLT <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
  fcmp H9, H23  // FCMP <Hn>, <Hm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmp H14, #0.0  // FCMP <Hn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmp S28, S17  // FCMP <Sn>, <Sm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmp S0, #0.0  // FCMP <Sn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmp D24, D28  // FCMP <Dn>, <Dm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmp D2, #0.0  // FCMP <Dn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmpe H20, H16  // FCMPE <Hn>, <Hm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmpe H21, #0.0  // FCMPE <Hn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmpe S3, S14  // FCMPE <Sn>, <Sm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmpe S27, #0.0  // FCMPE <Sn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmpe D6, D23  // FCMPE <Dn>, <Dm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcmpe D11, #0.0  // FCMPE <Dn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
  fcpy Z0.S, P0/M, #0.5  // FCPY <Zd>.<T>, <Pg>/M, #<const>  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
  fcsel H27, H4, H5, HS  // FCSEL <Hd>, <Hn>, <Hm>, <cond>  \\ FP select  \\ 1 2  2  2.0 V1UnitV01
  fcsel S10, S6, S24, CS  // FCSEL <Sd>, <Sn>, <Sm>, <cond>  \\ FP select  \\ 1 2  2  2.0 V1UnitV01
  fcsel D22, D27, D6, PMORE  // FCSEL <Dd>, <Dn>, <Dm>, <cond>  \\ FP select  \\ 1 2  2  2.0 V1UnitV01
  fcvt S18, H24  // FCVT <Sd>, <Hn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
  fcvt D13, H15  // FCVT <Dd>, <Hn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
  fcvt H3, S15  // FCVT <Hd>, <Sn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
  fcvt D3, S1  // FCVT <Dd>, <Sn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
  fcvt H17, D0  // FCVT <Hd>, <Dn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
  fcvt S8, D13  // FCVT <Sd>, <Dn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
  fcvt Z8.S, P7/M, Z31.H  // FCVT <Zd>.S, <Pg>/M, <Zn>.H  \\ Floating point convert, long or narrow (F16 to F32 or F32 to F16)  \\ 2 4  4  0.50 V1UnitV0[2]
  fcvt Z20.D, P0/M, Z23.H  // FCVT <Zd>.D, <Pg>/M, <Zn>.H  \\ Floating point convert, long or narrow (F16 to F64, F32 to F64, F64 to F32 or F64 to F16)  \\ 1 3  3  1.0 V1UnitV0
  fcvt Z13.H, P0/M, Z15.S  // FCVT <Zd>.H, <Pg>/M, <Zn>.S  \\ Floating point convert, long or narrow (F16 to F32 or F32 to F16)  \\ 2 4  4  0.50 V1UnitV0[2]
  fcvt Z3.D, P3/M, Z26.S  // FCVT <Zd>.D, <Pg>/M, <Zn>.S  \\ Floating point convert, long or narrow (F16 to F64, F32 to F64, F64 to F32 or F64 to F16)  \\ 1 3  3  1.0 V1UnitV0
  fcvt Z21.H, P3/M, Z19.D  // FCVT <Zd>.H, <Pg>/M, <Zn>.D  \\ Floating point convert, long or narrow (F16 to F64, F32 to F64, F64 to F32 or F64 to F16)  \\ 1 3  3  1.0 V1UnitV0
  fcvt Z0.S, P2/M, Z10.D  // FCVT <Zd>.S, <Pg>/M, <Zn>.D  \\ Floating point convert, long or narrow (F16 to F64, F32 to F64, F64 to F32 or F64 to F16)  \\ 1 3  3  1.0 V1UnitV0
  fcvtas W0, H0  // FCVTAS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtas X17, H28  // FCVTAS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtas W6, S30  // FCVTAS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtas X26, S19  // FCVTAS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtas W23, D22  // FCVTAS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtas X22, D24  // FCVTAS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtas H4, H15  // FCVTAS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtas S16, S24  // FCVTAS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtas D18, D2  // FCVTAS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtas V16.4H, V6.4H  // FCVTAS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtas V26.8H, V6.8H  // FCVTAS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtas V11.2S, V0.2S  // FCVTAS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtas V25.4S, V28.4S  // FCVTAS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtas V10.2D, V31.2D  // FCVTAS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtau W10, H25  // FCVTAU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtau X23, H9  // FCVTAU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtau W3, S25  // FCVTAU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtau X28, S2  // FCVTAU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtau W7, D18  // FCVTAU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtau X22, D6  // FCVTAU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtau H22, H12  // FCVTAU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtau S9, S6  // FCVTAU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtau D29, D5  // FCVTAU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtau V0.4H, V27.4H  // FCVTAU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtau V5.8H, V7.8H  // FCVTAU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtau V20.2S, V10.2S  // FCVTAU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtau V15.4S, V17.4S  // FCVTAU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtau V27.2D, V25.2D  // FCVTAU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtl V13.4S, V26.4H  // FCVTL <Vd>.4S, <Vn>.4H  \\ ASIMD FP convert, long (F16 to F32)  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtl V0.2D, V29.2S  // FCVTL <Vd>.2D, <Vn>.2S  \\ ASIMD FP convert, long (F32 to F64)  \\ 1 3  3  2.0 V1UnitV02
  fcvtl2 V4.4S, V30.8H  // FCVTL2 <Vd>.4S, <Vn>.8H  \\ ASIMD FP convert, long (F16 to F32)  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtl2 V13.2D, V11.4S  // FCVTL2 <Vd>.2D, <Vn>.4S  \\ ASIMD FP convert, long (F32 to F64)  \\ 1 3  3  2.0 V1UnitV02
  fcvtms W18, H21  // FCVTMS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtms X17, H19  // FCVTMS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtms W3, S8  // FCVTMS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtms X16, S10  // FCVTMS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtms W15, D9  // FCVTMS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtms X11, D20  // FCVTMS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtms H21, H0  // FCVTMS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtms S3, S26  // FCVTMS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtms D9, D0  // FCVTMS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtms V29.4H, V11.4H  // FCVTMS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtms V9.8H, V8.8H  // FCVTMS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtms V23.2S, V6.2S  // FCVTMS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtms V27.4S, V17.4S  // FCVTMS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtms V30.2D, V11.2D  // FCVTMS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtmu W7, H4  // FCVTMU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtmu X6, H30  // FCVTMU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtmu W4, S29  // FCVTMU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtmu X10, S0  // FCVTMU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtmu W13, D17  // FCVTMU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtmu X11, D14  // FCVTMU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtmu H5, H24  // FCVTMU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtmu S8, S3  // FCVTMU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtmu D13, D10  // FCVTMU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtmu V3.4H, V31.4H  // FCVTMU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtmu V31.8H, V20.8H  // FCVTMU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtmu V7.2S, V29.2S  // FCVTMU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtmu V10.4S, V17.4S  // FCVTMU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtmu V25.2D, V4.2D  // FCVTMU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtn V20.4H, V12.4S  // FCVTN <Vd>.4H, <Vn>.4S  \\ ASIMD FP convert, narrow (F32 to F16)  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtn V10.2S, V4.2D  // FCVTN <Vd>.2S, <Vn>.2D  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
  fcvtn2 V31.8H, V0.4S  // FCVTN2 <Vd>.8H, <Vn>.4S  \\ ASIMD FP convert, narrow (F32 to F16)  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtn2 V17.4S, V2.2D  // FCVTN2 <Vd>.4S, <Vn>.2D  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
  fcvtns W25, H11  // FCVTNS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtns X9, H29  // FCVTNS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtns W6, S23  // FCVTNS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtns X9, S27  // FCVTNS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtns W28, D30  // FCVTNS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtns X18, D9  // FCVTNS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtns H19, H3  // FCVTNS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtns S12, S5  // FCVTNS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtns D16, D9  // FCVTNS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtns V14.4H, V22.4H  // FCVTNS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtns V20.8H, V25.8H  // FCVTNS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtns V19.2S, V28.2S  // FCVTNS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtns V16.4S, V12.4S  // FCVTNS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtns V19.2D, V8.2D  // FCVTNS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtnu W20, H27  // FCVTNU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtnu X6, H11  // FCVTNU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtnu W22, S3  // FCVTNU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtnu X3, S3  // FCVTNU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtnu W24, D29  // FCVTNU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtnu X12, D23  // FCVTNU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtnu H3, H1  // FCVTNU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtnu S13, S19  // FCVTNU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtnu D3, D13  // FCVTNU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtnu V4.4H, V2.4H  // FCVTNU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtnu V22.8H, V10.8H  // FCVTNU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtnu V17.2S, V13.2S  // FCVTNU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtnu V5.4S, V18.4S  // FCVTNU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtnu V3.2D, V27.2D  // FCVTNU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtps W8, H26  // FCVTPS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtps X12, H17  // FCVTPS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtps W3, S4  // FCVTPS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtps X13, S20  // FCVTPS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtps W17, D2  // FCVTPS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtps X6, D27  // FCVTPS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtps H5, H0  // FCVTPS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtps S3, S20  // FCVTPS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtps D19, D24  // FCVTPS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtps V12.4H, V12.4H  // FCVTPS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtps V8.8H, V12.8H  // FCVTPS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtps V6.2S, V4.2S  // FCVTPS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtps V18.4S, V29.4S  // FCVTPS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtps V10.2D, V26.2D  // FCVTPS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtpu W30, H4  // FCVTPU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtpu X16, H31  // FCVTPU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtpu W27, S15  // FCVTPU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtpu X22, S3  // FCVTPU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtpu W12, D12  // FCVTPU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtpu X18, D0  // FCVTPU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtpu H4, H29  // FCVTPU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtpu S25, S24  // FCVTPU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtpu D17, D21  // FCVTPU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtpu V26.4H, V15.4H  // FCVTPU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtpu V22.8H, V6.8H  // FCVTPU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtpu V22.2S, V10.2S  // FCVTPU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtpu V0.4S, V19.4S  // FCVTPU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtpu V25.2D, V13.2D  // FCVTPU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtxn S12, D22  // FCVTXN <Vb><d>, <Va><n>  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
  fcvtxn V29.2S, V10.2D  // FCVTXN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
  fcvtxn2 V21.4S, V2.2D  // FCVTXN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
  fcvtzs W8, H7, #31  // FCVTZS <Wd>, <Hn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzs X21, H24, #9  // FCVTZS <Xd>, <Hn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzs W6, S22, #20  // FCVTZS <Wd>, <Sn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzs X5, S2, #54  // FCVTZS <Xd>, <Sn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzs W14, D31, #2  // FCVTZS <Wd>, <Dn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzs X30, D9, #2  // FCVTZS <Xd>, <Dn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzs W21, H7  // FCVTZS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzs X10, H9  // FCVTZS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzs W27, S23  // FCVTZS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzs X30, S0  // FCVTZS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzs W25, D30  // FCVTZS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzs X5, D5  // FCVTZS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzs H26, H19, #10  // FCVTZS H<d>, H<n>, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
  fcvtzs S23, S10, #5  // FCVTZS S<d>, S<n>, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtzs D16, D6, #42  // FCVTZS D<d>, D<n>, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzs V3.4H, V27.4H, #1  // FCVTZS <Vd>.4H, <Vn>.4H, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtzs V29.8H, V29.8H, #4  // FCVTZS <Vd>.8H, <Vn>.8H, #<hfbits>  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtzs V22.2S, V4.2S, #1  // FCVTZS <Vd>.2S, <Vn>.2S, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzs V31.4S, V3.4S, #10  // FCVTZS <Vd>.4S, <Vn>.4S, #<sfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtzs V17.2D, V2.2D, #37  // FCVTZS <Vd>.2D, <Vn>.2D, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzs H5, H21  // FCVTZS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtzs S7, S25  // FCVTZS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtzs D23, D0  // FCVTZS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzs V9.4H, V30.4H  // FCVTZS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtzs V25.8H, V12.8H  // FCVTZS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtzs V8.2S, V9.2S  // FCVTZS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzs V13.4S, V2.4S  // FCVTZS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtzs V22.2D, V30.2D  // FCVTZS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzs Z9.H, P7/M, Z3.H  // FCVTZS <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 4 6  6  0.25 V1UnitV0[4]
  fcvtzs Z30.S, P3/M, Z28.H  // FCVTZS <Zd>.S, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 2 4  4  0.50 V1UnitV0[4]
  fcvtzs Z0.D, P0/M, Z20.H  // FCVTZS <Zd>.D, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 1 3  3  1.00 V1UnitV0[4]
  fcvtzs Z26.S, P7/M, Z5.S  // FCVTZS <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point convert to integer, F32  \\ 2 4  4  0.50 V1UnitV0[2]
  fcvtzs Z14.D, P0/M, Z1.S  // FCVTZS <Zd>.D, <Pg>/M, <Zn>.S  \\ Floating point convert to integer, F32  \\ 1 3  3  1.00 V1UnitV0[2]
  fcvtzs Z14.S, P1/M, Z8.D  // FCVTZS <Zd>.S, <Pg>/M, <Zn>.D  \\ Floating point convert to integer, F64  \\ 1 3  3  1.0 V1UnitV0
  fcvtzs Z3.D, P2/M, Z19.D  // FCVTZS <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point convert to integer, F64  \\ 1 3  3  1.0 V1UnitV0
  fcvtzu W5, H8, #19  // FCVTZU <Wd>, <Hn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzu X22, H25, #60  // FCVTZU <Xd>, <Hn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzu W0, S26, #18  // FCVTZU <Wd>, <Sn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzu X0, S23, #30  // FCVTZU <Xd>, <Sn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzu W30, D8, #9  // FCVTZU <Wd>, <Dn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzu X27, D23, #5  // FCVTZU <Xd>, <Dn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
  fcvtzu W17, H28  // FCVTZU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzu X4, H17  // FCVTZU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzu W21, S3  // FCVTZU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzu X24, S4  // FCVTZU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzu W13, D26  // FCVTZU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzu X17, D13  // FCVTZU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
  fcvtzu H5, H10, #12  // FCVTZU H<d>, H<n>, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
  fcvtzu S8, S7, #27  // FCVTZU S<d>, S<n>, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtzu D21, D28, #30  // FCVTZU D<d>, D<n>, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzu V15.4H, V21.4H, #3  // FCVTZU <Vd>.4H, <Vn>.4H, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtzu V8.8H, V14.8H, #5  // FCVTZU <Vd>.8H, <Vn>.8H, #<hfbits>  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtzu V2.2S, V31.2S, #18  // FCVTZU <Vd>.2S, <Vn>.2S, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzu V7.4S, V23.4S, #3  // FCVTZU <Vd>.4S, <Vn>.4S, #<sfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtzu V10.2D, V2.2D, #61  // FCVTZU <Vd>.2D, <Vn>.2D, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzu H12, H28  // FCVTZU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
  fcvtzu S4, S27  // FCVTZU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  fcvtzu D22, D9  // FCVTZU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzu V19.4H, V3.4H  // FCVTZU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtzu V4.8H, V13.8H  // FCVTZU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  fcvtzu V20.2S, V16.2S  // FCVTZU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzu V8.4S, V18.4S  // FCVTZU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  fcvtzu V18.2D, V6.2D  // FCVTZU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  fcvtzu Z0.H, P5/M, Z9.H  // FCVTZU <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 4 6  6  0.25 V1UnitV0[4]
  fcvtzu Z10.S, P3/M, Z9.H  // FCVTZU <Zd>.S, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 2 4  4  0.50 V1UnitV0[4]
  fcvtzu Z31.D, P0/M, Z30.H  // FCVTZU <Zd>.D, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 1 3  3  1.00 V1UnitV0[4]
  fcvtzu Z17.S, P5/M, Z22.S  // FCVTZU <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point convert to integer, F32  \\ 2 4  4  0.50 V1UnitV0[2]
  fcvtzu Z1.D, P1/M, Z23.S  // FCVTZU <Zd>.D, <Pg>/M, <Zn>.S  \\ Floating point convert to integer, F32  \\ 1 3  3  1.00 V1UnitV0[2]
  fcvtzu Z29.S, P7/M, Z3.D  // FCVTZU <Zd>.S, <Pg>/M, <Zn>.D  \\ Floating point convert to integer, F64  \\ 1 3  3  1.0 V1UnitV0
  fcvtzu Z29.D, P6/M, Z17.D  // FCVTZU <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point convert to integer, F64  \\ 1 3  3  1.0 V1UnitV0
  fdiv H29, H6, H25  // FDIV <Hd>, <Hn>, <Hm>  \\ FP divide, H-form  \\ 1 7  7  0.29 V1UnitV02[2]
  fdiv S7, S11, S3  // FDIV <Sd>, <Sn>, <Sm>  \\ FP divide, S-form  \\ 1 10  10  0.29 V1UnitV02[3]
  fdiv D10, D5, D2  // FDIV <Dd>, <Dn>, <Dm>  \\ FP divide, D-form  \\ 1 15 15 0.29 V1UnitV02[7]
  fdiv V20.4H, V5.4H, V18.4H  // FDIV <Vd>.4H, <Vn>.4H, <Vm>.4H  \\ ASIMD FP divide, D-form, F16  \\ 1 7  7  0.29 V1UnitV02[7]
  fdiv V20.8H, V12.8H, V20.8H  // FDIV <Vd>.8H, <Vn>.8H, <Vm>.8H  \\ ASIMD FP divide, Q-form, F16  \\ 1 13  13  0.40 V1UnitV02[14]
  fdiv V27.2S, V0.2S, V12.2S  // FDIV <Vd>.2S, <Vn>.2S, <Vm>.2S  \\ ASIMD FP divide, D-form, F32  \\ 1 10  10  0.29 V1UnitV02[5]
  fdiv V11.4S, V28.4S, V6.4S  // FDIV <Vd>.4S, <Vn>.4S, <Vm>.4S  \\ ASIMD FP divide, Q-form, F32  \\ 1 10  10  0.29 V1UnitV02[10]
  fdiv V6.2D, V26.2D, V21.2D  // FDIV <Vd>.2D, <Vn>.2D, <Vm>.2D  \\ ASIMD FP divide, Q-form, F64  \\ 1 15  15  0.29 V1UnitV02[15]
  fdiv Z3.H, P1/M, Z3.H, Z24.H  // FDIV <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Floating point divide, F16  \\ 1 13  13  0.10 V1UnitV0[13]
  fdiv Z11.S, P1/M, Z11.S, Z18.S  // FDIV <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Floating point divide, F32  \\ 1 10  10  0.14 V1UnitV0[10]
  fdiv Z16.D, P2/M, Z16.D, Z29.D  // FDIV <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Floating point divide, F64  \\ 1 15  15  0.14 V1UnitV0[15]
  fdivr Z20.H, P1/M, Z20.H, Z5.H  // FDIVR <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Floating point divide, F16  \\ 1 13  13  0.10 V1UnitV0[13]
  fdivr Z28.S, P6/M, Z28.S, Z9.S  // FDIVR <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Floating point divide, F32  \\ 1 10  10  0.14 V1UnitV0[10]
  fdivr Z25.D, P4/M, Z25.D, Z28.D  // FDIVR <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Floating point divide, F64  \\ 1 15  15  0.14 V1UnitV0[15]
  fdup Z29.S, #0.5  // FDUP <Zd>.<T>, #<const>  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
  fexpa Z24.S, Z23.S  // FEXPA <Zd>.<T>, <Zn>.<T>  \\ Floating point trigonometric   \\ 1 3  3  2.0 V1UnitV01
  fmad Z21.D, P4/M, Z26.D, Z25.D  // FMAD <Zdn>.<T>, <Pg>/M, <Zm>.<T>, <Za>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmadd H13, H21, H13, H29  // FMADD <Hd>, <Hn>, <Hm>, <Ha>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmadd S26, S10, S10, S21  // FMADD <Sd>, <Sn>, <Sm>, <Sa>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmadd D24, D9, D17, D5  // FMADD <Dd>, <Dn>, <Dm>, <Da>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmax Z11.D, P7/M, Z11.D, #0.0  // FMAX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
  fmax H23, H17, H14  // FMAX <Hd>, <Hn>, <Hm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmax S19, S26, S7  // FMAX <Sd>, <Sn>, <Sm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmax D28, D24, D30  // FMAX <Dd>, <Dn>, <Dm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmax V5.2S, V13.2S, V20.2S  // FMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmax V4.2S, V11.2S, V22.2S  // FMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmax Z20.D, P4/M, Z20.D, Z21.D  // FMAX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
  fmaxnm Z5.D, P2/M, Z5.D, #1.0  // FMAXNM <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
  fmaxnm H11, H17, H6  // FMAXNM <Hd>, <Hn>, <Hm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmaxnm S19, S21, S18  // FMAXNM <Sd>, <Sn>, <Sm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmaxnm D25, D4, D26  // FMAXNM <Dd>, <Dn>, <Dm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmaxnm V24.2S, V23.2S, V20.2S  // FMAXNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmaxnm V6.8H, V16.8H, V2.8H  // FMAXNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmaxnm Z29.S, P2/M, Z29.S, Z8.S  // FMAXNM <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
  fmaxnmp H1, V31.2H  // FMAXNMP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fmaxnmp S5, V10.2S  // FMAXNMP <V><d>, <Vn>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fmaxnmp V4.2D, V17.2D, V22.2D  // FMAXNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fmaxnmp V22.2D, V24.2D, V8.2D  // FMAXNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fmaxnmv H17, V18.4H  // FMAXNMV H<d>, <Vn>.4H  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
  fmaxnmv H26, V3.8H  // FMAXNMV H<d>, <Vn>.8H  \\ ASIMD FP max/min, reduce, Q-form F16  \\ 3 6  6  1.33 V1UnitV[4]
  fmaxnmv S19, V6.4S  // FMAXNMV S<d>, <Vn>.4S  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
  fmaxnmv H19, P7, Z1.H  // FMAXNMV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
  fmaxnmv S15, P2, Z6.S  // FMAXNMV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
  fmaxnmv D12, P3, Z11.D  // FMAXNMV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
  fmaxp H18, V27.2H  // FMAXP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fmaxp S9, V5.2S  // FMAXP <V><d>, <Vn>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fmaxp V15.2D, V21.2D, V10.2D  // FMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fmaxp V19.2D, V17.2D, V16.2D  // FMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fmaxv H4, V18.4H  // FMAXV H<d>, <Vn>.4H  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
  fmaxv H24, V23.8H  // FMAXV H<d>, <Vn>.8H  \\ ASIMD FP max/min, reduce, Q-form F16  \\ 3 6  6  1.33 V1UnitV[4]
  fmaxv S6, V18.4S  // FMAXV S<d>, <Vn>.4S  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
  fmaxv H12, P4, Z30.H  // FMAXV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
  fmaxv S21, P2, Z8.S  // FMAXV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
  fmaxv D30, P0, Z11.D  // FMAXV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
  fmin Z29.D, P6/M, Z29.D, #1.0  // FMIN <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
  fmin H6, H31, H9  // FMIN <Hd>, <Hn>, <Hm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmin S11, S31, S22  // FMIN <Sd>, <Sn>, <Sm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmin D4, D27, D9  // FMIN <Dd>, <Dn>, <Dm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmin V11.2S, V28.2S, V11.2S  // FMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmin V9.2S, V6.2S, V26.2S  // FMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fmin Z26.D, P0/M, Z26.D, Z0.D  // FMIN <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
  fminnm Z22.H, P7/M, Z22.H, #0.0  // FMINNM <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
  fminnm H12, H22, H8  // FMINNM <Hd>, <Hn>, <Hm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fminnm S10, S15, S20  // FMINNM <Sd>, <Sn>, <Sm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fminnm D1, D13, D6  // FMINNM <Dd>, <Dn>, <Dm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fminnm V12.4S, V19.4S, V20.4S  // FMINNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fminnm V24.2S, V12.2S, V23.2S  // FMINNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
  fminnm Z31.D, P0/M, Z31.D, Z17.D  // FMINNM <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
  fminnmp H6, V27.2H  // FMINNMP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fminnmp S7, V7.2S  // FMINNMP <V><d>, <Vn>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fminnmp V5.4S, V17.4S, V13.4S  // FMINNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fminnmp V12.4S, V9.4S, V14.4S  // FMINNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fminnmv H7, V7.4H  // FMINNMV H<d>, <Vn>.4H  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
  fminnmv H27, V8.8H  // FMINNMV H<d>, <Vn>.8H  \\ ASIMD FP max/min, reduce, Q-form F16  \\ 3 6  6  1.33 V1UnitV[4]
  fminnmv S17, V23.4S  // FMINNMV S<d>, <Vn>.4S  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
  fminnmv H5, P7, Z3.H  // FMINNMV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
  fminnmv S18, P2, Z24.S  // FMINNMV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
  fminnmv D24, P4, Z23.D  // FMINNMV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
  fminp H21, V24.2H  // FMINP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fminp S24, V5.2S  // FMINP <V><d>, <Vn>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fminp V30.2S, V2.2S, V11.2S  // FMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fminp V24.2S, V12.2S, V31.2S  // FMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
  fminv H1, V29.4H  // FMINV H<d>, <Vn>.4H  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
  fminv H17, V5.8H  // FMINV H<d>, <Vn>.8H  \\ ASIMD FP max/min, reduce, Q-form F16  \\ 3 6  6  1.33 V1UnitV[4]
  fminv S15, V10.4S  // FMINV S<d>, <Vn>.4S  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
  fminv H11, P6, Z0.H  // FMINV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
  fminv S16, P1, Z25.S  // FMINV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
  fminv D28, P2, Z13.D  // FMINV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
  fmla H29, H14, V1.H[3]  // FMLA <Hd>, <Hn>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmla S28, S19, V8.S[1]  // FMLA S<d>, S<n>, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmla D15, D3, V14.D[0]  // FMLA D<d>, D<n>, <Vm>.D[<indexd>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmla V9.4H, V1.4H, V7.H[0]  // FMLA <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmla V16.2S, V25.2S, V21.S[3]  // FMLA <Vd>.2S, <Vn>.2S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmla V11.4S, V17.4S, V13.S[2]  // FMLA <Vd>.4S, <Vn>.4S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmla V9.2D, V13.2D, V16.D[1]  // FMLA <Vd>.2D, <Vn>.2D, <Vm>.D[<indexd>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmla Z7.H, Z6.H, Z4.H[2]  // FMLA <Zda>.H, <Zn>.H, <Zmhs>.H[<immh>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmla Z13.S, Z20.S, Z5.S[3]  // FMLA <Zda>.S, <Zn>.S, <Zmhs>.S[<imms>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmla Z22.D, Z24.D, Z9.D[0]  // FMLA <Zda>.D, <Zn>.D, <Zmd>.D[<immd>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmla V5.2D, V2.2D, V7.2D  // FMLA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmla V26.2S, V29.2S, V14.2S  // FMLA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmla Z17.H, P3/M, Z9.H, Z3.H  // FMLA <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmls H20, H24, V6.H[5]  // FMLS <Hd>, <Hn>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmls S24, S0, V8.S[0]  // FMLS S<d>, S<n>, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmls D20, D26, V31.D[0]  // FMLS D<d>, D<n>, <Vm>.D[<indexd>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmls V13.8H, V0.8H, V8.H[1]  // FMLS <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmls V8.2S, V13.2S, V8.S[1]  // FMLS <Vd>.2S, <Vn>.2S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmls V13.4S, V16.4S, V20.S[3]  // FMLS <Vd>.4S, <Vn>.4S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmls V21.2D, V27.2D, V1.D[0]  // FMLS <Vd>.2D, <Vn>.2D, <Vm>.D[<indexd>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmls Z23.H, Z13.H, Z5.H[7]  // FMLS <Zda>.H, <Zn>.H, <Zmhs>.H[<immh>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmls Z29.S, Z10.S, Z5.S[2]  // FMLS <Zda>.S, <Zn>.S, <Zmhs>.S[<imms>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmls Z7.D, Z19.D, Z6.D[1]  // FMLS <Zda>.D, <Zn>.D, <Zmd>.D[<immd>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmls V24.4H, V28.4H, V1.4H  // FMLS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmls V2.4S, V5.4S, V29.4S  // FMLS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmls Z9.D, P1/M, Z1.D, Z11.D  // FMLS <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmov W25, H28  // FMOV <Wd>, <Hn>  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
  fmov X15, H4  // FMOV <Xd>, <Hn>  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
  fmov H31, W25  // FMOV <Hd>, <Wn>  \\ FP transfer, from gen to low half of vec reg  \\ 1 3  3  1.0 V1UnitM0
  fmov S18, W20  // FMOV <Sd>, <Wn>  \\ FP transfer, from gen to low half of vec reg  \\ 1 3  3  1.0 V1UnitM0
  fmov W2, S19  // FMOV <Wd>, <Sn>  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
  fmov H10, X4  // FMOV <Hd>, <Xn>  \\ FP transfer, from gen to low half of vec reg  \\ 1 3  3  1.0 V1UnitM0
  fmov D27, X9  // FMOV <Dd>, <Xn>  \\ FP transfer, from gen to low half of vec reg  \\ 1 3  3  1.0 V1UnitM0
  fmov V29.D[1], X9  // FMOV <Vd>.D[1], <Xn>  \\ FP transfer, from gen to high half of vec reg  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
  fmov X23, D14  // FMOV <Xd>, <Dn>  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
  fmov X20, V8.D[1]  // FMOV <Xd>, <Vn>.D[1]  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
  fmov Z12.D, P6/M, #0.5  // FMOV <Zd>.<T>, <Pg>/M, #<const>  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
  fmov Z27.S, #0.5  // FMOV <Zd>.<T>, #<const>  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
  fmov H24, H21  // FMOV <Hd>, <Hn>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
  fmov S9, S20  // FMOV <Sd>, <Sn>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
  fmov D25, D30  // FMOV <Dd>, <Dn>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
  fmov H31, #0.5  // FMOV <Hd>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
  fmov S26, #0.5  // FMOV <Sd>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
  fmov D7, #0.5  // FMOV <Dd>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
  fmov V11.2D, #0.5  // FMOV <Vd>.<T>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
  fmov V13.2D, #0.5  // FMOV <Vd>.<T>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
  fmov V6.2D, #0.5  // FMOV <Vd>.2D, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
  fmov Z13.H, P6/M, #0.0  // FMOV <Zd>.<T>, <Pg>/M, #0.0  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
  fmov Z1.S, #0.0  // FMOV <Zd>.<T>, #0.0  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
  fmsb Z20.S, P7/M, Z30.S, Z30.S  // FMSB <Zdn>.<T>, <Pg>/M, <Zm>.<T>, <Za>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fmsub H16, H18, H20, H5  // FMSUB <Hd>, <Hn>, <Hm>, <Ha>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmsub S25, S16, S13, S19  // FMSUB <Sd>, <Sn>, <Sm>, <Sa>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmsub D0, D7, D31, D26  // FMSUB <Dd>, <Dn>, <Dm>, <Da>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fmul H3, H13, V9.H[5]  // FMUL <Hd>, <Hn>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul S27, S11, V25.S[1]  // FMUL S<d>, S<n>, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul D2, D7, V11.D[1]  // FMUL D<d>, D<n>, <Vm>.D[<indexd>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul V1.4H, V5.4H, V13.H[5]  // FMUL <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul V4.2S, V11.2S, V17.S[1]  // FMUL <Vd>.2S, <Vn>.2S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul V24.4S, V27.4S, V19.S[1]  // FMUL <Vd>.4S, <Vn>.4S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul V0.2D, V20.2D, V7.D[1]  // FMUL <Vd>.2D, <Vn>.2D, <Vm>.D[<indexd>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul Z16.S, P6/M, Z16.S, #2.0  // FMUL <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
  fmul Z21.H, Z24.H, Z3.H[7]  // FMUL <Zd>.H, <Zn>.H, <Zmhs>.H[<immh>]  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
  fmul Z19.S, Z20.S, Z0.S[1]  // FMUL <Zd>.S, <Zn>.S, <Zmhs>.S[<imms>]  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
  fmul Z20.D, Z23.D, Z0.D[1]  // FMUL <Zd>.D, <Zn>.D, <Zmd>.D[<immd>]  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
  fmul H25, H2, H8  // FMUL <Hd>, <Hn>, <Hm>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul S6, S8, S19  // FMUL <Sd>, <Sn>, <Sm>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul D4, D26, D23  // FMUL <Dd>, <Dn>, <Dm>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul V21.2S, V6.2S, V25.2S  // FMUL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul V15.4H, V30.4H, V7.4H  // FMUL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmul Z3.H, P2/M, Z3.H, Z22.H  // FMUL <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
  fmul Z19.H, Z18.H, Z0.H  // FMUL <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
  fmulx H29, H6, V14.H[5]  // FMULX <Hd>, <Hn>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmulx S5, S6, V25.S[3]  // FMULX S<d>, S<n>, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmulx D17, D25, V16.D[1]  // FMULX D<d>, D<n>, <Vm>.D[<indexd>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmulx V12.8H, V12.8H, V14.H[2]  // FMULX <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmulx V7.2S, V31.2S, V4.S[1]  // FMULX <Vd>.2S, <Vn>.2S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmulx V15.4S, V27.4S, V5.S[2]  // FMULX <Vd>.4S, <Vn>.4S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmulx V23.2D, V13.2D, V20.D[1]  // FMULX <Vd>.2D, <Vn>.2D, <Vm>.D[<indexd>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmulx H23, H21, H6  // FMULX <Hd>, <Hn>, <Hm>  \\ ASIMD FP multiply  \\ 1 2  2  4.00 V1UnitV
  fmulx S9, S5, S7  // FMULX <V><d>, <V><n>, <V><m>  \\ ASIMD FP multiply  \\ 1 2  2  4.00 V1UnitV
  fmulx V12.2S, V26.2S, V31.2S  // FMULX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmulx V0.2S, V31.2S, V21.2S  // FMULX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
  fmulx Z3.H, P1/M, Z3.H, Z27.H  // FMULX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
  fneg H21, H9  // FNEG <Hd>, <Hn>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
  fneg S16, S1  // FNEG <Sd>, <Sn>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
  fneg D22, D13  // FNEG <Dd>, <Dn>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
  fneg V13.4S, V19.4S  // FNEG <Vd>.<T>, <Vn>.<T>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
  fneg V0.2S, V15.2S  // FNEG <Vd>.<T>, <Vn>.<T>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
  fneg Z2.D, P7/M, Z3.D  // FNEG <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
  fnmad Z3.S, P4/M, Z30.S, Z27.S  // FNMAD <Zdn>.<T>, <Pg>/M, <Zm>.<T>, <Za>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fnmadd H31, H20, H23, H16  // FNMADD <Hd>, <Hn>, <Hm>, <Ha>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fnmadd S14, S12, S29, S24  // FNMADD <Sd>, <Sn>, <Sm>, <Sa>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fnmadd D9, D22, D20, D17  // FNMADD <Dd>, <Dn>, <Dm>, <Da>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fnmla Z16.S, P0/M, Z14.S, Z24.S  // FNMLA <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fnmls Z26.S, P6/M, Z28.S, Z31.S  // FNMLS <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fnmsb Z1.H, P4/M, Z1.H, Z4.H  // FNMSB <Zdn>.<T>, <Pg>/M, <Zm>.<T>, <Za>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
  fnmsub H1, H4, H8, H15  // FNMSUB <Hd>, <Hn>, <Hm>, <Ha>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fnmsub S11, S30, S7, S1  // FNMSUB <Sd>, <Sn>, <Sm>, <Sa>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fnmsub D7, D7, D21, D20  // FNMSUB <Dd>, <Dn>, <Dm>, <Da>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
  fnmul H1, H20, H18  // FNMUL <Hd>, <Hn>, <Hm>  \\ FP multiply  \\ 1 3  3  4.0 V1UnitV
  fnmul S30, S1, S12  // FNMUL <Sd>, <Sn>, <Sm>  \\ FP multiply  \\ 1 3  3  4.0 V1UnitV
  fnmul D31, D28, D20  // FNMUL <Dd>, <Dn>, <Dm>  \\ FP multiply  \\ 1 3  3  4.0 V1UnitV
  frecpe H8, H30  // FRECPE <Hd>, <Hn>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1 4  4  2.00 V1UnitV02
  frecpe S30, S17  // FRECPE S<d>, S<n>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
  frecpe D17, D3  // FRECPE D<d>, D<n>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
  frecpe V13.4H, V26.4H  // FRECPE <Vd>.4H, <Vn>.4H  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
  frecpe V18.8H, V4.8H  // FRECPE <Vd>.8H, <Vn>.8H  \\ ASIMD reciprocal and square root estimate, Q-form F16  \\ 2 6  6  1.00 V1UnitV02[4]
  frecpe V29.2S, V3.2S  // FRECPE <Vd>.2S, <Vn>.2S  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
  frecpe V2.4S, V30.4S  // FRECPE <Vd>.4S, <Vn>.4S  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
  frecpe V27.2D, V1.2D  // FRECPE <Vd>.2D, <Vn>.2D  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
  frecpe Z30.H, Z1.H  // FRECPE <Zd>.H, <Zn>.H  \\ Floating point reciprocal estimate, F16  \\ 4 6  6  0.25 V1UnitV0
  frecpe Z5.S, Z28.S  // FRECPE <Zd>.S, <Zn>.S  \\ Floating point reciprocal estimate, F32  \\ 2 4  4  0.50 V1UnitV0
  frecpe Z10.D, Z17.D  // FRECPE <Zd>.D, <Zn>.D  \\ Floating point reciprocal estimate, F64  \\ 1 3  3  1.0 V1UnitV0
  frecps H18, H0, H9  // FRECPS <Hd>, <Hn>, <Hm>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
  frecps D14, D17, D12  // FRECPS <V><d>, <V><n>, <V><m>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
  frecps V20.8H, V9.8H, V7.8H  // FRECPS <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
  frecps V15.4S, V0.4S, V30.4S  // FRECPS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
  frecps Z13.H, Z29.H, Z5.H  // FRECPS <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point reciprocal step  \\ 1 4  4  2.0 V1UnitV01
  frecpx H5, H10  // FRECPX <Hd>, <Hn>  \\ ASIMD reciprocal exponent  \\ 1 3  3  2.0 V1UnitV02
  frecpx S10, S12  // FRECPX <V><d>, <V><n>  \\ ASIMD reciprocal exponent  \\ 1 3  3  2.0 V1UnitV02
  frecpx Z26.S, P2/M, Z29.S  // FRECPX <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Floating point  reciprocal exponent  \\ 1 3  3  1.0 V1UnitV0
  frintn Z1.H, P2/M, Z23.H  // FRINTN <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
  frintn Z26.S, P5/M, Z2.S  // FRINTN <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
  frintn Z11.D, P6/M, Z31.D  // FRINTN <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
  frinta Z6.H, P4/M, Z31.H  // FRINTA <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
  frinta Z21.S, P0/M, Z14.S  // FRINTA <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
  frinta Z9.D, P3/M, Z3.D  // FRINTA <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
  frintm Z5.H, P4/M, Z12.H  // FRINTM <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
  frintm Z30.S, P4/M, Z20.S  // FRINTM <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
  frintm Z14.D, P5/M, Z0.D  // FRINTM <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
  frintp Z25.H, P6/M, Z1.H  // FRINTP <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
  frintp Z26.S, P0/M, Z31.S  // FRINTP <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
  frintp Z11.D, P4/M, Z20.D  // FRINTP <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
  frintz Z19.H, P4/M, Z25.H  // FRINTZ <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
  frintz Z16.S, P1/M, Z9.S  // FRINTZ <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
  frintz Z24.D, P7/M, Z2.D  // FRINTZ <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
  frinti Z26.H, P4/M, Z7.H  // FRINTI <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
  frinti Z2.S, P3/M, Z17.S  // FRINTI <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
  frinti Z19.D, P1/M, Z9.D  // FRINTI <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
  frintx Z17.H, P0/M, Z23.H  // FRINTX <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
  frintx Z10.S, P6/M, Z24.S  // FRINTX <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
  frintx Z1.D, P4/M, Z7.D  // FRINTX <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
  frinta H1, H23  // FRINTA <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frinta S20, S16  // FRINTA <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frinta D16, D19  // FRINTA <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frinta V20.4H, V0.4H  // FRINTA <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frinta V24.8H, V10.8H  // FRINTA <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  frinta V10.2S, V21.2S  // FRINTA <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frinta V28.4S, V10.4S  // FRINTA <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frinta V6.2D, V0.2D  // FRINTA <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frinti H27, H6  // FRINTI <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frinti S3, S0  // FRINTI <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frinti D4, D11  // FRINTI <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frinti V16.4H, V28.4H  // FRINTI <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frinti V19.8H, V14.8H  // FRINTI <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  frinti V9.2S, V22.2S  // FRINTI <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frinti V26.4S, V0.4S  // FRINTI <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frinti V0.2D, V2.2D  // FRINTI <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintm H12, H21  // FRINTM <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintm S31, S20  // FRINTM <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintm D3, D31  // FRINTM <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintm V25.4H, V30.4H  // FRINTM <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintm V0.8H, V9.8H  // FRINTM <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  frintm V9.2S, V9.2S  // FRINTM <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintm V17.4S, V28.4S  // FRINTM <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintm V7.2D, V31.2D  // FRINTM <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintn H18, H24  // FRINTN <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintn S27, S2  // FRINTN <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintn D16, D3  // FRINTN <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintn V12.4H, V21.4H  // FRINTN <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintn V8.8H, V20.8H  // FRINTN <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  frintn V4.2S, V29.2S  // FRINTN <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintn V22.4S, V20.4S  // FRINTN <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintn V29.2D, V24.2D  // FRINTN <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintp H22, H2  // FRINTP <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintp S9, S24  // FRINTP <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintp D5, D24  // FRINTP <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintp V1.4H, V14.4H  // FRINTP <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintp V29.8H, V31.8H  // FRINTP <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  frintp V27.2S, V31.2S  // FRINTP <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintp V13.4S, V19.4S  // FRINTP <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintp V13.2D, V27.2D  // FRINTP <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintx H21, H22  // FRINTX <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintx S28, S28  // FRINTX <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintx D21, D31  // FRINTX <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintx V16.4H, V14.4H  // FRINTX <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintx V0.8H, V17.8H  // FRINTX <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  frintx V13.2S, V11.2S  // FRINTX <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintx V17.4S, V10.4S  // FRINTX <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintx V21.2D, V19.2D  // FRINTX <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintz H26, H22  // FRINTZ <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintz S6, S3  // FRINTZ <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintz D15, D8  // FRINTZ <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
  frintz V15.4H, V6.4H  // FRINTZ <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintz V9.8H, V8.8H  // FRINTZ <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  frintz V15.2S, V9.2S  // FRINTZ <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frintz V29.4S, V23.4S  // FRINTZ <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  frintz V9.2D, V5.2D  // FRINTZ <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  frsqrte H3, H21  // FRSQRTE <Hd>, <Hn>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1 4  4  2.00 V1UnitV02
  frsqrte S29, S23  // FRSQRTE S<d>, S<n>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
  frsqrte D11, D11  // FRSQRTE D<d>, D<n>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
  frsqrte V27.4H, V25.4H  // FRSQRTE <Vd>.4H, <Vn>.4H  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
  frsqrte V0.8H, V7.8H  // FRSQRTE <Vd>.8H, <Vn>.8H  \\ ASIMD reciprocal and square root estimate, Q-form F16  \\ 2 6  6  1.00 V1UnitV02[4]
  frsqrte V10.2S, V22.2S  // FRSQRTE <Vd>.2S, <Vn>.2S  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
  frsqrte V21.4S, V17.4S  // FRSQRTE <Vd>.4S, <Vn>.4S  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
  frsqrte V25.2D, V21.2D  // FRSQRTE <Vd>.2D, <Vn>.2D  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
  frsqrte Z16.H, Z25.H  // FRSQRTE <Zd>.H, <Zn>.H  \\ Floating point reciprocal estimate, F16  \\ 4 6  6  0.25 V1UnitV0
  frsqrte Z0.S, Z28.S  // FRSQRTE <Zd>.S, <Zn>.S  \\ Floating point reciprocal estimate, F32  \\ 2 4  4  0.50 V1UnitV0
  frsqrte Z22.D, Z12.D  // FRSQRTE <Zd>.D, <Zn>.D  \\ Floating point reciprocal estimate, F64  \\ 1 3  3  1.0 V1UnitV0
  frsqrts H11, H7, H2  // FRSQRTS <Hd>, <Hn>, <Hm>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
  frsqrts S6, S21, S15  // FRSQRTS <V><d>, <V><n>, <V><m>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
  frsqrts V9.8H, V8.8H, V15.8H  // FRSQRTS <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
  frsqrts V21.2S, V12.2S, V23.2S  // FRSQRTS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
  frsqrts Z0.D, Z8.D, Z10.D  // FRSQRTS <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point reciprocal step  \\ 1 4  4  2.0 V1UnitV01
  fscale Z19.D, P2/M, Z19.D, Z23.D  // FSCALE <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
  fsqrt H11, H27  // FSQRT <Hd>, <Hn>  \\ FP square root, H-form  \\ 1 7  7  0.29 V1UnitV02[2]
  fsqrt S5, S31  // FSQRT <Sd>, <Sn>  \\ FP square root, S-form  \\ 1 10  10  0.29 V1UnitV02[2]
  fsqrt D25, D24  // FSQRT <Dd>, <Dn>  \\ FP square root, D-form  \\ 1 16  16  0.29 V1UnitV02[8]
  fsqrt V6.4H, V30.4H  // FSQRT <Vd>.4H, <Vn>.4H  \\ ASIMD FP square root, D-form, F16  \\ 1 7  7  0.29 V1UnitV02[7]
  fsqrt V12.8H, V24.8H  // FSQRT <Vd>.8H, <Vn>.8H  \\ ASIMD FP square root, Q-form, F16  \\ 1 13  13  0.18 V1UnitV02[14]
  fsqrt V21.2S, V13.2S  // FSQRT <Vd>.2S, <Vn>.2S  \\ ASIMD FP square root, D-form, F32  \\ 1 10  10  0.29 V1UnitV02[5]
  fsqrt V12.4S, V26.4S  // FSQRT <Vd>.4S, <Vn>.4S  \\ ASIMD FP square root, Q-form, F32  \\ 1 10  10  0.29 V1UnitV02[10]
  fsqrt V28.2D, V30.2D  // FSQRT <Vd>.2D, <Vn>.2D  \\ ASIMD FP square root, Q-form, F64  \\ 1 16  16  0.29 V1UnitV02[16]
  fsqrt Z17.H, P1/M, Z12.H  // FSQRT <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point square root, F16  \\ 1 13  13  0.10 V1UnitV0[13]
  fsqrt Z29.S, P6/M, Z29.S  // FSQRT <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point square root, F32  \\ 1 10  10  0.14 V1UnitV0[10]
  fsqrt Z19.D, P7/M, Z21.D  // FSQRT <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point square root F64  \\ 1 16  16  0.14 V1UnitV0[15]
  fsub Z6.S, P4/M, Z6.S, #0.5  // FSUB <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
  fsub H9, H25, H1  // FSUB <Hd>, <Hn>, <Hm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fsub S4, S15, S6  // FSUB <Sd>, <Sn>, <Sm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fsub D27, D27, D17  // FSUB <Dd>, <Dn>, <Dm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fsub V11.4S, V6.4S, V30.4S  // FSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fsub V6.4S, V0.4S, V1.4S  // FSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
  fsub Z5.D, P3/M, Z5.D, Z2.D  // FSUB <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
  fsub Z5.H, Z0.H, Z8.H  // FSUB <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
  fsubr Z21.S, P3/M, Z21.S, #0.5  // FSUBR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
  fsubr Z18.H, P1/M, Z18.H, Z26.H  // FSUBR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
  ftmad Z4.D, Z4.D, Z23.D, #2  // FTMAD <Zdn>.<T>, <Zdn>.<T>, <Zm>.<T>, #<imm>  \\ Floating point trigonometric   \\ 1 3  3  2.0 V1UnitV01
  ftsmul Z18.S, Z27.S, Z13.S  // FTSMUL <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point trigonometric   \\ 1 3  3  2.0 V1UnitV01
  ftssel Z23.H, Z3.H, Z16.H  // FTSSEL <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point trigonometric   \\ 1 3  3  2.0 V1UnitV01
  hint #1  // HINT #<imm>  \\ No description \\ No scheduling info
  hlt #58895  // HLT #<imm>  \\ No description \\ No scheduling info
  hvc #16892  // HVC #<imm>  \\ No description \\ No scheduling info
  ic IALLUIS // IC <ic_op> \\ No description \\ No scheduling info
  ic IVAU, X30  // IC <ic_op2>, <Xt>  \\ No description \\ No scheduling info
  incb X18  // INCB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  incb X28, VL2  // INCB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  incb X18, VL8, MUL #1  // INCB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  incd X7  // INCD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  incd X1, VL32  // INCD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  incd X6, ALL, MUL #8  // INCD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  inch X29  // INCH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  inch X10, VL256  // INCH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  inch X30, POW2, MUL #8  // INCH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  incw X3  // INCW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  incw X14, VL256  // INCW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  incw X4, VL2, MUL #7  // INCW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  incd Z8.D  // INCD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  incd Z8.D, VL4  // INCD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  incd Z1.D, VL3, MUL #7  // INCD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  inch Z4.H  // INCH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  inch Z14.H, VL2  // INCH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  inch Z13.H, VL2, MUL #11  // INCH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  incw Z28.S  // INCW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  incw Z12.S, VL1  // INCW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  incw Z28.S, VL6, MUL #4  // INCW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  incp X20, P0.D  // INCP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  incp Z2.S, P1.S  // INCP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
  index Z18.B, #15, W28  // INDEX <Zd>.B, #<imm>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
  index Z7.H, #11, W17  // INDEX <Zd>.H, #<imm>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
  index Z29.S, #2, W6  // INDEX <Zd>.S, #<imm>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
  index Z19.D, #-8, X29  // INDEX <Zd>.D, #<imm>, X<m>  \\ Horizontal operations, D form, scalar, imm/ scalar/ imm, scalar  \\ 4 8  8  0.50 V1UnitM0[2],V1UnitV0[2]
  index Z2.B, #2, #1  // INDEX <Zd>.B, #<imm1>, #<imm2>  \\ Horizontal operations, B, H, S form, imm, imm  \\ 1 4  4  1.0 V1UnitV0
  index Z1.H, #10, #0  // INDEX <Zd>.H, #<imm1>, #<imm2>  \\ Horizontal operations, B, H, S form, imm, imm  \\ 1 4  4  1.0 V1UnitV0
  index Z8.S, #8, #2  // INDEX <Zd>.S, #<imm1>, #<imm2>  \\ Horizontal operations, B, H, S form, imm, imm  \\ 1 4  4  1.0 V1UnitV0
  index Z25.D, #8, #0  // INDEX <Zd>.D, #<imm1>, #<imm2>  \\ Horizontal operations, D form, imm, imm  \\ 2 5  5  0.50 V1UnitV0[2]
  index Z31.B, W9, #8  // INDEX <Zd>.B, W<n>, #<imm>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
  index Z22.H, W10, #-8  // INDEX <Zd>.H, W<n>, #<imm>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
  index Z1.S, W13, #14  // INDEX <Zd>.S, W<n>, #<imm>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
  index Z0.D, X0, #10  // INDEX <Zd>.D, X<n>, #<imm>  \\ Horizontal operations, D form, scalar, imm/ scalar/ imm, scalar  \\ 4 8  8  0.50 V1UnitM0[2],V1UnitV0[2]
  index Z14.B, W7, W0  // INDEX <Zd>.B, W<n>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
  index Z22.H, W12, W28  // INDEX <Zd>.H, W<n>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
  index Z12.S, W23, W15  // INDEX <Zd>.S, W<n>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
  index Z5.D, X20, X8  // INDEX <Zd>.D, X<n>, X<m>  \\ Horizontal operations, D form, scalar, imm/ scalar/ imm, scalar  \\ 4 8  8  0.50 V1UnitM0[2],V1UnitV0[2]
  ins V17.B[7], V4.B[4]  // INS <Vd>.B[<index1b>], <Vn>.B[<index2b>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
  ins V10.H[4], V29.H[1]  // INS <Vd>.H[<index1h>], <Vn>.H[<index2h>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
  ins V21.S[1], V24.S[2]  // INS <Vd>.S[<index1s>], <Vn>.S[<index2s>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
  ins V10.D[0], V31.D[1]  // INS <Vd>.D[<index1d>], <Vn>.D[<index2d>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
  ins V29.B[7], W5  // INS <Vd>.B[<indexb>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
  ins V21.H[4], W4  // INS <Vd>.H[<indexh>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
  ins V18.S[2], W14  // INS <Vd>.S[<indexs>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
  ins V18.D[1], X30  // INS <Vd>.D[<indexd>], X<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
  insr Z12.B, B17  // INSR <Zdn>.<T>, <V><m>  \\ Extract/insert operation, SIMD and FP scalar form  \\ 1 3  3  1.0 V1UnitV1
  insr Z20.D, X6  // INSR <Zdn>.<T>, <R><m>  \\ Extract/insert operation, scalar  \\ 2 6  6  1.0 V1UnitV1,V1UnitM0
  isb  // ISB  \\ No description \\ No scheduling info
  isb SY  // ISB <option>  \\ No description \\ No scheduling info
  isb #12  // ISB #<imm>  \\ No description \\ No scheduling info
  lasta D16, P2, Z22.D  // LASTA <V><d>, <Pg>, <Zn>.<T>  \\ Extract/insert operation, SIMD and FP scalar form  \\ 1 3  3  1.0 V1UnitV1
  lasta W0, P6, Z30.B  // LASTA <R><d>, <Pg>, <Zn>.<T>  \\ Extract/insert operation, scalar  \\ 2 6  6  1.0 V1UnitV1,V1UnitM0
  lastb S5, P2, Z13.S  // LASTB <V><d>, <Pg>, <Zn>.<T>  \\ Extract/insert operation, SIMD and FP scalar form  \\ 1 3  3  1.0 V1UnitV1
  lastb W15, P0, Z10.B  // LASTB <R><d>, <Pg>, <Zn>.<T>  \\ Extract/insert operation, scalar  \\ 2 6  6  1.0 V1UnitV1,V1UnitM0
  ld1 { V8.8B }, [X7]  // LD1 { <Vt>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 1 6  6  3.0 V1UnitL
  ld1 { V31.8B }, [X28], #8  // LD1 { <Vt>.8B }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V1.8B }, [X27], X22  // LD1 { <Vt>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V24.16B }, [X2]  // LD1 { <Vt>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 1 6  6  3.0 V1UnitL
  ld1 { V17.16B }, [X6], #16  // LD1 { <Vt>.16B }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V13.16B }, [X14], X20  // LD1 { <Vt>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V23.4H }, [X11]  // LD1 { <Vt>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 1 6  6  3.0 V1UnitL
  ld1 { V24.4H }, [X1], #8  // LD1 { <Vt>.4H }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V20.4H }, [X6], X5  // LD1 { <Vt>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V18.8H }, [X24]  // LD1 { <Vt>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 1 6  6  3.0 V1UnitL
  ld1 { V2.8H }, [X6], #16  // LD1 { <Vt>.8H }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V31.8H }, [X23], X24  // LD1 { <Vt>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V9.2S }, [X28]  // LD1 { <Vt>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 1 6  6  3.0 V1UnitL
  ld1 { V0.2S }, [X11], #8  // LD1 { <Vt>.2S }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V9.2S }, [X7], X18  // LD1 { <Vt>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V4.4S }, [X27]  // LD1 { <Vt>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 1 6  6  3.0 V1UnitL
  ld1 { V16.4S }, [X24], #16  // LD1 { <Vt>.4S }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V18.4S }, [X29], X13  // LD1 { <Vt>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V26.1D }, [X11]  // LD1 { <Vt>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 1 6  6  3.0 V1UnitL
  ld1 { V25.1D }, [X3], #8  // LD1 { <Vt>.1D }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V16.1D }, [X18], X17  // LD1 { <Vt>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V7.2D }, [X15]  // LD1 { <Vt>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 1 6  6  3.0 V1UnitL
  ld1 { V6.2D }, [X9], #16  // LD1 { <Vt>.2D }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V18.2D }, [X1], X9  // LD1 { <Vt>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ld1 { V5.8B, V6.8B }, [X27]  // LD1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V19.8B, V20.8B }, [X22], #16  // LD1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V11.8B, V12.8B }, [X9], X5  // LD1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V13.16B, V14.16B }, [X21]  // LD1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V0.16B, V1.16B }, [X4], #32  // LD1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V5.16B, V6.16B }, [X0], X28  // LD1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V16.4H, V17.4H }, [X18]  // LD1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V11.4H, V12.4H }, [X27], #16  // LD1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V25.4H, V26.4H }, [X26], X10  // LD1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V14.8H, V15.8H }, [X24]  // LD1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V25.8H, V26.8H }, [X10], #32  // LD1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V17.8H, V18.8H }, [X9], X28  // LD1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V9.2S, V10.2S }, [X12]  // LD1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V3.2S, V4.2S }, [X12], #16  // LD1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V23.2S, V24.2S }, [X26], X4  // LD1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V19.4S, V20.4S }, [X8]  // LD1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V8.4S, V9.4S }, [X6], #32  // LD1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V1.4S, V2.4S }, [X28], X1  // LD1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V13.1D, V14.1D }, [X24]  // LD1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V3.1D, V4.1D }, [X12], #16  // LD1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V12.1D, V13.1D }, [X29], X26  // LD1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V24.2D, V25.2D }, [X2]  // LD1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V25.2D, V26.2D }, [X14], #32  // LD1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V10.2D, V11.2D }, [X18], X21  // LD1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V12.8B, V13.8B, V14.8B }, [X23]  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 3 6  6  1.00 V1UnitL[3]
  ld1 { V26.8B, V27.8B, V28.8B }, [X18], #24  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #24  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V3.8B, V4.8B, V5.8B }, [X6], X12  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V23.16B, V24.16B, V25.16B }, [X14]  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 3 6  6  1.00 V1UnitL[3]
  ld1 { V11.16B, V12.16B, V13.16B }, [X14], #48  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #48  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V1.16B, V2.16B, V3.16B }, [X4], X27  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V6.4H, V7.4H, V8.4H }, [X13]  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 3 6  6  1.00 V1UnitL[3]
  ld1 { V12.4H, V13.4H, V14.4H }, [X21], #24  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #24  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V22.4H, V23.4H, V24.4H }, [X15], X30  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V4.8H, V5.8H, V6.8H }, [X28]  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 3 6  6  1.00 V1UnitL[3]
  ld1 { V25.8H, V26.8H, V27.8H }, [X19], #48  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #48  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V13.8H, V14.8H, V15.8H }, [X22], X30  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V5.2S, V6.2S, V7.2S }, [X4]  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 3 6  6  1.00 V1UnitL[3]
  ld1 { V13.2S, V14.2S, V15.2S }, [X10], #24  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #24  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V9.2S, V10.2S, V11.2S }, [X15], X0  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V20.4S, V21.4S, V22.4S }, [X5]  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 3 6  6  1.00 V1UnitL[3]
  ld1 { V11.4S, V12.4S, V13.4S }, [X0], #48  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #48  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V17.4S, V18.4S, V19.4S }, [X5], X6  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V16.1D, V17.1D, V18.1D }, [X17]  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 3 6  6  1.00 V1UnitL[3]
  ld1 { V7.1D, V8.1D, V9.1D }, [X4], #24  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], #24  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V24.1D, V25.1D, V26.1D }, [X8], X26  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V16.2D, V17.2D, V18.2D }, [X6]  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 3 6  6  1.00 V1UnitL[3]
  ld1 { V12.2D, V13.2D, V14.2D }, [X8], #48  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #48  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V10.2D, V11.2D, V12.2D }, [X10], X17  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
  ld1 { V15.8B, V16.8B, V17.8B, V18.8B }, [X23]  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V18.8B, V19.8B, V20.8B, V21.8B }, [X27], #32  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V10.8B, V11.8B, V12.8B, V13.8B }, [X25], X1  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V20.16B, V21.16B, V22.16B, V23.16B }, [X13]  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 4 7  7  0.75 V1UnitL[4]
  ld1 { V18.16B, V19.16B, V20.16B, V21.16B }, [X5], #64  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #64  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
  ld1 { V9.16B, V10.16B, V11.16B, V12.16B }, [X1], X30  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
  ld1 { V11.4H, V12.4H, V13.4H, V14.4H }, [X22]  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V13.4H, V14.4H, V15.4H, V16.4H }, [X9], #32  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V0.4H, V1.4H, V2.4H, V3.4H }, [X6], X7  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V15.8H, V16.8H, V17.8H, V18.8H }, [X11]  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 4 7  7  0.75 V1UnitL[4]
  ld1 { V16.8H, V17.8H, V18.8H, V19.8H }, [X5], #64  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #64  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
  ld1 { V0.8H, V1.8H, V2.8H, V3.8H }, [X29], X27  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
  ld1 { V27.2S, V28.2S, V29.2S, V30.2S }, [X23]  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V4.2S, V5.2S, V6.2S, V7.2S }, [X24], #32  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V25.2S, V26.2S, V27.2S, V28.2S }, [X28], X2  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V23.4S, V24.4S, V25.4S, V26.4S }, [X10]  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 4 7  7  0.75 V1UnitL[4]
  ld1 { V15.4S, V16.4S, V17.4S, V18.4S }, [X23], #64  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #64  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
  ld1 { V17.4S, V18.4S, V19.4S, V20.4S }, [X30], X2  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
  ld1 { V20.1D, V21.1D, V22.1D, V23.1D }, [X13]  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
  ld1 { V18.1D, V19.1D, V20.1D, V21.1D }, [X14], #32  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V12.1D, V13.1D, V14.1D, V15.1D }, [X1], X28  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ld1 { V17.2D, V18.2D, V19.2D, V20.2D }, [X10]  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 4 7  7  0.75 V1UnitL[4]
  ld1 { V16.2D, V17.2D, V18.2D, V19.2D }, [X13], #64  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #64  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
  ld1 { V15.2D, V16.2D, V17.2D, V18.2D }, [X21], X9  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
  ld1 { V27.B }[5], [X10]  // LD1 { <Vt>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1 { V11.H }[0], [X16]  // LD1 { <Vt>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1 { V0.S }[0], [X30]  // LD1 { <Vt>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1 { V30.D }[0], [X28]  // LD1 { <Vt>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD load, 1 element, one lane, D  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1 { V25.B }[2], [X29], #1  // LD1 { <Vt>.B }[<indexb>], [<Xn|SP>], #1  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1 { V28.B }[9], [X21], X30  // LD1 { <Vt>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1 { V9.H }[1], [X8], #2  // LD1 { <Vt>.H }[<indexh>], [<Xn|SP>], #2  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1 { V1.H }[7], [X26], X30  // LD1 { <Vt>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1 { V30.S }[0], [X26], #4  // LD1 { <Vt>.S }[<indexs>], [<Xn|SP>], #4  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1 { V6.S }[0], [X12], X18  // LD1 { <Vt>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1 { V14.D }[1], [X3], #8  // LD1 { <Vt>.D }[<indexd>], [<Xn|SP>], #8  \\ ASIMD load, 1 element, one lane, D  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1 { V19.D }[0], [X24], X28  // LD1 { <Vt>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, one lane, D  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1b { Z4.B }, P5/Z, [X22]  // LD1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z3.B }, P4/Z, [X18, #-3, MUL VL]  // LD1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z12.H }, P2/Z, [X8]  // LD1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z1.H }, P7/Z, [X9, #-4, MUL VL]  // LD1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z28.S }, P3/Z, [X21]  // LD1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z17.S }, P4/Z, [X0, #7, MUL VL]  // LD1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z5.D }, P7/Z, [X27]  // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z21.D }, P1/Z, [X13, #-4, MUL VL]  // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z19.B }, P3/Z, [X17, X4]  // LD1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z14.H }, P0/Z, [X0, X2]  // LD1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z20.S }, P5/Z, [X25, X21]  // LD1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z3.D }, P2/Z, [X3, X11]  // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1b { Z26.D }, P7/Z, [X24, Z11.D, UXTW]  // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1b { Z0.S }, P0/Z, [X23, Z7.S, UXTW]  // LD1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ld1b { Z0.D }, P0/Z, [X22, Z16.D]  // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1b { Z12.S }, P6/Z, [Z29.S, #10]  // LD1B { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ld1b { Z0.D }, P1/Z, [Z28.D, #4]  // LD1B { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1d { Z31.D }, P4/Z, [X1, Z11.D, UXTW #3]  // LD1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #3]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1d { Z16.D }, P4/Z, [X12, Z17.D, SXTW]  // LD1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1d { Z12.D }, P3/Z, [X1, Z4.D, LSL #3]  // LD1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #3]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1d { Z0.D }, P3/Z, [X2, Z30.D]  // LD1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1d { Z3.D }, P6/Z, [Z2.D]  // LD1D { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1d { Z23.D }, P3/Z, [Z29.D, #248]  // LD1D { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1h { Z24.H }, P7/Z, [X14]  // LD1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
  ld1h { Z7.H }, P7/Z, [X28, #6, MUL VL]  // LD1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
  ld1h { Z28.S }, P0/Z, [X10]  // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
  ld1h { Z20.S }, P7/Z, [X7, #1, MUL VL]  // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
  ld1h { Z0.D }, P4/Z, [X3]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
  ld1h { Z3.D }, P0/Z, [X8, #3, MUL VL]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
  ld1h { Z22.H }, P4/Z, [X19, X7, LSL #1]  // LD1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ld1h { Z3.S }, P3/Z, [X24, X21, LSL #1]  // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ld1h { Z27.D }, P2/Z, [X13, X16, LSL #1]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ld1h { Z8.S }, P3/Z, [X9, Z12.S, UXTW #1]  // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
  ld1h { Z5.D }, P3/Z, [X1, Z14.D, UXTW #1]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1h { Z9.D }, P6/Z, [X28, Z15.D, SXTW]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1h { Z28.S }, P4/Z, [X24, Z7.S, SXTW]  // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ld1h { Z24.D }, P4/Z, [X14, Z22.D, LSL #1]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1h { Z12.D }, P5/Z, [X21, Z27.D]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1h { Z13.S }, P1/Z, [Z10.S]  // LD1H { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ld1h { Z9.S }, P4/Z, [Z11.S, #30]  // LD1H { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ld1h { Z19.D }, P4/Z, [Z22.D]  // LD1H { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1h { Z27.D }, P4/Z, [Z21.D, #52]  // LD1H { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1r { V0.8B }, [X1]  // LD1R { <Vt>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1r { V7.8B }, [X25], #1  // LD1R { <Vt>.8B }, [<Xn|SP>], #1  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V14.8B }, [X21], X12  // LD1R { <Vt>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V25.16B }, [X20]  // LD1R { <Vt>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1r { V5.16B }, [X10], #1  // LD1R { <Vt>.16B }, [<Xn|SP>], #1  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V2.16B }, [X6], X22  // LD1R { <Vt>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V23.4H }, [X25]  // LD1R { <Vt>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1r { V30.4H }, [X10], #2  // LD1R { <Vt>.4H }, [<Xn|SP>], #2  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V22.4H }, [X8], X3  // LD1R { <Vt>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V24.8H }, [X10]  // LD1R { <Vt>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1r { V14.8H }, [X27], #2  // LD1R { <Vt>.8H }, [<Xn|SP>], #2  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V27.8H }, [X6], X7  // LD1R { <Vt>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V29.2S }, [X20]  // LD1R { <Vt>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1r { V13.2S }, [X29], #4  // LD1R { <Vt>.2S }, [<Xn|SP>], #4  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V30.2S }, [X28], X12  // LD1R { <Vt>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V0.4S }, [X25]  // LD1R { <Vt>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1r { V29.4S }, [X11], #4  // LD1R { <Vt>.4S }, [<Xn|SP>], #4  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V13.4S }, [X27], X4  // LD1R { <Vt>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V7.1D }, [X23]  // LD1R { <Vt>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, D-form, D  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1r { V31.1D }, [X8], #8  // LD1R { <Vt>.1D }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, all lanes, D-form, D  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V22.1D }, [X16], X23  // LD1R { <Vt>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, D-form, D  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V29.2D }, [X10]  // LD1R { <Vt>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 2 8  8  3.0 V1UnitL,V1UnitV
  ld1r { V5.2D }, [X20], #8  // LD1R { <Vt>.2D }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1r { V29.2D }, [X24], X13  // LD1R { <Vt>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
  ld1rb { Z1.B }, P3/Z, [X0]  // LD1RB { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rb { Z10.B }, P7/Z, [X22, #45]  // LD1RB { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rb { Z31.H }, P7/Z, [X19]  // LD1RB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rb { Z15.H }, P4/Z, [X12, #29]  // LD1RB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rb { Z0.S }, P7/Z, [X29]  // LD1RB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rb { Z19.S }, P3/Z, [X8, #23]  // LD1RB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rb { Z8.D }, P2/Z, [X18]  // LD1RB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rb { Z21.D }, P4/Z, [X12, #12]  // LD1RB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rd { Z1.D }, P2/Z, [X27]  // LD1RD { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rd { Z19.D }, P6/Z, [X29, #320]  // LD1RD { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rh { Z13.H }, P4/Z, [X23]  // LD1RH { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rh { Z6.H }, P0/Z, [X26, #10]  // LD1RH { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rh { Z0.S }, P7/Z, [X16]  // LD1RH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rh { Z4.S }, P2/Z, [X24, #28]  // LD1RH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rh { Z6.D }, P7/Z, [X6]  // LD1RH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rh { Z28.D }, P0/Z, [X25, #68]  // LD1RH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rqb { Z27.B }, P3/Z, [X16]  // LD1RQB { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rqb { Z24.B }, P1/Z, [X15, #-128]  // LD1RQB { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rqb { Z1.B }, P3/Z, [X13, X17]  // LD1RQB { <Zt>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load broadcast, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1rqd { Z4.D }, P4/Z, [X4]  // LD1RQD { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rqd { Z27.D }, P5/Z, [X1, #32]  // LD1RQD { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rqd { Z21.D }, P5/Z, [X11, X24, LSL #3]  // LD1RQD { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous load broadcast, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1rqh { Z26.H }, P4/Z, [X13]  // LD1RQH { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rqh { Z30.H }, P1/Z, [X3, #64]  // LD1RQH { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rqh { Z16.H }, P6/Z, [X4, X9, LSL #1]  // LD1RQH { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load broadcast, scalar + scalar + S \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ld1rqw { Z30.S }, P0/Z, [X10]  // LD1RQW { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rqw { Z3.S }, P7/Z, [X1, #-16]  // LD1RQW { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rqw { Z5.S }, P1/Z, [X24, X21, LSL #2]  // LD1RQW { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous load broadcast, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1rsb { Z12.H }, P7/Z, [X13]  // LD1RSB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsb { Z13.H }, P1/Z, [X26, #51]  // LD1RSB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsb { Z13.S }, P3/Z, [X9]  // LD1RSB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsb { Z24.S }, P5/Z, [X8, #45]  // LD1RSB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsb { Z6.D }, P5/Z, [X10]  // LD1RSB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsb { Z13.D }, P5/Z, [X9, #17]  // LD1RSB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsh { Z1.S }, P4/Z, [X4]  // LD1RSH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsh { Z4.S }, P4/Z, [X14, #18]  // LD1RSH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsh { Z11.D }, P4/Z, [X4]  // LD1RSH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsh { Z10.D }, P0/Z, [X3, #8]  // LD1RSH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsw { Z0.D }, P1/Z, [X5]  // LD1RSW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rsw { Z22.D }, P0/Z, [X17, #196]  // LD1RSW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rw { Z2.S }, P3/Z, [X25]  // LD1RW { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rw { Z26.S }, P1/Z, [X9, #16]  // LD1RW { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rw { Z4.D }, P0/Z, [X15]  // LD1RW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1rw { Z16.D }, P7/Z, [X21, #40]  // LD1RW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z19.H }, P5/Z, [X8]  // LD1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z1.H }, P7/Z, [X15, #4, MUL VL]  // LD1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z19.S }, P4/Z, [X5]  // LD1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z25.S }, P0/Z, [X12, #6, MUL VL]  // LD1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z15.D }, P0/Z, [X16]  // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z15.D }, P7/Z, [X23, #6, MUL VL]  // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z2.H }, P4/Z, [X2, X19]  // LD1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z24.S }, P4/Z, [X0, X9]  // LD1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z20.D }, P5/Z, [X8, X12]  // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1sb { Z15.D }, P2/Z, [X20, Z25.D, UXTW]  // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1sb { Z25.S }, P1/Z, [X3, Z11.S, UXTW]  // LD1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ld1sb { Z2.D }, P7/Z, [X24, Z4.D]  // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1sb { Z31.S }, P6/Z, [Z5.S, #21]  // LD1SB { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ld1sb { Z15.D }, P6/Z, [Z22.D, #1]  // LD1SB { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1sh { Z0.S }, P7/Z, [X26]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sh { Z19.S }, P3/Z, [X1, #-5, MUL VL]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sh { Z2.D }, P4/Z, [X30]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sh { Z14.D }, P5/Z, [X11, #1, MUL VL]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sh { Z10.S }, P2/Z, [X8, X9, LSL #1]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ld1sh { Z17.D }, P6/Z, [X3, X16, LSL #1]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ld1sh { Z12.S }, P6/Z, [X25, Z18.S, UXTW #1]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
  ld1sh { Z21.D }, P2/Z, [X5, Z20.D, SXTW #1]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1sh { Z14.D }, P4/Z, [X9, Z23.D, SXTW]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1sh { Z20.S }, P3/Z, [X23, Z3.S, SXTW]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ld1sh { Z19.D }, P0/Z, [X11, Z31.D, LSL #1]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1sh { Z31.D }, P1/Z, [X1, Z12.D]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1sh { Z18.S }, P2/Z, [Z30.S, #54]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ld1sh { Z14.D }, P4/Z, [Z4.D, #14]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1sw { Z10.D }, P0/Z, [X18]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sw { Z20.D }, P1/Z, [X8, #5, MUL VL]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ld1sw { Z26.D }, P5/Z, [X27, X25, LSL #2]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
  ld1sw { Z7.D }, P4/Z, [X9, Z20.D, UXTW #2]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1sw { Z5.D }, P4/Z, [X28, Z12.D, SXTW]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1sw { Z8.D }, P7/Z, [X4, Z6.D, LSL #2]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1sw { Z27.D }, P5/Z, [X30, Z14.D]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1sw { Z20.D }, P2/Z, [Z30.D]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1sw { Z14.D }, P2/Z, [Z17.D, #112]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1w { Z6.S }, P0/Z, [X26, Z11.S, SXTW #2]  // LD1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
  ld1w { Z31.D }, P1/Z, [X3, Z22.D, UXTW #2]  // LD1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1w { Z24.D }, P6/Z, [X25, Z17.D, SXTW]  // LD1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1w { Z5.S }, P3/Z, [X0, Z16.S, UXTW]  // LD1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ld1w { Z18.D }, P4/Z, [X25, Z2.D, LSL #2]  // LD1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ld1w { Z29.D }, P3/Z, [X15, Z11.D]  // LD1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1w { Z7.S }, P0/Z, [Z8.S]  // LD1W { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ld1w { Z29.S }, P3/Z, [Z2.S]  // LD1W { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ld1w { Z17.D }, P6/Z, [Z3.D]  // LD1W { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld1w { Z4.D }, P0/Z, [Z8.D, #76]  // LD1W { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ld2 { V27.8B, V28.8B }, [X4]  // LD2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL,V1UnitV
  ld2 { V16.8B, V17.8B }, [X17], #16  // LD2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
  ld2 { V2.8B, V3.8B }, [X29], X0  // LD2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
  ld2 { V18.16B, V19.16B }, [X18]  // LD2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 4 8  8  1.50 V1UnitL[2],V1UnitV[2]
  ld2 { V0.16B, V1.16B }, [X8], #32  // LD2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #32  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V26.16B, V27.16B }, [X26], X28  // LD2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V15.4H, V16.4H }, [X5]  // LD2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL,V1UnitV
  ld2 { V20.4H, V21.4H }, [X14], #16  // LD2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
  ld2 { V1.4H, V2.4H }, [X21], X27  // LD2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
  ld2 { V12.8H, V13.8H }, [X29]  // LD2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 4 8  8  1.50 V1UnitL[2],V1UnitV[2]
  ld2 { V17.8H, V18.8H }, [X10], #32  // LD2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #32  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V19.8H, V20.8H }, [X18], X21  // LD2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V0.2S, V1.2S }, [X22]  // LD2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL,V1UnitV
  ld2 { V11.2S, V12.2S }, [X21], #16  // LD2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
  ld2 { V3.2S, V4.2S }, [X22], X27  // LD2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
  ld2 { V2.4S, V3.4S }, [X13]  // LD2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 4 8  8  1.50 V1UnitL[2],V1UnitV[2]
  ld2 { V12.4S, V13.4S }, [X20], #32  // LD2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #32  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V16.4S, V17.4S }, [X16], X20  // LD2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V11.2D, V12.2D }, [X11]  // LD2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, Q-form, D  \\ 4 8  8  1.50 V1UnitL[2],V1UnitV[2]
  ld2 { V25.2D, V26.2D }, [X14], #32  // LD2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #32  \\ ASIMD load, 2 element, multiple, Q-form, D  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V28.2D, V29.2D }, [X19], X10  // LD2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, Q-form, D  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V23.B, V24.B }[3], [X26]  // LD2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD load, 2 element, one lane, B/H  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2 { V10.H, V11.H }[5], [X14]  // LD2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD load, 2 element, one lane, B/H  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2 { V10.S, V11.S }[1], [X17]  // LD2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD load, 2 element, one lane, S  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2 { V15.D, V16.D }[1], [X29]  // LD2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD load, 2 element, one lane, D  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2 { V6.B, V7.B }[8], [X7], #2  // LD2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>], #2  \\ ASIMD load, 2 element, one lane, B/H  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V21.B, V22.B }[0], [X9], X5  // LD2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, one lane, B/H  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V6.H, V7.H }[2], [X29], #4  // LD2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>], #4  \\ ASIMD load, 2 element, one lane, B/H  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V4.H, V5.H }[2], [X23], X8  // LD2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, one lane, B/H  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V17.S, V18.S }[3], [X19], #8  // LD2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>], #8  \\ ASIMD load, 2 element, one lane, S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V3.S, V4.S }[0], [X7], X11  // LD2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, one lane, S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V20.D, V21.D }[1], [X5], #16  // LD2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>], #16  \\ ASIMD load, 2 element, one lane, D  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2 { V11.D, V12.D }[0], [X26], X24  // LD2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, one lane, D  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2b { Z9.B, Z10.B }, P1/Z, [X6]  // LD2B { <Zt1>.B, <Zt2>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2b { Z1.B, Z2.B }, P6/Z, [X7, #4, MUL VL]  // LD2B { <Zt1>.B, <Zt2>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2b { Z23.B, Z24.B }, P0/Z, [X21, X24]  // LD2B { <Zt1>.B, <Zt2>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous Load two structures to two vectors, scalar + scalar  \\ 4 9  9  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2d { Z21.D, Z22.D }, P5/Z, [X12]  // LD2D { <Zt1>.D, <Zt2>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2d { Z29.D, Z30.D }, P4/Z, [X27, #2, MUL VL]  // LD2D { <Zt1>.D, <Zt2>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2d { Z4.D, Z5.D }, P4/Z, [X9, X2, LSL #3]  // LD2D { <Zt1>.D, <Zt2>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous Load two structures to two vectors, scalar + scalar  \\ 4 9  9  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2h { Z23.H, Z24.H }, P0/Z, [X20]  // LD2H { <Zt1>.H, <Zt2>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2h { Z16.H, Z17.H }, P3/Z, [X26, #12, MUL VL]  // LD2H { <Zt1>.H, <Zt2>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2h { Z30.H, Z31.H }, P1/Z, [X29, X8, LSL #1]  // LD2H { <Zt1>.H, <Zt2>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous Load two structures to two vectors, scalar + scalar  \\ 4 10  10  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitS[2]
  ld2r { V10.8B, V11.8B }, [X10]  // LD2R { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2r { V25.8B, V26.8B }, [X27], #2  // LD2R { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #2  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V8.8B, V9.8B }, [X25], X16  // LD2R { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V8.16B, V9.16B }, [X19]  // LD2R { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2r { V11.16B, V12.16B }, [X12], #2  // LD2R { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #2  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V15.16B, V16.16B }, [X1], X17  // LD2R { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V19.4H, V20.4H }, [X25]  // LD2R { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2r { V10.4H, V11.4H }, [X20], #4  // LD2R { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #4  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V6.4H, V7.4H }, [X27], X12  // LD2R { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V4.8H, V5.8H }, [X10]  // LD2R { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2r { V26.8H, V27.8H }, [X28], #4  // LD2R { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #4  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V10.8H, V11.8H }, [X9], X30  // LD2R { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V21.2S, V22.2S }, [X15]  // LD2R { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2r { V14.2S, V15.2S }, [X15], #8  // LD2R { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #8  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V9.2S, V10.2S }, [X29], X5  // LD2R { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V25.4S, V26.4S }, [X13]  // LD2R { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2r { V20.4S, V21.4S }, [X6], #8  // LD2R { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #8  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V11.4S, V12.4S }, [X4], X2  // LD2R { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V13.1D, V14.1D }, [X11]  // LD2R { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, D-form, D  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2r { V22.1D, V23.1D }, [X27], #16  // LD2R { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, all lanes, D-form, D  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V14.1D, V15.1D }, [X30], X25  // LD2R { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, D-form, D  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V13.2D, V14.2D }, [X12]  // LD2R { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
  ld2r { V7.2D, V8.2D }, [X11], #16  // LD2R { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2r { V10.2D, V11.2D }, [X5], X25  // LD2R { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
  ld2w { Z14.S, Z15.S }, P5/Z, [X11]  // LD2W { <Zt1>.S, <Zt2>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2w { Z11.S, Z12.S }, P0/Z, [X3, #-4, MUL VL]  // LD2W { <Zt1>.S, <Zt2>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
  ld2w { Z2.S, Z3.S }, P3/Z, [X11, X3, LSL #2]  // LD2W { <Zt1>.S, <Zt2>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous Load two structures to two vectors, scalar + scalar  \\ 4 9  9  1.00 V1UnitV01[2],V1UnitL01[2]
  ld3 { V7.8B, V8.8B, V9.8B }, [X26]  // LD3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3 { V2.8B, V3.8B, V4.8B }, [X2], #24  // LD3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V12.8B, V13.8B, V14.8B }, [X1], X29  // LD3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V6.16B, V7.16B, V8.16B }, [X5]  // LD3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 6 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld3 { V15.16B, V16.16B, V17.16B }, [X19], #48  // LD3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #48  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V17.16B, V18.16B, V19.16B }, [X13], X7  // LD3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V16.4H, V17.4H, V18.4H }, [X17]  // LD3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3 { V16.4H, V17.4H, V18.4H }, [X4], #24  // LD3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V18.4H, V19.4H, V20.4H }, [X28], X0  // LD3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V24.8H, V25.8H, V26.8H }, [X24]  // LD3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 6 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld3 { V18.8H, V19.8H, V20.8H }, [X2], #48  // LD3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #48  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V26.8H, V27.8H, V28.8H }, [X20], X6  // LD3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V14.2S, V15.2S, V16.2S }, [X2]  // LD3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3 { V26.2S, V27.2S, V28.2S }, [X19], #24  // LD3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V23.2S, V24.2S, V25.2S }, [X27], X22  // LD3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V20.4S, V21.4S, V22.4S }, [X4]  // LD3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 6 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld3 { V24.4S, V25.4S, V26.4S }, [X21], #48  // LD3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #48  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V11.4S, V12.4S, V13.4S }, [X5], X8  // LD3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V11.2D, V12.2D, V13.2D }, [X11]  // LD3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, Q-form, D  \\ 6 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld3 { V12.2D, V13.2D, V14.2D }, [X17], #48  // LD3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #48  \\ ASIMD load, 3 element, multiple, Q-form, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V2.2D, V3.2D, V4.2D }, [X11], X0  // LD3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, Q-form, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V7.B, V8.B, V9.B }[3], [X23]  // LD3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD load, 3 element, one lane, B/H  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3 { V9.H, V10.H, V11.H }[6], [X15]  // LD3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD load, 3 element, one lane, B/H  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3 { V17.S, V18.S, V19.S }[0], [X0]  // LD3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD load, 3 element, one lane, S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3 { V25.D, V26.D, V27.D }[0], [X14]  // LD3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD load, 3 element, one lane, D  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3 { V21.B, V22.B, V23.B }[6], [X7], #3  // LD3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>], #3  \\ ASIMD load, 3 element, one lane, B/H  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V8.B, V9.B, V10.B }[15], [X9], X23  // LD3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, one lane, B/H  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V12.H, V13.H, V14.H }[0], [X17], #6  // LD3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>], #6  \\ ASIMD load, 3 element, one lane, B/H  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V25.H, V26.H, V27.H }[7], [X24], X30  // LD3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, one lane, B/H  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V13.S, V14.S, V15.S }[0], [X16], #12  // LD3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>], #12  \\ ASIMD load, 3 element, one lane, S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V7.S, V8.S, V9.S }[1], [X5], X28  // LD3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, one lane, S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V16.D, V17.D, V18.D }[1], [X1], #24  // LD3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>], #24  \\ ASIMD load, 3 element, one lane, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3 { V28.D, V29.D, V30.D }[0], [X30], X20  // LD3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, one lane, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3b { Z23.B - Z25.B }, P7/Z, [X16]  // LD3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
  ld3b { Z11.B - Z13.B }, P4/Z, [X8, #12, MUL VL]  // LD3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
  ld3b { Z26.B - Z28.B }, P7/Z, [X10, X17]  // LD3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous Load three structures to three vectors, scalar + scalar  \\ 7 8  8  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitS[7]
  ld3d { Z26.D - Z28.D }, P4/Z, [X16]  // LD3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
  ld3d { Z21.D - Z23.D }, P1/Z, [X7, #-18, MUL VL]  // LD3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
  ld3d { Z24.D - Z26.D }, P4/Z, [X29, X9, LSL #3]  // LD3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous Load three structures to three vectors, scalar + scalar  \\ 7 8  8  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitS[7]
  ld3h { Z26.H - Z28.H }, P2/Z, [X15]  // LD3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
  ld3h { Z14.H - Z16.H }, P0/Z, [X24, #-6, MUL VL]  // LD3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
  ld3h { Z6.H - Z8.H }, P2/Z, [X10, X5, LSL #1]  // LD3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous Load three structures to three vectors, scalar + scalar  \\ 7 8  8  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitS[7]
  ld3r { V1.8B - V3.8B }, [X23]  // LD3R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3r { V21.8B - V23.8B }, [X21], #3  // LD3R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #3  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V12.8B - V14.8B }, [X14], X7  // LD3R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V15.16B - V17.16B }, [X28]  // LD3R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3r { V28.16B - V30.16B }, [X14], #3  // LD3R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #3  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V15.16B - V17.16B }, [X24], X8  // LD3R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V17.4H - V19.4H }, [X6]  // LD3R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3r { V12.4H - V14.4H }, [X24], #6  // LD3R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #6  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V12.4H - V14.4H }, [X19], X13  // LD3R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V28.8H - V30.8H }, [X0]  // LD3R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3r { V15.8H - V17.8H }, [X13], #6  // LD3R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #6  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V4.8H - V6.8H }, [X15], X7  // LD3R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V19.2S - V21.2S }, [X23]  // LD3R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3r { V0.2S - V2.2S }, [X13], #12  // LD3R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #12  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V13.2S - V15.2S }, [X7], X15  // LD3R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V5.4S - V7.4S }, [X30]  // LD3R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3r { V19.4S - V21.4S }, [X2], #12  // LD3R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #12  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V5.4S - V7.4S }, [X17], X1  // LD3R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V1.1D - V3.1D }, [X11]  // LD3R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, D-form, D  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3r { V7.1D - V9.1D }, [X3], #24  // LD3R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, all lanes, D-form, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V13.1D - V15.1D }, [X8], X14  // LD3R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, D-form, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V15.2D - V17.2D }, [X3]  // LD3R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, Q-form, D  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
  ld3r { V16.2D - V18.2D }, [X17], #24  // LD3R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, all lanes, Q-form, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3r { V27.2D - V29.2D }, [X5], X17  // LD3R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, Q-form, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
  ld3w { Z6.S - Z8.S }, P0/Z, [X21]  // LD3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
  ld3w { Z15.S - Z17.S }, P4/Z, [X29, #21, MUL VL]  // LD3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
  ld3w { Z28.S - Z30.S }, P0/Z, [X24, X14, LSL #2]  // LD3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous Load three structures to three vectors, scalar + scalar  \\ 7 8  8  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitS[7]
  ld4 { V15.8B, V16.8B, V17.8B, V18.8B }, [X9]  // LD4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4 { V13.8B, V14.8B, V15.8B, V16.8B }, [X11], #32  // LD4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V13.8B, V14.8B, V15.8B, V16.8B }, [X6], X28  // LD4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V21.16B, V22.16B, V23.16B, V24.16B }, [X29]  // LD4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 8 9  9  0.75 V1UnitL[6],V1UnitV[6]
  ld4 { V23.16B, V24.16B, V25.16B, V26.16B }, [X25], #64  // LD4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #64  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
  ld4 { V24.16B, V25.16B, V26.16B, V27.16B }, [X21], X8  // LD4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
  ld4 { V4.4H, V5.4H, V6.4H, V7.4H }, [X11]  // LD4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4 { V20.4H, V21.4H, V22.4H, V23.4H }, [X11], #32  // LD4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V3.4H, V4.4H, V5.4H, V6.4H }, [X27], X4  // LD4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V18.8H, V19.8H, V20.8H, V21.8H }, [X6]  // LD4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 8 9  9  0.75 V1UnitL[6],V1UnitV[6]
  ld4 { V12.8H, V13.8H, V14.8H, V15.8H }, [X30], #64  // LD4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #64  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
  ld4 { V3.8H, V4.8H, V5.8H, V6.8H }, [X25], X11  // LD4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
  ld4 { V12.2S, V13.2S, V14.2S, V15.2S }, [X9]  // LD4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4 { V26.2S, V27.2S, V28.2S, V29.2S }, [X0], #32  // LD4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V1.2S, V2.2S, V3.2S, V4.2S }, [X25], X10  // LD4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V22.4S, V23.4S, V24.4S, V25.4S }, [X28]  // LD4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 8 9  9  0.75 V1UnitL[6],V1UnitV[6]
  ld4 { V5.4S, V6.4S, V7.4S, V8.4S }, [X23], #64  // LD4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #64  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
  ld4 { V7.4S, V8.4S, V9.4S, V10.4S }, [X22], X19  // LD4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
  ld4 { V2.2D, V3.2D, V4.2D, V5.2D }, [X13]  // LD4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, Q-form, D  \\ 8 9  9  0.75 V1UnitL[6],V1UnitV[6]
  ld4 { V8.2D, V9.2D, V10.2D, V11.2D }, [X11], #64  // LD4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #64  \\ ASIMD load, 4 element, multiple, Q-form, D  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
  ld4 { V8.2D, V9.2D, V10.2D, V11.2D }, [X19], X4  // LD4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, Q-form, D  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
  ld4 { V8.B, V9.B, V10.B, V11.B }[7], [X0]  // LD4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD load, 4 element, one lane, B/H  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4 { V9.H, V10.H, V11.H, V12.H }[2], [X23]  // LD4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD load, 4 element, one lane, B/H  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4 { V13.S, V14.S, V15.S, V16.S }[0], [X3]  // LD4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD load, 4 element, one lane, S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4 { V18.D, V19.D, V20.D, V21.D }[0], [X29]  // LD4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD load, 4 element, one lane, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4 { V14.B, V15.B, V16.B, V17.B }[4], [X26], #4  // LD4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>], #4  \\ ASIMD load, 4 element, one lane, B/H  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V13.B, V14.B, V15.B, V16.B }[12], [X4], X9  // LD4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, one lane, B/H  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V20.H, V21.H, V22.H, V23.H }[4], [X4], #8  // LD4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>], #8  \\ ASIMD load, 4 element, one lane, B/H  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V18.H, V19.H, V20.H, V21.H }[5], [X16], X10  // LD4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, one lane, B/H  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V16.S, V17.S, V18.S, V19.S }[2], [X13], #16  // LD4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>], #16  \\ ASIMD load, 4 element, one lane, S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V4.S, V5.S, V6.S, V7.S }[3], [X4], X20  // LD4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, one lane, S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V2.D, V3.D, V4.D, V5.D }[0], [X6], #32  // LD4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>], #32  \\ ASIMD load, 4 element, one lane, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4 { V11.D, V12.D, V13.D, V14.D }[0], [X21], X30  // LD4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, one lane, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4b { Z13.B - Z16.B }, P2/Z, [X13]  // LD4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
  ld4b { Z23.B - Z26.B }, P1/Z, [X2, #-8, MUL VL]  // LD4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
  ld4b { Z22.B - Z25.B }, P1/Z, [X17, X1]  // LD4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous Load four structures to four vectors, scalar + scalar  \\ 10 13  13  0.50 V1UnitL01[8],V1UnitV01[8],V1UnitS[8]
  ld4d { Z25.D - Z28.D }, P5/Z, [X26]  // LD4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
  ld4d { Z1.D - Z4.D }, P0/Z, [X0, #-32, MUL VL]  // LD4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
  ld4d { Z10.D - Z13.D }, P0/Z, [X24, X18, LSL #3]  // LD4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous Load four structures to four vectors, scalar + scalar  \\ 10 13  13  0.50 V1UnitL01[8],V1UnitV01[8],V1UnitS[8]
  ld4h { Z17.H - Z20.H }, P7/Z, [X29]  // LD4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
  ld4h { Z20.H - Z23.H }, P2/Z, [X14, #-24, MUL VL]  // LD4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
  ld4h { Z3.H - Z6.H }, P2/Z, [X28, X2, LSL #1]  // LD4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous Load four structures to four vectors, scalar + scalar  \\ 10 13  13  0.50 V1UnitL01[8],V1UnitV01[8],V1UnitS[8]
  ld4r { V9.8B - V12.8B }, [X22]  // LD4R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4r { V9.8B - V12.8B }, [X6], #4  // LD4R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #4  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V12.8B - V15.8B }, [X13], X16  // LD4R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V19.16B - V22.16B }, [X2]  // LD4R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4r { V22.16B - V25.16B }, [X5], #4  // LD4R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #4  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V0.16B - V3.16B }, [X15], X2  // LD4R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V18.4H - V21.4H }, [X14]  // LD4R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4r { V17.4H - V20.4H }, [X0], #8  // LD4R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #8  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V21.4H - V24.4H }, [X7], X19  // LD4R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V6.8H - V9.8H }, [X0]  // LD4R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4r { V9.8H - V12.8H }, [X22], #8  // LD4R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #8  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V2.8H - V5.8H }, [X8], X15  // LD4R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V14.2S - V17.2S }, [X26]  // LD4R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4r { V13.2S - V16.2S }, [X7], #16  // LD4R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #16  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V21.2S - V24.2S }, [X27], X16  // LD4R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V16.4S - V19.4S }, [X29]  // LD4R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4r { V8.4S - V11.4S }, [X16], #16  // LD4R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #16  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V5.4S - V8.4S }, [X20], X24  // LD4R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V16.1D - V19.1D }, [X16]  // LD4R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, D-form, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4r { V21.1D - V24.1D }, [X0], #32  // LD4R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, all lanes, D-form, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V18.1D - V21.1D }, [X19], X2  // LD4R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, D-form, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V20.2D - V23.2D }, [X6]  // LD4R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, Q-form, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
  ld4r { V27.2D - V30.2D }, [X24], #32  // LD4R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, all lanes, Q-form, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4r { V5.2D - V8.2D }, [X3], X22  // LD4R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, Q-form, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
  ld4w { Z5.S - Z8.S }, P3/Z, [X27]  // LD4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
  ld4w { Z24.S - Z27.S }, P5/Z, [X0, #-12, MUL VL]  // LD4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
  ld4w { Z3.S - Z6.S }, P6/Z, [X21, X8, LSL #2]  // LD4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous Load four structures to four vectors, scalar + scalar  \\ 10 13  13  0.50 V1UnitL01[8],V1UnitV01[8],V1UnitS[8]
  ldapur W29, [X30]  // LDAPUR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldapur W13, [X20, #52]  // LDAPUR <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  ldapur X18, [X30]  // LDAPUR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldapur X30, [X12, #0]  // LDAPUR <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  ldapurb W17, [X15]  // LDAPURB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldapurb W0, [X8, #154]  // LDAPURB <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  ldapurh W12, [X30]  // LDAPURH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldapurh W12, [X12, #-116]  // LDAPURH <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  ldapursb W2, [X16]  // LDAPURSB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldapursb W10, [X2, #64]  // LDAPURSB <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  ldapursb X8, [X11]  // LDAPURSB <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldapursb X20, [X26, #185]  // LDAPURSB <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  ldapursh W22, [X1]  // LDAPURSH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldapursh W1, [X9, #46]  // LDAPURSH <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  ldapursh X28, [X5]  // LDAPURSH <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldapursh X16, [X30, #-255]  // LDAPURSH <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  ldapursw X0, [X26]  // LDAPURSW <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldapursw X20, [X3, #232]  // LDAPURSW <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  ldar W21, [X9]  // LDAR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldar W20, [X11, #0]  // LDAR <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldar X29, [X18]  // LDAR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldar X29, [X8, #0]  // LDAR <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldarb W19, [X6]  // LDARB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldarb W29, [X10, #0]  // LDARB <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldarh W7, [X27]  // LDARH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldarh W13, [X29, #0]  // LDARH <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldaxp W9, W16, [X13]  // LDAXP <Wt1>, <Wt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldaxp W25, W26, [X18, #0]  // LDAXP <Wt1>, <Wt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldaxp X24, X22, [X18]  // LDAXP <Xt1>, <Xt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldaxp X18, X28, [X5, #0]  // LDAXP <Xt1>, <Xt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldaxr W19, [X0]  // LDAXR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldaxr W4, [X0, #0]  // LDAXR <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldaxr X13, [X16]  // LDAXR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldaxr X22, [X22, #0]  // LDAXR <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldaxrb W11, [X3]  // LDAXRB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldaxrb W19, [X18, #0]  // LDAXRB <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldaxrh W30, [X20]  // LDAXRH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldaxrh W30, [X3, #0]  // LDAXRH <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldff1b { Z19.B }, P1/Z, [X10]  // LDFF1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1b { Z20.B }, P6/Z, [X9, X17]  // LDFF1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1b { Z13.H }, P7/Z, [X7]  // LDFF1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1b { Z28.H }, P7/Z, [X26, X0]  // LDFF1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1b { Z20.S }, P2/Z, [X16]  // LDFF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1b { Z0.S }, P6/Z, [X8, X15]  // LDFF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1b { Z8.D }, P1/Z, [X0]  // LDFF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1b { Z28.D }, P4/Z, [X19, X20]  // LDFF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1b { Z12.D }, P1/Z, [X23, Z7.D, SXTW]  // LDFF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1b { Z0.S }, P1/Z, [X12, Z12.S, UXTW]  // LDFF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ldff1b { Z16.D }, P1/Z, [X9, Z14.D]  // LDFF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1b { Z31.S }, P0/Z, [Z25.S]  // LDFF1B { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1b { Z2.S }, P7/Z, [Z19.S, #4]  // LDFF1B { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1b { Z18.D }, P6/Z, [Z18.D]  // LDFF1B { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1b { Z17.D }, P3/Z, [Z18.D]  // LDFF1B { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1d { Z26.D }, P3/Z, [X27]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1d { Z13.D }, P2/Z, [X30, X16, LSL #3]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1d { Z9.D }, P6/Z, [X2, Z28.D, SXTW #3]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #3]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1d { Z30.D }, P4/Z, [X7, Z23.D, SXTW]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1d { Z0.D }, P2/Z, [X28, Z8.D, LSL #3]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #3]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1d { Z28.D }, P2/Z, [X29, Z24.D]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1d { Z4.D }, P2/Z, [Z28.D]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1d { Z20.D }, P5/Z, [Z17.D, #40]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1h { Z0.H }, P6/Z, [X14]  // LDFF1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1h { Z14.H }, P2/Z, [X1, X5, LSL #1]  // LDFF1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1h { Z12.S }, P5/Z, [X19]  // LDFF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1h { Z15.S }, P1/Z, [X2, X28, LSL #1]  // LDFF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1h { Z2.D }, P5/Z, [X5]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1h { Z19.D }, P1/Z, [X11, X18, LSL #1]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1h { Z27.S }, P7/Z, [X13, Z9.S, SXTW #1]  // LDFF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
  ldff1h { Z27.D }, P4/Z, [X22, Z26.D, SXTW #1]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1h { Z0.D }, P4/Z, [X9, Z15.D, UXTW]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1h { Z14.S }, P1/Z, [X0, Z2.S, UXTW]  // LDFF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ldff1h { Z21.D }, P5/Z, [X13, Z29.D, LSL #1]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1h { Z21.D }, P5/Z, [X16, Z20.D]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1h { Z30.S }, P4/Z, [Z28.S]  // LDFF1H { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1h { Z9.S }, P6/Z, [Z13.S, #24]  // LDFF1H { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1h { Z27.D }, P2/Z, [Z5.D]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1h { Z19.D }, P2/Z, [Z13.D, #14]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sb { Z8.H }, P6/Z, [X4]  // LDFF1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1sb { Z9.H }, P6/Z, [X6, X18]  // LDFF1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1sb { Z29.S }, P2/Z, [X6]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1sb { Z25.S }, P6/Z, [X29, X2]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1sb { Z12.D }, P5/Z, [X14]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1sb { Z11.D }, P5/Z, [X15, X5]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1sb { Z16.D }, P4/Z, [X29, Z8.D, SXTW]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sb { Z22.S }, P3/Z, [X27, Z24.S, UXTW]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ldff1sb { Z7.D }, P0/Z, [X11, Z11.D]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sb { Z18.S }, P6/Z, [Z28.S]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1sb { Z20.S }, P0/Z, [Z2.S, #16]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1sb { Z22.D }, P1/Z, [Z16.D]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sb { Z25.D }, P6/Z, [Z9.D, #3]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sh { Z24.S }, P2/Z, [X11]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1sh { Z28.S }, P3/Z, [X0, X26, LSL #1]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1sh { Z31.D }, P7/Z, [X13]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1sh { Z6.D }, P4/Z, [X11, X1, LSL #1]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldff1sh { Z1.S }, P1/Z, [X26, Z16.S, UXTW #1]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
  ldff1sh { Z28.D }, P4/Z, [X13, Z26.D, SXTW #1]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1sh { Z8.D }, P1/Z, [X18, Z17.D, UXTW]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sh { Z8.S }, P6/Z, [X15, Z1.S, SXTW]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ldff1sh { Z22.D }, P1/Z, [X9, Z12.D, LSL #1]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1sh { Z29.D }, P3/Z, [X19, Z9.D]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sh { Z13.S }, P3/Z, [Z5.S]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1sh { Z18.S }, P4/Z, [Z18.S, #22]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1sh { Z24.D }, P3/Z, [Z24.D]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sh { Z31.D }, P3/Z, [Z9.D, #14]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sw { Z7.D }, P5/Z, [X25]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1sw { Z17.D }, P1/Z, [X16, X24, LSL #2]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1sw { Z3.D }, P2/Z, [X18, Z5.D, UXTW #2]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1sw { Z9.D }, P3/Z, [X27, Z25.D, UXTW]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sw { Z2.D }, P2/Z, [X11, Z9.D, LSL #2]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1sw { Z19.D }, P2/Z, [X19, Z21.D]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sw { Z5.D }, P6/Z, [Z11.D]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1sw { Z28.D }, P0/Z, [Z22.D, #76]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1w { Z25.S }, P5/Z, [X3]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1w { Z27.S }, P7/Z, [X0, X1, LSL #2]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1w { Z20.D }, P3/Z, [X2]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1w { Z18.D }, P3/Z, [X7, X21, LSL #2]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldff1w { Z6.S }, P7/Z, [X7, Z8.S, UXTW #2]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
  ldff1w { Z20.D }, P0/Z, [X9, Z31.D, SXTW #2]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1w { Z12.D }, P1/Z, [X16, Z31.D, SXTW]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1w { Z6.S }, P4/Z, [X11, Z20.S, SXTW]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
  ldff1w { Z26.D }, P5/Z, [X27, Z27.D, LSL #2]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
  ldff1w { Z13.D }, P7/Z, [X11, Z23.D]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1w { Z0.S }, P5/Z, [Z18.S]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1w { Z28.S }, P4/Z, [Z10.S, #56]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
  ldff1w { Z6.D }, P7/Z, [Z31.D]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldff1w { Z4.D }, P7/Z, [Z25.D, #40]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
  ldnf1b { Z12.B }, P4/Z, [X10]  // LDNF1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1b { Z28.B }, P7/Z, [X19, #1, MUL VL]  // LDNF1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1b { Z6.H }, P4/Z, [X5]  // LDNF1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1b { Z20.H }, P4/Z, [X4, #2, MUL VL]  // LDNF1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1b { Z22.S }, P1/Z, [X0]  // LDNF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1b { Z18.S }, P4/Z, [X11, #-3, MUL VL]  // LDNF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1b { Z25.D }, P4/Z, [X20]  // LDNF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1b { Z16.D }, P4/Z, [X6, #7, MUL VL]  // LDNF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1d { Z0.D }, P1/Z, [X11]  // LDNF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1d { Z8.D }, P2/Z, [X5, #0, MUL VL]  // LDNF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1h { Z31.H }, P3/Z, [X22]  // LDNF1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1h { Z26.H }, P6/Z, [X16, #-8, MUL VL]  // LDNF1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1h { Z21.S }, P0/Z, [X8]  // LDNF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1h { Z17.S }, P5/Z, [X9, #-5, MUL VL]  // LDNF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1h { Z15.D }, P0/Z, [X16]  // LDNF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1h { Z22.D }, P5/Z, [X15, #-8, MUL VL]  // LDNF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sb { Z21.H }, P7/Z, [X0]  // LDNF1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sb { Z17.H }, P6/Z, [X11, #-5, MUL VL]  // LDNF1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sb { Z14.S }, P6/Z, [X26]  // LDNF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sb { Z1.S }, P6/Z, [X18, #-3, MUL VL]  // LDNF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sb { Z12.D }, P7/Z, [X15]  // LDNF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sb { Z30.D }, P4/Z, [X23, #1, MUL VL]  // LDNF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sh { Z7.S }, P1/Z, [X20]  // LDNF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sh { Z26.S }, P4/Z, [X15, #6, MUL VL]  // LDNF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sh { Z28.D }, P0/Z, [X12]  // LDNF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sh { Z21.D }, P2/Z, [X13, #2, MUL VL]  // LDNF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sw { Z30.D }, P2/Z, [X1]  // LDNF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1sw { Z21.D }, P0/Z, [X8, #-1, MUL VL]  // LDNF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1w { Z26.S }, P0/Z, [X8]  // LDNF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1w { Z2.S }, P2/Z, [X1, #0, MUL VL]  // LDNF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1w { Z17.D }, P2/Z, [X28]  // LDNF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnf1w { Z31.D }, P3/Z, [X17, #-5, MUL VL]  // LDNF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnp S21, S24, [X25]  // LDNP <St1>, <St2>, [<Xn|SP>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldnp S16, S10, [X24, #-176]  // LDNP <St1>, <St2>, [<Xn|SP>, #<imm32>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldnp D5, D27, [X16]  // LDNP <Dt1>, <Dt2>, [<Xn|SP>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldnp D31, D11, [X11, #-176]  // LDNP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldnp Q11, Q25, [X2]  // LDNP <Qt1>, <Qt2>, [<Xn|SP>]  \\ Load vector pair, immed offset, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
  ldnp Q0, Q8, [X12, #992]  // LDNP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]  \\ Load vector pair, immed offset, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
  ldnp W19, W9, [X25]  // LDNP <Wt1>, <Wt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, normal, W-form  \\ 1 4  4  3.0 V1UnitL
  ldnp W11, W28, [X20, #-4]  // LDNP <Wt1>, <Wt2>, [<Xn|SP>, #<imm32>]  \\ Load pair, signed immed offset, normal, W-form  \\ 1 4  4  3.0 V1UnitL
  ldnp X20, X27, [X7]  // LDNP <Xt1>, <Xt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, normal, X-form  \\ 2 4  4  1.50 V1UnitL[3]
  ldnp X20, X7, [X0, #-128]  // LDNP <Xt1>, <Xt2>, [<Xn|SP>, #<imm64>]  \\ Load pair, signed immed offset, normal, X-form  \\ 2 4  4  1.50 V1UnitL[3]
  ldnt1b { Z23.B }, P4/Z, [X26]  // LDNT1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnt1b { Z17.B }, P6/Z, [X4, #-6, MUL VL]  // LDNT1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnt1b { Z12.B }, P6/Z, [X22, X7]  // LDNT1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Non temporal load, scalar + scalar  \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldnt1d { Z11.D }, P6/Z, [X8]  // LDNT1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnt1d { Z17.D }, P6/Z, [X10, #1, MUL VL]  // LDNT1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnt1d { Z17.D }, P6/Z, [X11, X1, LSL #3]  // LDNT1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Non temporal load, scalar + scalar  \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldnt1h { Z19.H }, P7/Z, [X4]  // LDNT1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnt1h { Z0.H }, P5/Z, [X19, #-5, MUL VL]  // LDNT1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnt1h { Z26.H }, P5/Z, [X29, X25, LSL #1]  // LDNT1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Non temporal load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
  ldnt1w { Z3.S }, P0/Z, [X3]  // LDNT1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnt1w { Z20.S }, P0/Z, [X29, #-6, MUL VL]  // LDNT1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
  ldnt1w { Z22.S }, P2/Z, [X18, X30, LSL #2]  // LDNT1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Non temporal load, scalar + scalar  \\ 2 6  6  2.0 V1UnitL01,V1UnitS
  ldp S31, S21, [X19], #172  // LDP <St1>, <St2>, [<Xn|SP>], #<imm32>  \\ Load vector pair, immed post-index, S/D-form  \\ 2 6  6  3.0 V1UnitI,V1UnitL
  ldp D26, D19, [X17], #-264  // LDP <Dt1>, <Dt2>, [<Xn|SP>], #<imm64>  \\ Load vector pair, immed post-index, S/D-form  \\ 2 6  6  3.0 V1UnitI,V1UnitL
  ldp Q27, Q30, [X16], #96  // LDP <Qt1>, <Qt2>, [<Xn|SP>], #<imm128>  \\ Load vector pair, immed post-index, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ldp S5, S25, [X29, #184]!  // LDP <St1>, <St2>, [<Xn|SP>, #<imm32>]!  \\ Load vector pair, immed pre-index, S/D-form  \\ 2 6  6  3.0 V1UnitI,V1UnitL
  ldp D18, D17, [X11, #440]!  // LDP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]!  \\ Load vector pair, immed pre-index, S/D-form  \\ 2 6  6  3.0 V1UnitI,V1UnitL
  ldp Q27, Q30, [X23, #448]!  // LDP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]!  \\ Load vector pair, immed pre-index, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
  ldp S16, S26, [X21, #-240]  // LDP <St1>, <St2>, [<Xn|SP>, #<imm32>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldp D16, D23, [X15, #-40]  // LDP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldp Q1, Q19, [X13]  // LDP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]  \\ Load vector pair, immed offset, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
  ldp W19, W7, [X13], #-52  // LDP <Wt1>, <Wt2>, [<Xn|SP>], #<imm32>  \\ Load pair, immed post-index or immed pre-index, normal, W-form  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldp X18, X14, [X9], #-56  // LDP <Xt1>, <Xt2>, [<Xn|SP>], #<imm64>  \\ Load pair, immed post-index or immed pre-index, normal, X-form  \\ 3 4  4  1.50 V1UnitL[3],V1UnitI
  ldp W15, W13, [X1, #156]!  // LDP <Wt1>, <Wt2>, [<Xn|SP>, #<imm32>]!  \\ Load pair, immed post-index or immed pre-index, normal, W-form  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldp X0, X23, [X4, #16]!  // LDP <Xt1>, <Xt2>, [<Xn|SP>, #<imm64>]!  \\ Load pair, immed post-index or immed pre-index, normal, X-form  \\ 3 4  4  1.50 V1UnitL[3],V1UnitI
  ldp W13, W0, [X30]  // LDP <Wt1>, <Wt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, normal, W-form  \\ 1 4  4  3.0 V1UnitL
  ldp W13, W30, [X16, #-144]  // LDP <Wt1>, <Wt2>, [<Xn|SP>, #<imm32>]  \\ Load pair, signed immed offset, normal, W-form  \\ 1 4  4  3.0 V1UnitL
  ldp X17, X15, [X26]  // LDP <Xt1>, <Xt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, normal, X-form  \\ 2 4  4  1.50 V1UnitL[3]
  ldp X19, X26, [X30, #-272]  // LDP <Xt1>, <Xt2>, [<Xn|SP>, #<imm64>]  \\ Load pair, signed immed offset, normal, X-form  \\ 2 4  4  1.50 V1UnitL[3]
  ldpsw X25, X16, [X12], #56  // LDPSW <Xt1>, <Xt2>, [<Xn|SP>], #<imm>  \\ Load pair, signed immed offset, signed words  \\ 3 5  5  2.00 V1UnitI,V1UnitL[3]
  ldpsw X10, X1, [X3, #-112]!  // LDPSW <Xt1>, <Xt2>, [<Xn|SP>, #<imm>]!  \\ Load pair, signed immed offset, signed words  \\ 3 5  5  2.00 V1UnitI,V1UnitL[3]
  ldpsw X13, X7, [X23]  // LDPSW <Xt1>, <Xt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, signed words  \\ 2 5  5  3.00 V1UnitI,V1UnitL[3]
  ldpsw X28, X27, [X4, #72]  // LDPSW <Xt1>, <Xt2>, [<Xn|SP>, #<imm>]  \\ Load pair, signed immed offset, signed words  \\ 2 5  5  3.00 V1UnitI,V1UnitL[3]
  ldr W24, [X30], #-64  // LDR <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldr X8, [X2], #123  // LDR <Xt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldr W2, [X0, #39]!  // LDR <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldr X27, [X11, #173]!  // LDR <Xt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldr W20, [X27, #12924]  // LDR <Wt>, [<Xn|SP>, #<pimm32>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldr X28, [X27, #1296]  // LDR <Xt>, [<Xn|SP>, #<pimm64>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldr B21, [X20], #-30  // LDR <Bt>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr H9, [X26], #132  // LDR <Ht>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr S23, [X30], #-209  // LDR <St>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr D12, [X12], #-248  // LDR <Dt>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr Q16, [X4], #-10  // LDR <Qt>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr B16, [X10, #-174]!  // LDR <Bt>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr H29, [X19, #-60]!  // LDR <Ht>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr S6, [X27, #-215]!  // LDR <St>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr D9, [X6, #-175]!  // LDR <Dt>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr Q11, [X21, #62]!  // LDR <Qt>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
  ldr B25, [X20, #2868]  // LDR <Bt>, [<Xn|SP>, #<pimmb>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
  ldr H12, [X18, #2440]  // LDR <Ht>, [<Xn|SP>, #<pimmh>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
  ldr S20, [X27, #1372]  // LDR <St>, [<Xn|SP>, #<pimms>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
  ldr D25, [X15, #3120]  // LDR <Dt>, [<Xn|SP>, #<pimmd>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
  ldr Q7, [X7, #9936]  // LDR <Qt>, [<Xn|SP>, #<pimmq>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
  ldr W17, test  // LDR <Wt>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
  ldr X4, test  // LDR <Xt>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
  ldr S19, test  // LDR <St>, <label>  \\ Load vector reg, literal, S/D/Q forms  \\ 1 6  6  3.0 V1UnitL
  ldr D7, test  // LDR <Dt>, <label>  \\ Load vector reg, literal, S/D/Q forms  \\ 1 6  6  3.0 V1UnitL
  ldr Q10, test  // LDR <Qt>, <label>  \\ Load vector reg, literal, S/D/Q forms  \\ 1 6  6  3.0 V1UnitL
  ldr P3, [X5]  // LDR <Pt>, [<Xn|SP>]  \\ Load predicate  \\ 2 6  6  2.0 V1UnitL,V1UnitM
  ldr P1, [X1, #147, MUL VL]  // LDR <Pt>, [<Xn|SP>, #<imm>, MUL VL]  \\ Load predicate  \\ 2 6  6  2.0 V1UnitL,V1UnitM
  ldr W9, [X17, X20]  // LDR <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  ldr X16, [X11, X21]  // LDR <Xt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  ldr W10, [X0, W12, UXTW]  // LDR <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldr X14, [X23, W3, UXTW]  // LDR <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldr W14, [X27, W7, UXTW #2]  // LDR <Wt>, [<Xn|SP>, <Wm>, UXTW #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldr X6, [X8, W16, UXTW #3]  // LDR <Xt>, [<Xn|SP>, <Wm>, UXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldr W15, [X10, W30, SXTW]  // LDR <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldr X20, [X6, W23, SXTW]  // LDR <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldr W11, [X25, W29, SXTW #2]  // LDR <Wt>, [<Xn|SP>, <Wm>, SXTW #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldr X3, [X14, W8, SXTW #3]  // LDR <Xt>, [<Xn|SP>, <Wm>, SXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldr W11, [X13, X4, SXTX]  // LDR <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldr X9, [X18, X17, SXTX]  // LDR <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldr W18, [X23, X19, SXTX #2]  // LDR <Wt>, [<Xn|SP>, <Xm>, SXTX #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldr X28, [X11, X22, SXTX #3]  // LDR <Xt>, [<Xn|SP>, <Xm>, SXTX #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldr W17, [X22, X17, LSL #2]  // LDR <Wt>, [<Xn|SP>, <Xm>, LSL #2]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldr X3, [X18, X27, LSL #3]  // LDR <Xt>, [<Xn|SP>, <Xm>, LSL #3]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldr B24, [X22, X1]  // LDR <Bt>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 1 6  6  3.0 V1UnitL
  ldr B10, [X2, W4, UXTW]  // LDR <Bt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
  ldr B22, [X29, W23, SXTW]  // LDR <Bt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
  ldr B10, [X5, X27, SXTX]  // LDR <Bt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
  ldr H29, [X20, X30]  // LDR <Ht>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 2 7  7  3.00 V1UnitL
  ldr H21, [X5, W1, UXTW]  // LDR <Ht>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
  ldr H3, [X10, W30, SXTW]  // LDR <Ht>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
  ldr H5, [X22, X29, SXTX]  // LDR <Ht>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
  ldr H20, [X27, W1, UXTW #1]  // LDR <Ht>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
  ldr H22, [X15, W1, SXTW #1]  // LDR <Ht>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
  ldr H29, [X2, X13, SXTX #1]  // LDR <Ht>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
  ldr H8, [X25, X21, LSL #1]  // LDR <Ht>, [<Xn|SP>, <Xm>, LSL #1]  \\ Load vector reg, register offset, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
  ldr S11, [X2, X11]  // LDR <St>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 1 6  6  3.0 V1UnitL
  ldr S6, [X2, W20, UXTW]  // LDR <St>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
  ldr S5, [X6, W3, SXTW]  // LDR <St>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
  ldr S1, [X30, X21, SXTX]  // LDR <St>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
  ldr S9, [X25, W3, UXTW #2]  // LDR <St>, [<Xn|SP>, <Wm>, UXTW #2]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldr S0, [X27, W28, SXTW #2]  // LDR <St>, [<Xn|SP>, <Wm>, SXTW #2]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldr S20, [X17, X9, SXTX #2]  // LDR <St>, [<Xn|SP>, <Xm>, SXTX #2]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldr S14, [X19, X10, LSL #2]  // LDR <St>, [<Xn|SP>, <Xm>, LSL #2]  \\ Load vector reg, register offset, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldr D15, [X6, X17]  // LDR <Dt>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 1 6  6  3.0 V1UnitL
  ldr D3, [X25, W19, UXTW]  // LDR <Dt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
  ldr D21, [X17, W21, SXTW]  // LDR <Dt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
  ldr D11, [X26, X0, SXTX]  // LDR <Dt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
  ldr D27, [X10, W20, UXTW #3]  // LDR <Dt>, [<Xn|SP>, <Wm>, UXTW #3]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldr D24, [X15, W13, SXTW #3]  // LDR <Dt>, [<Xn|SP>, <Wm>, SXTW #3]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldr D18, [X16, X9, SXTX #3]  // LDR <Dt>, [<Xn|SP>, <Xm>, SXTX #3]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldr D23, [X19, X15, LSL #3]  // LDR <Dt>, [<Xn|SP>, <Xm>, LSL #3]  \\ Load vector reg, register offset, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
  ldr Q31, [X21, X24]  // LDR <Qt>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 2 7  7  3.00 V1UnitL
  ldr Q11, [X20, W0, UXTW]  // LDR <Qt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
  ldr Q27, [X23, W9, SXTW]  // LDR <Qt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
  ldr Q3, [X18, X27, SXTX]  // LDR <Qt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
  ldr Q26, [X6, W27, UXTW #4]  // LDR <Qt>, [<Xn|SP>, <Wm>, UXTW #4]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
  ldr Q31, [X19, W9, SXTW #4]  // LDR <Qt>, [<Xn|SP>, <Wm>, SXTW #4]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
  ldr Q23, [X9, X16, SXTX #4]  // LDR <Qt>, [<Xn|SP>, <Xm>, SXTX #4]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
  ldr Q11, [X21, X2, LSL #4]  // LDR <Qt>, [<Xn|SP>, <Xm>, LSL #4]  \\ Load vector reg, register offset, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
  ldr Z18, [X27]  // LDR <Zt>, [<Xn|SP>]  \\ Load vector  \\ 1 6  6  2.0 V1UnitL01
  ldr Z20, [X17, #-88, MUL VL]  // LDR <Zt>, [<Xn|SP>, #<imm>, MUL VL]  \\ Load vector  \\ 1 6  6  2.0 V1UnitL01
  ldrb W21, [X15], #-173  // LDRB <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrb W26, [X21, #-25]!  // LDRB <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrb W0, [X6]  // LDRB <Wt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrb W24, [X26, #4049]  // LDRB <Wt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrb W19, [X28, X24]  // LDRB <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  ldrb W27, [X5, W28, UXTW]  // LDRB <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrb W19, [X19, W20, SXTW]  // LDRB <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrb W15, [X19, X3, SXTX]  // LDRB <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrh W19, [X11], #-92  // LDRH <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrh W17, [X25, #132]!  // LDRH <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrh W15, [X17]  // LDRH <Wt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrh W29, [X22, #3006]  // LDRH <Wt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrh W10, [X15, X19]  // LDRH <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  ldrh W24, [X7, W28, UXTW]  // LDRH <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrh W23, [X20, W12, SXTW]  // LDRH <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrh W29, [X5, X6, SXTX]  // LDRH <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrh W14, [X26, W18, UXTW #1]  // LDRH <Wt>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrh W26, [X12, W11, SXTW #1]  // LDRH <Wt>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrh W15, [X12, X21, SXTX #1]  // LDRH <Wt>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrh W4, [X22, X16, LSL #1]  // LDRH <Wt>, [<Xn|SP>, <Xm>, LSL #1]  \\ Load register, register offset, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrsb W7, [X26], #89  // LDRSB <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsb X30, [X22], #-66  // LDRSB <Xt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsb W0, [X14, #-134]!  // LDRSB <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsb X23, [X8, #-156]!  // LDRSB <Xt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsb W10, [X7]  // LDRSB <Wt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsb W26, [X24, #1989]  // LDRSB <Wt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsb X3, [X22]  // LDRSB <Xt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsb X17, [X1, #3772]  // LDRSB <Xt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsb W2, [X11, X20]  // LDRSB <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  ldrsb W25, [X27, W17, UXTW]  // LDRSB <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsb W18, [X21, W7, SXTW]  // LDRSB <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsb W19, [X1, X12, SXTX]  // LDRSB <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsb X29, [X17, X10]  // LDRSB <Xt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  ldrsb X3, [X20, W22, UXTW]  // LDRSB <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsb X27, [X27, W2, SXTW]  // LDRSB <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsb X10, [X8, X29, SXTX]  // LDRSB <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsh W22, [X0], #106  // LDRSH <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsh X8, [X6], #-154  // LDRSH <Xt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsh W12, [X9, #58]!  // LDRSH <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsh X25, [X6, #104]!  // LDRSH <Xt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsh W2, [X20]  // LDRSH <Wt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsh W24, [X16, #7878]  // LDRSH <Wt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsh X12, [X11]  // LDRSH <Xt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsh X0, [X24, #7962]  // LDRSH <Xt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsh W27, [X16, X30]  // LDRSH <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  ldrsh W7, [X29, W21, UXTW]  // LDRSH <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsh W6, [X9, W22, SXTW]  // LDRSH <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsh W10, [X21, X0, SXTX]  // LDRSH <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsh W19, [X23, W22, UXTW #1]  // LDRSH <Wt>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrsh W3, [X20, W2, SXTW #1]  // LDRSH <Wt>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrsh W25, [X15, X14, SXTX #1]  // LDRSH <Wt>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrsh W12, [X26, X5, LSL #1]  // LDRSH <Wt>, [<Xn|SP>, <Xm>, LSL #1]  \\ Load register, register offset, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrsh X10, [X27, X15]  // LDRSH <Xt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  ldrsh X6, [X18, W28, UXTW]  // LDRSH <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsh X0, [X5, W23, SXTW]  // LDRSH <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsh X16, [X29, X17, SXTX]  // LDRSH <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsh X28, [X25, W10, UXTW #1]  // LDRSH <Xt>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrsh X9, [X24, W24, SXTW #1]  // LDRSH <Xt>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrsh X6, [X23, X1, SXTX #1]  // LDRSH <Xt>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrsh X27, [X23, X6, LSL #1]  // LDRSH <Xt>, [<Xn|SP>, <Xm>, LSL #1]  \\ Load register, register offset, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
  ldrsw X17, [X28], #132  // LDRSW <Xt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsw X28, [X8, #-244]!  // LDRSW <Xt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
  ldrsw X4, [X18]  // LDRSW <Xt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsw X9, [X17, #4308]  // LDRSW <Xt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  ldrsw X6, test  // LDRSW <Xt>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
  ldrsw X0, [X0, X5]  // LDRSW <Xt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  ldrsw X20, [X24, W20, UXTW]  // LDRSW <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsw X20, [X14, W20, SXTW]  // LDRSW <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsw X30, [X3, X12, SXTX]  // LDRSW <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  ldrsw X17, [X18, W16, UXTW #2]  // LDRSW <Xt>, [<Xn|SP>, <Wm>, UXTW #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldrsw X17, [X14, W11, SXTW #2]  // LDRSW <Xt>, [<Xn|SP>, <Wm>, SXTW #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldrsw X18, [X1, X29, SXTX #2]  // LDRSW <Xt>, [<Xn|SP>, <Xm>, SXTX #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldrsw X11, [X16, X1, LSL #2]  // LDRSW <Xt>, [<Xn|SP>, <Xm>, LSL #2]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  ldtr W5, [X29]  // LDTR <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtr W24, [X16, #41]  // LDTR <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtr X24, [X10]  // LDTR <Xt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtr X30, [X6, #232]  // LDTR <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrb W10, [X1]  // LDTRB <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrb W19, [X19, #-79]  // LDTRB <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrh W20, [X30]  // LDTRH <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrh W28, [X1, #-22]  // LDTRH <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsb W2, [X25]  // LDTRSB <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsb W20, [X16, #251]  // LDTRSB <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsb X7, [X5]  // LDTRSB <Xt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsb X20, [X22, #-29]  // LDTRSB <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsh W1, [X7]  // LDTRSH <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsh W8, [X30, #-106]  // LDTRSH <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsh X21, [X14]  // LDTRSH <Xt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsh X26, [X27, #50]  // LDTRSH <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsw X14, [X20]  // LDTRSW <Xt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldtrsw X20, [X30, #-233]  // LDTRSW <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
  ldur B21, [X30]  // LDUR <Bt>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur B29, [X27, #-149]  // LDUR <Bt>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur H14, [X27]  // LDUR <Ht>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur H7, [X6, #4]  // LDUR <Ht>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur S23, [X24]  // LDUR <St>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur S9, [X3, #-251]  // LDUR <St>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur D6, [X3]  // LDUR <Dt>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur D0, [X3, #-191]  // LDUR <Dt>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur Q19, [X23]  // LDUR <Qt>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur Q9, [X13, #179]  // LDUR <Qt>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
  ldur W27, [X5]  // LDUR <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldur W3, [X29, #233]  // LDUR <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldur X2, [X28]  // LDUR <Xt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldur X21, [X1, #147]  // LDUR <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldurb W20, [X21]  // LDURB <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldurb W26, [X0, #-71]  // LDURB <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldurh W9, [X4]  // LDURH <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldurh W7, [X1, #-173]  // LDURH <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursb W8, [X18]  // LDURSB <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursb W9, [X19, #-21]  // LDURSB <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursb X2, [X24]  // LDURSB <Xt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursb X26, [X14, #-38]  // LDURSB <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursh W27, [X11]  // LDURSH <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursh W3, [X22, #239]  // LDURSH <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursh X26, [X15]  // LDURSH <Xt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursh X15, [X3, #-210]  // LDURSH <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursw X8, [X12]  // LDURSW <Xt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldursw X11, [X11, #199]  // LDURSW <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  ldxp W17, W0, [X21]  // LDXP <Wt1>, <Wt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldxp W21, W15, [X9]  // LDXP <Wt1>, <Wt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldxp X28, X27, [X27]  // LDXP <Xt1>, <Xt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldxp X30, X18, [X14]  // LDXP <Xt1>, <Xt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldxr W27, [X12]  // LDXR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldxr W28, [X14]  // LDXR <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldxr X25, [X27]  // LDXR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldxr X23, [X0]  // LDXR <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldxrb W10, [X5]  // LDXRB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldxrb W0, [X0]  // LDXRB <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  ldxrh W14, [X6]  // LDXRH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  ldxrh W1, [X3]  // LDXRH <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  lsl W18, W2, #26  // LSL <Wd>, <Wn>, #<shifts>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  lsl X2, X23, #15  // LSL <Xd>, <Xn>, #<shiftd>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  lsl Z0.B, P1/M, Z0.B, #2  // LSL <Zdn>.B, <Pg>/M, <Zdn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl Z17.H, P5/M, Z17.H, #5  // LSL <Zdn>.H, <Pg>/M, <Zdn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl Z23.S, P1/M, Z23.S, #5  // LSL <Zdn>.S, <Pg>/M, <Zdn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl Z10.D, P2/M, Z10.D, #18  // LSL <Zdn>.D, <Pg>/M, <Zdn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl Z29.B, Z27.B, #2  // LSL <Zd>.B, <Zn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl Z31.H, Z8.H, #5  // LSL <Zd>.H, <Zn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl Z29.S, Z19.S, #7  // LSL <Zd>.S, <Zn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl Z4.D, Z23.D, #26  // LSL <Zd>.D, <Zn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl W24, W1, W29  // LSL <Wd>, <Wn>, <Wm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
  lsl X7, X21, X6  // LSL <Xd>, <Xn>, <Xm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
  lsl Z29.D, P3/M, Z29.D, Z7.D  // LSL <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl Z2.D, P2/M, Z2.D, Z3.D  // LSL <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsl Z11.S, Z17.S, Z2.D  // LSL <Zd>.<T>, <Zn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lslr Z7.D, P5/M, Z7.D, Z9.D  // LSLR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lslv W7, W18, W22  // LSLV <Wd>, <Wn>, <Wm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
  lslv X14, X26, X7  // LSLV <Xd>, <Xn>, <Xm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
  lsr W19, W8, #24  // LSR <Wd>, <Wn>, #<shifts>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  lsr X18, X29, #57  // LSR <Xd>, <Xn>, #<shiftd>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  lsr Z5.B, P7/M, Z5.B, #3  // LSR <Zdn>.B, <Pg>/M, <Zdn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr Z16.H, P2/M, Z16.H, #2  // LSR <Zdn>.H, <Pg>/M, <Zdn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr Z27.S, P4/M, Z27.S, #13  // LSR <Zdn>.S, <Pg>/M, <Zdn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr Z23.D, P2/M, Z23.D, #20  // LSR <Zdn>.D, <Pg>/M, <Zdn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr Z2.B, Z5.B, #1  // LSR <Zd>.B, <Zn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr Z15.H, Z14.H, #7  // LSR <Zd>.H, <Zn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr Z0.S, Z21.S, #2  // LSR <Zd>.S, <Zn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr Z23.D, Z26.D, #24  // LSR <Zd>.D, <Zn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr W13, W30, W12  // LSR <Wd>, <Wn>, <Wm>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  lsr X20, X24, X1  // LSR <Xd>, <Xn>, <Xm>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  lsr Z10.B, P6/M, Z10.B, Z2.B  // LSR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr Z12.B, P3/M, Z12.B, Z29.D  // LSR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsr Z3.B, Z24.B, Z17.D  // LSR <Zd>.<T>, <Zn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsrr Z28.H, P5/M, Z28.H, Z29.H  // LSRR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
  lsrv W8, W29, W13  // LSRV <Wd>, <Wn>, <Wm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
  lsrv X23, X3, X19  // LSRV <Xd>, <Xn>, <Xm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
  mad Z10.B, P5/M, Z27.B, Z0.B  // MAD <Zdn>.B, <Pg>/M, <Zm>.B, <Za>.B  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  mad Z4.H, P3/M, Z10.H, Z12.H  // MAD <Zdn>.H, <Pg>/M, <Zm>.H, <Za>.H  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  mad Z10.S, P4/M, Z28.S, Z12.S  // MAD <Zdn>.S, <Pg>/M, <Zm>.S, <Za>.S  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  mad Z22.D, P5/M, Z2.D, Z25.D  // MAD <Zdn>.D, <Pg>/M, <Zm>.D, <Za>.D  \\ Multiply accumulate, D element size  \\ 2 5  2  0.50 V1UnitV0[2]
  madd W8, W5, W26, W12  // MADD <Wd>, <Wn>, <Wm>, <Wa>  \\ Multiply accumulate, X-form  \\ 1 2 1 1.0 V1UnitM0
  madd X17, X8, X16, X0  // MADD <Xd>, <Xn>, <Xm>, <Xa>  \\ Multiply accumulate, X-form  \\ 1 2 1 1.0 V1UnitM0
  mla V12.4H, V30.4H, V7.H[2]  // MLA <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
  mla V7.4S, V9.4S, V5.S[3]  // MLA <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
  mla V28.4S, V27.4S, V30.4S  // MLA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
  mla Z3.B, P0/M, Z1.B, Z17.B  // MLA <Zda>.B, <Pg>/M, <Zn>.B, <Zm>.B  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  mla Z16.H, P3/M, Z5.H, Z9.H  // MLA <Zda>.H, <Pg>/M, <Zn>.H, <Zm>.H  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  mla Z13.S, P7/M, Z29.S, Z27.S  // MLA <Zda>.S, <Pg>/M, <Zn>.S, <Zm>.S  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  mla Z19.D, P6/M, Z29.D, Z1.D  // MLA <Zda>.D, <Pg>/M, <Zn>.D, <Zm>.D  \\ Multiply accumulate, D element size  \\ 2 5  2  0.50 V1UnitV0[2]
  mls V3.4H, V10.4H, V6.H[4]  // MLS <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
  mls V29.2S, V26.2S, V5.S[1]  // MLS <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
  mls V6.8B, V7.8B, V29.8B  // MLS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
  mls Z14.B, P6/M, Z1.B, Z6.B  // MLS <Zda>.B, <Pg>/M, <Zn>.B, <Zm>.B  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  mls Z10.H, P7/M, Z21.H, Z5.H  // MLS <Zda>.H, <Pg>/M, <Zn>.H, <Zm>.H  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  mls Z13.S, P4/M, Z27.S, Z31.S  // MLS <Zda>.S, <Pg>/M, <Zn>.S, <Zm>.S  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  mls Z6.D, P0/M, Z12.D, Z8.D  // MLS <Zda>.D, <Pg>/M, <Zn>.D, <Zm>.D  \\ Multiply accumulate, D element size  \\ 2 5  2  0.50 V1UnitV0[2]
  mneg W11, W18, W0  // MNEG <Wd>, <Wn>, <Wm>  \\ Multiply  \\ 1 2  2  2.0 V1UnitM
  mneg X27, X8, X5  // MNEG <Xd>, <Xn>, <Xm>  \\ Multiply  \\ 1 2  2  2.0 V1UnitM
  mov Z15.H, P2/M, H18  // MOV <Zd>.<T>, <Pg>/M, <V><n>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  mov Z27.B, Z19.B[63]  // MOV <Zd>.B, <Zn>.B[<immb>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  mov Z23.H, Z30.H[5]  // MOV <Zd>.H, <Zn>.H[<immh>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  mov Z13.S, Z5.S[14]  // MOV <Zd>.S, <Zn>.S[<imms>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  mov Z24.D, Z11.D[3]  // MOV <Zd>.D, <Zn>.D[<immd>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  mov Z17.H, H9  // MOV <Zd>.<T>, <V><n>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  mov WSP, #0xe00  // MOV <Wd|WSP>, #<imms>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  mov X26, #0x1e00  // MOV <Xd|SP>, #<immd>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  mov V3.B[14], V21.B[7]  // MOV <Vd>.B[<index1b>], <Vn>.B[<index2b>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
  mov V2.H[5], V31.H[5]  // MOV <Vd>.H[<index1h>], <Vn>.H[<index2h>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
  mov V18.S[1], V16.S[2]  // MOV <Vd>.S[<index1s>], <Vn>.S[<index2s>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
  mov V26.D[0], V1.D[1]  // MOV <Vd>.D[<index1d>], <Vn>.D[<index2d>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
  mov V5.B[15], W21  // MOV <Vd>.B[<indexb>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
  mov V28.H[0], W26  // MOV <Vd>.H[<indexh>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
  mov V22.S[1], W1  // MOV <Vd>.S[<indexs>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
  mov V17.D[0], X6  // MOV <Vd>.D[<indexd>], X<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
  mov Z24.B, P2/M, #-55  // MOV <Zd>.B, <Pg>/M, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  mov Z29.S, P5/M, #27  // MOV <Zd>.<T>, <Pg>/M, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  mov Z27.D, P6/M, #89, LSL #8  // MOV <Zd>.<T>, <Pg>/M, #<imm>, <shift>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  mov Z13.B, P5/Z, #48  // MOV <Zd>.B, <Pg>/Z, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  mov Z22.H, P1/Z, #-25  // MOV <Zd>.<T>, <Pg>/Z, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  mov Z6.D, P6/Z, #-81, LSL #8  // MOV <Zd>.<T>, <Pg>/Z, #<imm>, <shift>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
  mov Z9.B, #-68  // MOV <Zd>.B, #<imm>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  mov Z19.H, #-101  // MOV <Zd>.<T>, #<imm>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  mov Z29.S, #2, LSL #0  // MOV <Zd>.<T>, #<imm>, <shift>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
  mov W22, #0xe00  // MOV <Wd>, #<imms>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  mov X3, #0xe00  // MOV <Xd>, #<immd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  mov P7.B, P1/M, P0.B  // MOV <Pd>.B, <Pg>/M, <Pn>.B  \\ Predicate select  \\ 1 1  1  1.0 V1UnitM0
  mov P0.B, P1/Z, P5.B  // MOV <Pd>.B, <Pg>/Z, <Pn>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  mov W15, W1  // MOV <Wd>, <Wm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  mov X30, X25  // MOV <Xd>, <Xm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  mov B15, V3.B[12]  // MOV B<d>, <Vn>.B[<indexb>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  mov H30, V28.H[0]  // MOV H<d>, <Vn>.H[<indexh>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  mov S7, V10.S[0]  // MOV S<d>, <Vn>.S[<indexs>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  mov D4, V5.D[1]  // MOV D<d>, <Vn>.D[<indexd>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
  mov Z20.B, P4/M, W19  // MOV <Zd>.<T>, <Pg>/M, <R><n>  \\ Copy, scalar  \\ 2 5  5  1.0 V1UnitM0,V1UnitV01
  mov Z27.D, P4/M, SP  // MOV <Zd>.<T>, <Pg>/M, <R2>SP  \\ Copy, scalar  \\ 2 5  5  1.0 V1UnitM0,V1UnitV01
  mov Z4.S, W26  // MOV <Zd>.<T>, <R><n>  \\ Duplicate, scalar form  \\ 1 3  3  1.0 V1UnitM0
  mov Z1.D, SP  // MOV <Zd>.<T>, <R2>SP  \\ Duplicate, scalar form  \\ 1 3  3  1.0 V1UnitM0
  mov W6, V2.S[1]  // MOV <Wd>, <Vn>.S[<indexs>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  mov X5, V8.D[1]  // MOV <Xd>, <Vn>.D[<indexd>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  mov WSP, WSP  // MOV <Wd|WSP>, <Wn|WSP>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  mov X1, X18  // MOV <Xd|SP>, <Xn|SP>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  mov V26.8B, V10.8B  // MOV <Vd>.<T>, <Vn>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  mov Z5.D, P6/M, Z16.D  // MOV <Zd>.<T>, <Pv>/M, <Zn>.<T>  \\ Select, vector form  \\ 1 2  2  2.0 V1UnitV01
  mov Z12.D, Z0.D  // MOV <Zd>.D, <Zn>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  mov W6, #0xe00  // MOV <Wd>, #<imms>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  mov X13, #0xe00  // MOV <Xd>, #<immd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  mov Z5.B, #0x70  // MOV <Zd>.B, #<constb>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
  mov Z10.H, #0x60  // MOV <Zd>.H, #<consth>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
  mov Z27.S, #0x2  // MOV <Zd>.S, #<consts>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
  mov Z6.D, #0x4  // MOV <Zd>.D, #<constd>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
  mov P3.B, P0.B  // MOV <Pd>.B, <Pn>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  movi V20.16B, #56  // MOVI <Vd>.<Tb>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  movi V22.4H, #175  // MOVI <Vd>.<Th>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  movi V15.4H, #6, LSL #0  // MOVI <Vd>.<Th>, #<imm8>, LSL #<amounth>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  movi V13.2S, #71  // MOVI <Vd>.<Ts>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  movi V30.2S, #127, LSL #0  // MOVI <Vd>.<Ts>, #<imm8>, LSL #<amounts>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  movi V12.2S, #160, MSL #8  // MOVI <Vd>.<Ts>, #<imm8>, MSL #<amountones>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  movi D9, #0xff00ff00ff00ff00  // MOVI <Dd>, #<imm>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  movi V7.2D, #0xff00ff00ff00ff00  // MOVI <Vd>.2D, #<imm>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  movk W6, #42183  // MOVK <Wd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movk W21, #47898, LSL #16  // MOVK <Wd>, #<imm>, LSL #<shifts>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movk X28, #15391  // MOVK <Xd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movk X9, #56384, LSL #0  // MOVK <Xd>, #<imm>, LSL #<shiftd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movn W23, #5764  // MOVN <Wd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movn W16, #60085, LSL #0  // MOVN <Wd>, #<imm>, LSL #<shifts>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movn X26, #36708  // MOVN <Xd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movn X3, #65080, LSL #16  // MOVN <Xd>, #<imm>, LSL #<shiftd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movprfx Z16.D, P5/Z, Z18.D  // MOVPRFX <Zd>.<T>, <Pg>/<ZM>, <Zn>.<T>  \\ Move prefix  \\ 1 2  2  2.0 V1UnitV01
  mla Z16.D, P5/M, Z12.D, Z11.D // Ignore
  movprfx Z25, Z15  // MOVPRFX <Zd>, <Zn>  \\ Move prefix  \\ 1 2  2  2.0 V1UnitV01
  fmla Z25.D, P0/M, Z30.D, Z16.D // Ignore
  movs P4.B, P6/Z, P5.B  // MOVS <Pd>.B, <Pg>/Z, <Pn>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  movs P3.B, P1.B  // MOVS <Pd>.B, <Pn>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  movz W8, #6897  // MOVZ <Wd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movz W12, #15479, LSL #16  // MOVZ <Wd>, #<imm>, LSL #<shifts>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movz X2, #1969  // MOVZ <Xd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  movz X0, #36697, LSL #48  // MOVZ <Xd>, #<imm>, LSL #<shiftd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
  mrs X3, ACTLR_EL2  // MRS <Xt>, <systemreg>  \\ No description \\ No scheduling info
  mrs X7, S3_6_C9_C5_6  // MRS <Xt>, S<op0>_<op1>_<Cn>_<Cm>_<op2>  \\ No description \\ No scheduling info
  msb Z10.B, P2/M, Z20.B, Z18.B  // MSB <Zdn>.B, <Pg>/M, <Zm>.B, <Za>.B  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  msb Z7.H, P6/M, Z5.H, Z2.H  // MSB <Zdn>.H, <Pg>/M, <Zm>.H, <Za>.H  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  msb Z6.S, P4/M, Z28.S, Z21.S  // MSB <Zdn>.S, <Pg>/M, <Zm>.S, <Za>.S  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
  msb Z1.D, P3/M, Z25.D, Z22.D  // MSB <Zdn>.D, <Pg>/M, <Zm>.D, <Za>.D  \\ Multiply accumulate, D element size  \\ 2 5  2  0.50 V1UnitV0[2]
  msr DAIFClr, #9  // MSR <pstatefield1>, #<imm1>  \\ No description \\ No scheduling info
  msr SPSel, #0  // MSR <pstatefield2>, #<imm2>  \\ No description \\ No scheduling info
  msr ACTLR_EL1, X20  // MSR <systemreg>, <Xt>  \\ No description \\ No scheduling info
  msr S3_3_C14_C3_6, X6  // MSR S<op0>_<op1>_<Cn>_<Cm>_<op2>, <Xt>  \\ No description \\ No scheduling info
  msub W7, W19, W29, W23  // MSUB <Wd>, <Wn>, <Wm>, <Wa>  \\ Multiply accumulate, X-form  \\ 1 2 1 1.0 V1UnitM0
  msub X16, X4, X5, X4  // MSUB <Xd>, <Xn>, <Xm>, <Xa>  \\ Multiply accumulate, X-form  \\ 1 2 1 1.0 V1UnitM0
  mul V21.4H, V7.4H, V9.H[5]  // MUL <Vd>.4H, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  mul V1.8H, V1.8H, V14.H[3]  // MUL <Vd>.8H, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  mul V15.2S, V30.2S, V6.S[3]  // MUL <Vd>.2S, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  mul V22.4S, V29.4S, V7.S[3]  // MUL <Vd>.4S, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  mul Z27.B, Z27.B, #61  // MUL <Zdn>.B, <Zdn>.B, #<imm>  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  mul Z17.H, Z17.H, #27  // MUL <Zdn>.H, <Zdn>.H, #<imm>  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  mul Z22.S, Z22.S, #41  // MUL <Zdn>.S, <Zdn>.S, #<imm>  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  mul Z19.D, Z19.D, #87  // MUL <Zdn>.D, <Zdn>.D, #<imm>  \\ Multiply, D element size  \\ 2 5  5  0.50 V1UnitV0[2]
  mul V18.16B, V4.16B, V16.16B  // MUL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  mul Z9.B, P4/M, Z9.B, Z18.B  // MUL <Zdn>.B, <Pg>/M, <Zdn>.B, <Zm>.B  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  mul Z7.H, P1/M, Z7.H, Z3.H  // MUL <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  mul Z3.S, P7/M, Z3.S, Z1.S  // MUL <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  mul Z4.D, P6/M, Z4.D, Z28.D  // MUL <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Multiply, D element size  \\ 2 5  5  0.50 V1UnitV0[2]
  mul W9, W25, W3  // MUL <Wd>, <Wn>, <Wm>  \\ Multiply  \\ 1 2  2  2.0 V1UnitM
  mul X18, X4, X2  // MUL <Xd>, <Xn>, <Xm>  \\ Multiply  \\ 1 2  2  2.0 V1UnitM
  mvn W7, W13  // MVN <Wd>, <Wm>  \\ Move, basic  \\ 1 1  1  4.0 V1UnitI
  mvn W2, W22, LSR #26  // MVN <Wd>, <Wm>, <shift> #<wamount>  \\ Move, basic  \\ 1 1  1  4.0 V1UnitI
  mvn X0, X8  // MVN <Xd>, <Xm>  \\ Move, basic  \\ 1 1  1  4.0 V1UnitI
  mvn X25, X30, LSR #42  // MVN <Xd>, <Xm>, <shift> #<amount>  \\ Move, basic  \\ 1 1  1  4.0 V1UnitI
  mvn V24.16B, V14.16B  // MVN <Vd>.<T>, <Vn>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  mvni V0.4H, #66  // MVNI <Vd>.<Th>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  mvni V29.8H, #212, LSL #0  // MVNI <Vd>.<Th>, #<imm8>, LSL #<amounth>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  mvni V23.2S, #242  // MVNI <Vd>.<Ts>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  mvni V2.2S, #238, LSL #8  // MVNI <Vd>.<Ts>, #<imm8>, LSL #<amounts>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  mvni V13.2S, #223, MSL #8  // MVNI <Vd>.<Ts>, #<imm8>, MSL #<amountones>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
  nand P5.B, P2/Z, P0.B, P7.B  // NAND <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  nands P4.B, P1/Z, P7.B, P1.B  // NANDS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  neg W8, W30, LSL #1  // NEG <Wd>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, no flagset   \\ 1 1  1  4.0 V1UnitI
  neg W12, W28, LSL #25  // NEG <Wd>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  neg W15, W10, LSR #26  // NEG <Wd>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  neg X26, X30, LSL #3  // NEG <Xd>, <Xm>, LSL #<amountl>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
  neg X20, X6, LSL #13  // NEG <Xd>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  neg X9, X10, ASR #62  // NEG <Xd>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  neg D11, D23  // NEG <V><d>, <V><n>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  neg V3.8H, V5.8H  // NEG <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  neg Z28.H, P5/M, Z27.H  // NEG <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  negs W5, W24, LSL #2  // NEGS <Wd>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
  negs W12, W13, LSL #15  // NEGS <Wd>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  negs W19, W30, LSR #2  // NEGS <Wd>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  negs X16, X6, LSL #2  // NEGS <Xd>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
  negs X14, X30, LSL #36  // NEGS <Xd>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  negs X0, X6, LSR #26  // NEGS <Xd>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  ngc W10, W8  // NGC <Wd>, <Wm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  ngc X13, X15  // NGC <Xd>, <Xm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  ngcs W10, W17  // NGCS <Wd>, <Wm>  \\ No description \\ No scheduling info
  ngcs X19, X14  // NGCS <Xd>, <Xm>  \\ No description \\ No scheduling info
  nop  // NOP  \\ No description \\ No scheduling info
  nor P2.B, P6/Z, P7.B, P1.B  // NOR <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  nors P0.B, P7/Z, P4.B, P4.B  // NORS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  not P4.B, P1/Z, P3.B  // NOT <Pd>.B, <Pg>/Z, <Pn>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  not Z31.H, P2/M, Z7.H  // NOT <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  not V28.16B, V29.16B  // NOT <Vd>.<T>, <Vn>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  nots P6.B, P4/Z, P6.B  // NOTS <Pd>.B, <Pg>/Z, <Pn>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  orn Z20.B, Z20.B, #0x70  // ORN <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orn Z12.H, Z12.H, #0x60  // ORN <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orn Z10.S, Z10.S, #0x2  // ORN <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orn Z24.D, Z24.D, #0x4  // ORN <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orn P5.B, P2/Z, P6.B, P6.B  // ORN <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  orn W18, W25, W11  // ORN <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  orn W30, W11, W29, LSL #12  // ORN <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  orn X13, X24, X24  // ORN <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  orn X5, X18, X11, LSR #31  // ORN <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  orn V10.8B, V1.8B, V28.8B  // ORN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  orns P7.B, P2/Z, P5.B, P6.B  // ORNS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  orr WSP, W16, #0xe00  // ORR <Wd|WSP>, <Wn>, #<imms>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  orr X15, X18, #0x1e00  // ORR <Xd|SP>, <Xn>, #<immd>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  orr Z26.B, Z26.B, #0x70  // ORR <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orr Z9.H, Z9.H, #0x60  // ORR <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orr Z10.S, Z10.S, #0x2  // ORR <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orr Z29.D, Z29.D, #0x4  // ORR <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orr P4.B, P2/Z, P6.B, P1.B  // ORR <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
  orr W18, W21, W22  // ORR <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  orr W3, W18, W30, ASR #1  // ORR <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  orr X6, X14, X27  // ORR <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  orr X17, X30, X23, LSR #43  // ORR <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
  orr V13.8H, #205  // ORR <Vd>.<Th>, #<imm8>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  orr V2.4H, #245, LSL #0  // ORR <Vd>.<Th>, #<imm8>, LSL #<amounth>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  orr V3.2S, #86  // ORR <Vd>.<T>, #<imm8>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  orr V9.2S, #32, LSL #0  // ORR <Vd>.<T>, #<imm8>, LSL #<amount>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  orr V30.16B, V10.16B, V15.16B  // ORR <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
  orr Z29.H, P1/M, Z29.H, Z12.H  // ORR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orr Z10.D, Z28.D, Z29.D  // ORR <Zd>.D, <Zn>.D, <Zm>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
  orrs P1.B, P6/Z, P3.B, P2.B  // ORRS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
  orv H8, P2, Z12.H  // ORV <V><d>, <Pg>, <Zn>.<T>  \\ Reduction, logical   \\ 4 12  12  0.50 V1UnitV01[4]
  pfalse P2.B  // PFALSE <Pd>.B  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
  pfirst P3.B, P2, P3.B  // PFIRST <Pdn>.B, <Pg>, <Pdn>.B  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
  pmul V5.8B, V4.8B, V4.8B  // PMUL <Vd>.8B, <Vn>.8B, <Vm>.8B  \\ ASIMD multiply/multiply long (8x8) polynomial, D-form  \\ 1 3  3  2.0 V1UnitV01
  pmul V6.16B, V28.16B, V20.16B  // PMUL <Vd>.16B, <Vn>.16B, <Vm>.16B  \\ ASIMD multiply/multiply long (8x8) polynomial, Q-form  \\ 1 3  3  2.0 V1UnitV01
  pnext P0.H, P2, P0.H  // PNEXT <Pdn>.<T>, <Pv>, <Pdn>.<T>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
  prfb #14, P1, [X30]  // PRFB #<imm4>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
  prfb #14, P0, [X28, #3, MUL VL]  // PRFB #<imm4>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
  prfb PLDL1KEEP, P7, [X8]  // PRFB <prfop>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
  prfb PSTL1STRM, P4, [X7, #-31, MUL VL]  // PRFB <prfop>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
  prfb PSTL2STRM, P7, [X22, X15]  // PRFB <prfop>, <Pg>, [<Xn|SP>, <Xm>]  \\ No description \\ No scheduling info
  prfb PLDL3KEEP, P7, [X25, Z21.S, UXTW]  // PRFB <prfop>, <Pg>, [<Xn|SP>, <Zm>.S, <mod>]  \\ No description \\ No scheduling info
  prfb PSTL1STRM, P7, [X11, Z19.D, SXTW]  // PRFB <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ No description \\ No scheduling info
  prfb PSTL2KEEP, P0, [X17, Z24.D]  // PRFB <prfop>, <Pg>, [<Xn|SP>, <Zm>.D]  \\ No description \\ No scheduling info
  prfb #0, P3, [Z11.S]  // PRFB #<imm4>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
  prfb #14, P1, [Z13.S, #17]  // PRFB #<imm4>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
  prfb PLDL3STRM, P2, [Z9.S]  // PRFB <prfop>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
  prfb PLDL3STRM, P4, [Z13.S, #15]  // PRFB <prfop>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
  prfb #6, P5, [Z27.D]  // PRFB #<imm4>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
  prfb #12, P4, [Z21.D, #20]  // PRFB #<imm4>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
  prfb PSTL3STRM, P5, [Z14.D]  // PRFB <prfop>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
  prfb PSTL1KEEP, P6, [Z10.D, #2]  // PRFB <prfop>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
  prfd #6, P6, [X2]  // PRFD #<imm4>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
  prfd #15, P1, [X14, #23, MUL VL]  // PRFD #<imm4>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
  prfd PLDL3STRM, P2, [X0]  // PRFD <prfop>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
  prfd PSTL1STRM, P4, [X0, #-23, MUL VL]  // PRFD <prfop>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
  prfd PLDL2STRM, P1, [X4, X12, LSL #3]  // PRFD <prfop>, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ No description \\ No scheduling info
  prfd PSTL3KEEP, P5, [X8, Z30.S, UXTW #3]  // PRFD <prfop>, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #3]  \\ No description \\ No scheduling info
  prfd PLDL2STRM, P7, [X27, Z4.D, SXTW #3]  // PRFD <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #3]  \\ No description \\ No scheduling info
  prfd PLDL1KEEP, P2, [X9, Z14.D, LSL #3]  // PRFD <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, LSL #3]  \\ No description \\ No scheduling info
  prfd #0, P1, [Z6.S]  // PRFD #<imm4>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
  prfd #6, P7, [Z9.S, #200]  // PRFD #<imm4>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
  prfd PSTL3STRM, P7, [Z0.S]  // PRFD <prfop>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
  prfd PLDL1KEEP, P2, [Z11.S, #232]  // PRFD <prfop>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
  prfd #14, P0, [Z16.D]  // PRFD #<imm4>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
  prfd #10, P1, [Z2.D, #32]  // PRFD #<imm4>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
  prfd PLDL3KEEP, P4, [Z24.D]  // PRFD <prfop>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
  prfd PSTL3STRM, P4, [Z21.D, #96]  // PRFD <prfop>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
  prfh #7, P6, [X5]  // PRFH #<imm4>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
  prfh #3, P3, [X3, #8, MUL VL]  // PRFH #<imm4>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
  prfh PSTL1KEEP, P5, [X26]  // PRFH <prfop>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
  prfh PSTL3STRM, P5, [X10, #4, MUL VL]  // PRFH <prfop>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
  prfh PSTL2KEEP, P2, [X14, X19, LSL #1]  // PRFH <prfop>, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ No description \\ No scheduling info
  prfh PSTL2STRM, P0, [X15, Z30.S, UXTW #1]  // PRFH <prfop>, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ No description \\ No scheduling info
  prfh PSTL3STRM, P2, [X19, Z9.D, SXTW #1]  // PRFH <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ No description \\ No scheduling info
  prfh PSTL2STRM, P2, [X12, Z25.D, LSL #1]  // PRFH <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, LSL #1]  \\ No description \\ No scheduling info
  prfh PSTL2STRM, P0, [Z1.S]  // PRFH <prfop>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
  prfh PSTL3STRM, P5, [Z25.S, #30]  // PRFH <prfop>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
  prfh PLDL2KEEP, P0, [Z24.D]  // PRFH <prfop>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
  prfh PSTL1KEEP, P2, [Z23.D, #58]  // PRFH <prfop>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
  prfm PLDL3KEEP, [X13]  // PRFM <prfop>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  prfm PSTL3KEEP, [X10, #32200]  // PRFM <prfop>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  prfm #0, [X3]  // PRFM #<imm5>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  prfm #26, [X0, #30128]  // PRFM #<imm5>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
  prfm PLDL1STRM, test  // PRFM <prfop>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
  prfm #25, test  // PRFM #<imm5>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
  prfm PLDL1STRM, [X24, X27]  // PRFM <prfop>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  prfm #13, [X21, X1]  // PRFM #<imm5>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
  prfm PSTL2STRM, [X13, W22, UXTW]  // PRFM <prfop>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  prfm #25, [X10, W11, UXTW]  // PRFM #<imm5>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  prfm PLDL1STRM, [X17, W18, SXTW]  // PRFM <prfop>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  prfm #30, [X24, W22, SXTW]  // PRFM #<imm5>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  prfm PSTL3STRM, [X28, X23, SXTX]  // PRFM <prfop>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  prfm #3, [X28, X4, SXTX]  // PRFM #<imm5>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
  prfm PSTL3KEEP, [X6, W30, UXTW #3]  // PRFM <prfop>, [<Xn|SP>, <Wm>, UXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  prfm #16, [X19, W4, UXTW #3]  // PRFM #<imm5>, [<Xn|SP>, <Wm>, UXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  prfm PSTL1KEEP, [X29, W18, SXTW #3]  // PRFM <prfop>, [<Xn|SP>, <Wm>, SXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  prfm #18, [X20, W29, SXTW #3]  // PRFM #<imm5>, [<Xn|SP>, <Wm>, SXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  prfm PSTL1STRM, [X17, X15, SXTX #3]  // PRFM <prfop>, [<Xn|SP>, <Xm>, SXTX #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  prfm #21, [X19, X3, SXTX #3]  // PRFM #<imm5>, [<Xn|SP>, <Xm>, SXTX #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  prfm PSTL3KEEP, [X23, X16, LSL #3]  // PRFM <prfop>, [<Xn|SP>, <Xm>, LSL #3]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  prfm #23, [X13, X26, LSL #3]  // PRFM #<imm5>, [<Xn|SP>, <Xm>, LSL #3]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
  prfum PSTL2STRM, [X16]  // PRFUM <prfop>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  prfum PLDL3STRM, [X0, #-240]  // PRFUM <prfop>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  prfum #16, [X10]  // PRFUM #<imm5>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  prfum #13, [X30, #124]  // PRFUM #<imm5>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
  prfw #11, P6, [X22]  // PRFW #<imm4>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
  prfw #10, P4, [X30, #21, MUL VL]  // PRFW #<imm4>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
  prfw PLDL2KEEP, P3, [X17]  // PRFW <prfop>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
  prfw PSTL2KEEP, P0, [X19, #28, MUL VL]  // PRFW <prfop>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
  prfw PSTL3STRM, P1, [X24, X17, LSL #2]  // PRFW <prfop>, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ No description \\ No scheduling info
  prfw PLDL1KEEP, P2, [X25, Z19.S, UXTW #2]  // PRFW <prfop>, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #2]  \\ No description \\ No scheduling info
  prfw PSTL3KEEP, P4, [X20, Z5.D, SXTW #2]  // PRFW <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ No description \\ No scheduling info
  prfw PLDL3KEEP, P7, [X29, Z0.D, LSL #2]  // PRFW <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, LSL #2]  \\ No description \\ No scheduling info
  prfw #3, P1, [Z21.S]  // PRFW #<imm4>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
  prfw #11, P7, [Z30.S, #48]  // PRFW #<imm4>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
  prfw PLDL3KEEP, P7, [Z6.S]  // PRFW <prfop>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
  prfw PLDL1STRM, P3, [Z17.S, #20]  // PRFW <prfop>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
  prfw #5, P4, [Z22.D]  // PRFW #<imm4>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
  prfw #8, P7, [Z29.D, #76]  // PRFW #<imm4>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
  prfw PLDL3KEEP, P5, [Z17.D]  // PRFW <prfop>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
  prfw PLDL1STRM, P1, [Z16.D, #76]  // PRFW <prfop>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
  psb CSYNC  // PSB CSYNC  \\ No description \\ No scheduling info
  pssbb  // PSSBB  \\ No description \\ No scheduling info
  ptest P5, P7.B  // PTEST <Pg>, <Pn>.B  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
  ptrue P6.H  // PTRUE <Pd>.<T>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
  ptrue P5.S, VL2  // PTRUE <Pd>.<T>, <pattern>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
  ptrue P4.D  // PTRUE <Pd>.<T>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
  ptrue P1.H, #28  // PTRUE <Pd>.<T>, #<uimm5>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
  ptrues P1.H  // PTRUES <Pd>.<T>  \\ Predicate set/initialize, set flags  \\ 2 3  3  0.50 V1UnitM0[2]
  ptrues P7.B, VL32  // PTRUES <Pd>.<T>, <pattern>  \\ Predicate set/initialize, set flags  \\ 2 3  3  0.50 V1UnitM0[2]
  ptrues P3.D  // PTRUES <Pd>.<T>  \\ Predicate set/initialize, set flags  \\ 2 3  3  0.50 V1UnitM0[2]
  ptrues P2.S, #26  // PTRUES <Pd>.<T>, #<uimm5>  \\ Predicate set/initialize, set flags  \\ 2 3  3  0.50 V1UnitM0[2]
  punpkhi P2.H, P6.B  // PUNPKHI <Pd>.H, <Pn>.B  \\ Predicate unpack and widen  \\ 1 2  2  1.0 V1UnitM0
  punpklo P3.H, P5.B  // PUNPKLO <Pd>.H, <Pn>.B  \\ Predicate unpack and widen  \\ 1 2  2  1.0 V1UnitM0
  raddhn V31.4H, V30.4S, V17.4S  // RADDHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  raddhn2 V10.4S, V26.2D, V8.2D  // RADDHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  rbit V10.8B, V26.8B  // RBIT <Vd>.<T>, <Vn>.<T>  \\ ASIMD bit reverse  \\ 1 2  2  4.0 V1UnitV
  rbit W18, W10  // RBIT <Wd>, <Wn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
  rbit X17, X10  // RBIT <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
  rbit Z6.B, P6/M, Z2.B  // RBIT <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Count/reverse bits  \\ 1 2  2  2.0 V1UnitV01
  rdffr P5.B, P0/Z  // RDFFR <Pd>.B, <Pg>/Z  \\ Read first fault register, predicated  \\ 2 3  3  0.50 V1UnitM0[2]
  rdffr P0.B  // RDFFR <Pd>.B  \\ Read first fault register, unpredicated  \\ 1 2  2  1.0 V1UnitM0
  rdffrs P2.B, P5/Z  // RDFFRS <Pd>.B, <Pg>/Z  \\ Read first fault register and set flags  \\ 1 4  4  2.00 V1UnitM[7]
  rdvl X17, #4  // RDVL <Xd>, #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  ret  // RET  \\ Branch, register  \\ 1 1  1  2.0 V1UnitB
  ret X24  // RET {<Xn>}  \\ Branch, register  \\ 1 1  1  2.0 V1UnitB
  rev P2.H, P1.H  // REV <Pd>.<T>, <Pn>.<T>  \\ Predicate reverse  \\ 1 2  2  1.0 V1UnitM0
  rev Z3.H, Z6.H  // REV <Zd>.<T>, <Zn>.<T>  \\ Reverse, vector  \\ 1 2  2  2.0 V1UnitV01
  rev W0, W24  // REV <Wd>, <Wn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
  rev X3, X26  // REV <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
  rev16 V23.16B, V4.16B  // REV16 <Vd>.<T>, <Vn>.<T>  \\ ASIMD reverse  \\ 1 2  2  4.0 V1UnitV
  rev16 W18, W9  // REV16 <Wd>, <Wn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
  rev16 X17, X30  // REV16 <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
  rev32 V31.4H, V30.4H  // REV32 <Vd>.<T>, <Vn>.<T>  \\ ASIMD reverse  \\ 1 2  2  4.0 V1UnitV
  rev32 X4, X29  // REV32 <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
  rev64 X16, X12  // REV64 <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
  rev64 V5.4S, V10.4S  // REV64 <Vd>.<T>, <Vn>.<T>  \\ ASIMD reverse  \\ 1 2  2  4.0 V1UnitV
  revb Z25.H, P5/M, Z17.H  // REVB <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Reverse, vector  \\ 1 2  2  2.0 V1UnitV01
  revh Z29.D, P0/M, Z6.D  // REVH <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Reverse, vector  \\ 1 2  2  2.0 V1UnitV01
  revw Z15.D, P3/M, Z4.D  // REVW <Zd>.D, <Pg>/M, <Zn>.D  \\ Reverse, vector  \\ 1 2  2  2.0 V1UnitV01
  ror W1, W3, #31  // ROR <Wd>, <Ws>, #<shifts>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  ror X30, X25, #49  // ROR <Xd>, <Xs>, #<shiftd>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
  ror W4, W21, W1  // ROR <Wd>, <Wn>, <Wm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
  ror X11, X5, X20  // ROR <Xd>, <Xn>, <Xm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
  rorv W8, W28, W22  // RORV <Wd>, <Wn>, <Wm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
  rorv X0, X12, X0  // RORV <Xd>, <Xn>, <Xm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
  rshrn V31.8B, V12.8H, #5  // RSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ No description \\ No scheduling info
  rshrn V3.4H, V24.4S, #8  // RSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ No description \\ No scheduling info
  rshrn V1.2S, V5.2D, #29  // RSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ No description \\ No scheduling info
  rshrn2 V4.16B, V8.8H, #2  // RSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ No description \\ No scheduling info
  rshrn2 V17.8H, V20.4S, #1  // RSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ No description \\ No scheduling info
  rshrn2 V15.4S, V8.2D, #3  // RSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ No description \\ No scheduling info
  rsubhn V18.8B, V28.8H, V13.8H  // RSUBHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  rsubhn2 V10.4S, V18.2D, V15.2D  // RSUBHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  saba V26.8B, V4.8B, V22.8B  // SABA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD absolute diff accum  \\ 1 4 1 2.0 V1UnitV13
  sabal V23.2D, V16.2S, V7.2S  // SABAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff accum long  \\ 1 4 1 2.0 V1UnitV13
  sabal2 V3.2D, V17.4S, V12.4S  // SABAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff accum long  \\ 1 4 1 2.0 V1UnitV13
  sabd V21.8H, V13.8H, V19.8H  // SABD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD absolute diff  \\ 1 2  2  4.0 V1UnitV
  sabd Z6.H, P2/M, Z6.H, Z28.H  // SABD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sabdl V8.8H, V11.8B, V17.8B  // SABDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff long  \\ 1 2  2  4.0 V1UnitV
  sabdl2 V29.2D, V8.4S, V14.4S  // SABDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff long  \\ 1 2  2  4.0 V1UnitV
  sadalp V23.4H, V6.8B  // SADALP <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD pairwise add and accumulate long  \\ 1 4 1 2.0 V1UnitV13
  saddl V23.8H, V14.8B, V25.8B  // SADDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  saddl2 V5.2D, V6.4S, V8.4S  // SADDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  saddlp V21.4H, V4.8B  // SADDLP <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD arith, pair-wise  \\ 1 2  2  4.0 V1UnitV
  saddlv H27, V23.8B  // SADDLV H<d>, <Vn>.8B  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  saddlv H20, V1.16B  // SADDLV H<d>, <Vn>.16B  \\ ASIMD arith, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
  saddlv S23, V10.4H  // SADDLV S<d>, <Vn>.4H  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  saddlv S9, V28.8H  // SADDLV S<d>, <Vn>.8H  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  saddlv D12, V9.4S  // SADDLV D<d>, <Vn>.4S  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  saddv D31, P2, Z30.B  // SADDV <Dd>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
  saddv D21, P7, Z0.H  // SADDV <Dd>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
  saddv D25, P2, Z4.S  // SADDV <Dd>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
  saddw V17.2D, V12.2D, V26.2S  // SADDW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  saddw2 V14.4S, V10.4S, V31.8H  // SADDW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  sbc W0, W6, W1  // SBC <Wd>, <Wn>, <Wm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  sbc X28, X29, X16  // SBC <Xd>, <Xn>, <Xm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  sbcs W15, W7, W17  // SBCS <Wd>, <Wn>, <Wm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  sbcs X16, X21, X15  // SBCS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  sbfiz W22, W6, #14, #13  // SBFIZ <Wd>, <Wn>, #<lsbs>, #<widths>  \\ No description \\ No scheduling info
  sbfiz X6, X25, #20, #16  // SBFIZ <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ No description \\ No scheduling info
  sbfm W25, W20, #30, #8  // SBFM <Wd>, <Wn>, #<immrs>, #<immss>  \\ Bitfield move, basic  \\ 1 1  1  4.0 V1UnitI
  sbfm X5, X28, #2, #40  // SBFM <Xd>, <Xn>, #<immrd>, #<immsd>  \\ Bitfield move, basic  \\ 1 1  1  4.0 V1UnitI
  sbfx W25, W10, #8, #7  // SBFX <Wd>, <Wn>, #<lsbs>, #<widths>  \\ Bit field extract  \\ 1 1  1  4.0 V1UnitI
  sbfx X23, X12, #53, #4  // SBFX <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ Bit field extract  \\ 1 1  1  4.0 V1UnitI
  scvtf H19, W19, #31  // SCVTF <Hd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf S2, W9, #21  // SCVTF <Sd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf D4, W1, #15  // SCVTF <Dd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf H30, X18, #63  // SCVTF <Hd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf S23, X16, #45  // SCVTF <Sd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf D30, X21, #59  // SCVTF <Dd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf H3, W5  // SCVTF <Hd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf S25, W17  // SCVTF <Sd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf D15, W30  // SCVTF <Dd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf H28, X22  // SCVTF <Hd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf S2, X7  // SCVTF <Sd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf D11, X0  // SCVTF <Dd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  scvtf H29, H27, #11  // SCVTF H<d>, H<n>, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
  scvtf S20, S5, #1  // SCVTF S<d>, S<n>, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  scvtf D23, D0, #59  // SCVTF D<d>, D<n>, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  scvtf V3.4H, V29.4H, #3  // SCVTF <Vd>.4H, <Vn>.4H, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  scvtf V29.8H, V23.8H, #13  // SCVTF <Vd>.8H, <Vn>.8H, #<hfbits>  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  scvtf V1.2S, V3.2S, #1  // SCVTF <Vd>.2S, <Vn>.2S, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  scvtf V30.4S, V5.4S, #16  // SCVTF <Vd>.4S, <Vn>.4S, #<sfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  scvtf V26.2D, V4.2D, #24  // SCVTF <Vd>.2D, <Vn>.2D, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  scvtf H7, H4  // SCVTF <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
  scvtf S19, S4  // SCVTF S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  scvtf D12, D29  // SCVTF D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  scvtf V5.4H, V10.4H  // SCVTF <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  scvtf V8.8H, V16.8H  // SCVTF <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  scvtf V18.2S, V2.2S  // SCVTF <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  scvtf V14.4S, V23.4S  // SCVTF <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  scvtf V24.2D, V21.2D  // SCVTF <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  scvtf Z8.H, P1/M, Z2.H  // SCVTF <Zd>.H, <Pg>/M, <Zn>.H  \\ Convert to floating point, 16b to half  \\ 4 6  6  0.25 V1UnitV0[4]
  scvtf Z8.H, P4/M, Z28.S  // SCVTF <Zd>.H, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 2 4  4  0.50 V1UnitV0[2]
  scvtf Z4.S, P4/M, Z29.S  // SCVTF <Zd>.S, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 2 4  4  0.50 V1UnitV0[2]
  scvtf Z21.D, P3/M, Z22.S  // SCVTF <Zd>.D, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 1 3  3  1.00 V1UnitV0[2]
  scvtf Z23.H, P5/M, Z1.D  // SCVTF <Zd>.H, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
  scvtf Z23.S, P2/M, Z11.D  // SCVTF <Zd>.S, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
  scvtf Z22.D, P5/M, Z15.D  // SCVTF <Zd>.D, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
  sdiv W11, W4, W18  // SDIV <Wd>, <Wn>, <Wm>  \\ Divide, W-form  \\ 1 12  12  0.20 V1UnitM0[13]
  sdiv X1, X30, X15  // SDIV <Xd>, <Xn>, <Xm>  \\ Divide, X-form  \\ 1 20  20  0.20 V1UnitM0[21]
  sdiv Z28.S, P2/M, Z28.S, Z3.S  // SDIV <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Divides, 32 bit   \\ 1 12  12  0.14 V1UnitV0[12]
  sdiv Z9.D, P3/M, Z9.D, Z31.D  // SDIV <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Divides, 64 bit  \\ 1 20  20  0.14 V1UnitV0[21]
  sdivr Z6.S, P2/M, Z6.S, Z0.S  // SDIVR <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Divides, 32 bit   \\ 1 12  12  0.14 V1UnitV0[12]
  sdivr Z28.D, P3/M, Z28.D, Z10.D  // SDIVR <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Divides, 64 bit  \\ 1 20  20  0.14 V1UnitV0[21]
  sdot Z7.S, Z7.B, Z5.B[2]  // SDOT <Zda>.S, <Zn>.B, <Zmb>.B[<imms>]  \\ Dot product, 8 bit  \\ 1 3 1 2.0 V1UnitV01
  sdot Z24.D, Z28.H, Z10.H[0]  // SDOT <Zda>.D, <Zn>.H, <Zmh>.H[<immd>]  \\ Dot product, 16 bit  \\ 1 4 1 1.0 V1UnitV0
  sdot Z28.S, Z23.B, Z1.B  // SDOT <Zda>.S, <Zn>.B, <Zm>.B  \\ Dot product, 8 bit  \\ 1 3 1 2.0 V1UnitV01
  sdot Z30.D, Z14.H, Z13.H  // SDOT <Zda>.D, <Zn>.H, <Zm>.H  \\ Dot product, 16 bit  \\ 1 4 1 1.0 V1UnitV0
  sdot V7.2S, V3.8B, V9.4B[2]  // SDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.4B[<indexs>]  \\ ASIMD dot product  \\ 1 3 1 4.0 V1UnitV
  sdot V7.2S, V2.8B, V29.8B  // SDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD dot product  \\ 1 3 1 4.0 V1UnitV
  sel P3.B, P5, P7.B, P0.B  // SEL <Pd>.B, <Pg>, <Pn>.B, <Pm>.B  \\ Predicate select  \\ 1 1  1  1.0 V1UnitM0
  sel Z29.D, P2, Z30.D, Z2.D  // SEL <Zd>.<T>, <Pv>, <Zn>.<T>, <Zm>.<T>  \\ Select, vector form  \\ 1 2  2  2.0 V1UnitV01
  setffr  // SETFFR  \\ Set first fault register  \\ 1 2  2  1.0 V1UnitM0
  sev  // SEV  \\ No description \\ No scheduling info
  sevl  // SEVL  \\ No description \\ No scheduling info
  shadd V11.2S, V1.2S, V31.2S  // SHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  shl D21, D28, #2  // SHL <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, basic  \\ 1 2  2  4.00 V1UnitV13
  shl V21.16B, V31.16B, #6  // SHL <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shl V10.8H, V22.8H, #12  // SHL <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shl V4.4S, V27.4S, #30  // SHL <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shl V1.2D, V23.2D, #22  // SHL <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shll V9.8H, V26.8B, #8  // SHLL <Vd>.8H, <Vn>.8B, #8  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shll V11.4S, V24.4H, #16  // SHLL <Vd>.4S, <Vn>.4H, #16  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shll V13.2D, V15.2S, #32  // SHLL <Vd>.2D, <Vn>.2S, #32  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shll2 V7.8H, V3.16B, #8  // SHLL2 <Vd>.8H, <Vn>.16B, #8  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shll2 V14.4S, V31.8H, #16  // SHLL2 <Vd>.4S, <Vn>.8H, #16  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shll2 V17.2D, V9.4S, #32  // SHLL2 <Vd>.2D, <Vn>.4S, #32  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shrn V11.8B, V29.8H, #8  // SHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shrn V30.4H, V3.4S, #14  // SHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shrn V15.2S, V0.2D, #28  // SHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shrn2 V23.16B, V18.8H, #3  // SHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shrn2 V13.8H, V19.4S, #7  // SHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shrn2 V25.4S, V7.2D, #7  // SHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  shsub V19.2S, V30.2S, V1.2S  // SHSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  sli D23, D23, #14  // SLI <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  4.00 V1UnitV13
  sli V22.16B, V22.16B, #0  // SLI <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
  sli V9.8H, V27.8H, #4  // SLI <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
  sli V7.2S, V22.2S, #22  // SLI <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
  sli V6.2D, V26.2D, #11  // SLI <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
  smaddl X20, W30, W19, X18  // SMADDL <Xd>, <Wn>, <Wm>, <Xa>  \\ Multiply accumulate long  \\ 1 2 1 1.0 V1UnitM0
  smax Z20.D, Z20.D, #-4  // SMAX <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  smax Z4.S, P3/M, Z4.S, Z17.S  // SMAX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  smax V3.4H, V3.4H, V1.4H  // SMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
  smaxp V0.8B, V24.8B, V6.8B  // SMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
  smaxv B5, V26.8B  // SMAXV B<d>, <Vn>.8B  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  smaxv B6, V16.16B  // SMAXV B<d>, <Vn>.16B  \\ ASIMD max/min, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
  smaxv H10, V20.4H  // SMAXV H<d>, <Vn>.4H  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  smaxv H27, V31.8H  // SMAXV H<d>, <Vn>.8H  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  smaxv S16, V28.4S  // SMAXV S<d>, <Vn>.4S  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  smaxv B4, P6, Z20.B  // SMAXV B<d>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
  smaxv H8, P0, Z18.H  // SMAXV H<d>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
  smaxv S21, P4, Z6.S  // SMAXV S<d>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
  smaxv D24, P1, Z16.D  // SMAXV D<d>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
  smc #49206  // SMC #<imm>  \\ No description \\ No scheduling info
  smin Z31.S, Z31.S, #57  // SMIN <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  smin Z12.D, P4/M, Z12.D, Z29.D  // SMIN <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  smin V24.16B, V30.16B, V26.16B  // SMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
  sminp V9.4S, V0.4S, V6.4S  // SMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
  sminv B22, V14.8B  // SMINV B<d>, <Vn>.8B  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  sminv B2, V5.16B  // SMINV B<d>, <Vn>.16B  \\ ASIMD max/min, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
  sminv H1, V11.4H  // SMINV H<d>, <Vn>.4H  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  sminv H20, V5.8H  // SMINV H<d>, <Vn>.8H  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  sminv S26, V28.4S  // SMINV S<d>, <Vn>.4S  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  sminv B22, P4, Z31.B  // SMINV B<d>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
  sminv H8, P1, Z10.H  // SMINV H<d>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
  sminv S23, P6, Z22.S  // SMINV S<d>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
  sminv D19, P3, Z24.D  // SMINV D<d>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
  smlal V0.4S, V31.4H, V6.H[2]  // SMLAL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlal V12.2D, V10.2S, V1.S[1]  // SMLAL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlal2 V31.4S, V12.8H, V4.H[2]  // SMLAL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlal2 V0.2D, V13.4S, V5.S[1]  // SMLAL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlal V23.8H, V10.8B, V0.8B  // SMLAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlal2 V20.2D, V13.4S, V12.4S  // SMLAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlsl V17.4S, V0.4H, V12.H[2]  // SMLSL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlsl V14.2D, V21.2S, V0.S[0]  // SMLSL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlsl2 V14.4S, V26.8H, V12.H[1]  // SMLSL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlsl2 V26.2D, V30.4S, V4.S[2]  // SMLSL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlsl V2.2D, V28.2S, V22.2S  // SMLSL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smlsl2 V31.2D, V22.4S, V18.4S  // SMLSL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  smmla V23.4S, V16.16B, V0.16B  // SMMLA <Vd>.4S, <Vn>.16B, <Vm>.16B  \\ ASIMD matrix multiply-accumulate  \\ 1 3 1 4.0 V1UnitV
  smnegl X26, W22, W4  // SMNEGL <Xd>, <Wn>, <Wm>  \\ Multiply long  \\ 1 2  2  2.0 V1UnitM
  smov W21, V28.B[0]  // SMOV <Wd>, <Vn>.B[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smov W27, V30.B[7]  // SMOV <Wd>, <Vn>.B[<indexb>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smov W17, V22.H[0]  // SMOV <Wd>, <Vn>.H[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smov W1, V12.H[2]  // SMOV <Wd>, <Vn>.H[<indexh>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smov X4, V10.B[0]  // SMOV <Xd>, <Vn>.B[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smov X4, V5.B[9]  // SMOV <Xd>, <Vn>.B[<indexb>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smov X17, V22.H[0]  // SMOV <Xd>, <Vn>.H[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smov X14, V11.H[5]  // SMOV <Xd>, <Vn>.H[<indexh>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smov X24, V3.S[0]  // SMOV <Xd>, <Vn>.S[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smov X21, V8.S[3]  // SMOV <Xd>, <Vn>.S[<indexs>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  smsubl X27, W4, W1, X22  // SMSUBL <Xd>, <Wn>, <Wm>, <Xa>  \\ Multiply accumulate long  \\ 1 2 1 1.0 V1UnitM0
  smulh Z11.B, P2/M, Z11.B, Z30.B  // SMULH <Zdn>.B, <Pg>/M, <Zdn>.B, <Zm>.B  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  smulh Z6.H, P0/M, Z6.H, Z8.H  // SMULH <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  smulh Z26.S, P0/M, Z26.S, Z4.S  // SMULH <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  smulh Z29.D, P0/M, Z29.D, Z18.D  // SMULH <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Multiply, D element size  \\ 2 5  5  0.50 V1UnitV0[2]
  smulh X3, X21, X6  // SMULH <Xd>, <Xn>, <Xm>  \\ Multiply high  \\ 1 3  3  2.0 V1UnitM
  smull X25, W18, W28  // SMULL <Xd>, <Wn>, <Wm>  \\ Multiply long  \\ 1 2  2  2.0 V1UnitM
  smull V16.4S, V1.4H, V9.H[5]  // SMULL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  smull V7.2D, V16.2S, V7.S[2]  // SMULL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  smull2 V26.4S, V18.8H, V3.H[1]  // SMULL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  smull2 V4.2D, V25.4S, V6.S[1]  // SMULL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  smull V22.4S, V0.4H, V27.4H  // SMULL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  smull2 V13.2D, V25.4S, V30.4S  // SMULL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  sqabs B7, B11  // SQABS <V><d>, <V><n>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  sqabs V27.2S, V1.2S  // SQABS <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  sqadd Z10.B, Z10.B, #241  // SQADD <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sqadd Z7.S, Z7.S, #12  // SQADD <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sqadd Z3.S, Z3.S, #178, LSL #8  // SQADD <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sqadd Z1.D, Z24.D, Z25.D  // SQADD <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sqadd B8, B20, B2  // SQADD <V><d>, <V><n>, <V><m>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  sqadd V14.4S, V15.4S, V18.4S  // SQADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  sqdecb X30, W30  // SQDECB <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecb X14, W14, POW2  // SQDECB <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecb X15, W15, VL6, MUL #11  // SQDECB <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecb X21  // SQDECB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecb X25, VL4  // SQDECB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecb X12, VL32, MUL #2  // SQDECB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecd X5, W5  // SQDECD <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecd X10, W10, POW2  // SQDECD <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecd X8, W8, ALL, MUL #3  // SQDECD <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecd X23  // SQDECD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecd X0, VL6  // SQDECD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecd X17, VL64, MUL #14  // SQDECD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecd Z17.D  // SQDECD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqdecd Z3.D, VL7  // SQDECD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqdecd Z0.D, VL64, MUL #14  // SQDECD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqdech X2, W2  // SQDECH <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdech X22, W22, MUL3  // SQDECH <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdech X19, W19, VL5, MUL #2  // SQDECH <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdech X11  // SQDECH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdech X7, VL5  // SQDECH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdech X16, POW2, MUL #15  // SQDECH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdech Z4.H  // SQDECH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqdech Z0.H, VL1  // SQDECH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqdech Z27.H, VL7  // SQDECH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqdecp X14, P3.S, W14  // SQDECP <Xdn>, <Pm>.<T>, <Wdn>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  sqdecp X24, P2.B  // SQDECP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  sqdecp Z6.S, P7.S  // SQDECP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
  sqdecw X24, W24  // SQDECW <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecw X8, W8, POW2  // SQDECW <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecw X26, W26, VL256, MUL #9  // SQDECW <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecw X17  // SQDECW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecw X23, VL64  // SQDECW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecw X20, MUL3, MUL #2  // SQDECW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqdecw Z9.S  // SQDECW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqdecw Z28.S, POW2  // SQDECW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqdecw Z7.S, VL7, MUL #16  // SQDECW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqdmlal S19, H27, V14.H[7]  // SQDMLAL S<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlal D1, S16, V3.S[2]  // SQDMLAL D<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlal V7.4S, V30.4H, V0.H[1]  // SQDMLAL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlal V11.2D, V17.2S, V5.S[3]  // SQDMLAL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlal2 V24.4S, V26.8H, V10.H[2]  // SQDMLAL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlal2 V29.2D, V28.4S, V2.S[1]  // SQDMLAL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlal S25, H21, H7  // SQDMLAL <Va><d>, <Vb><n>, <Vb><m>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlal V2.4S, V11.4H, V21.4H  // SQDMLAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlal2 V8.4S, V2.8H, V5.8H  // SQDMLAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlsl S28, H2, V0.H[4]  // SQDMLSL S<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlsl D1, S13, V0.S[2]  // SQDMLSL D<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlsl V6.4S, V15.4H, V0.H[7]  // SQDMLSL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlsl V9.2D, V19.2S, V2.S[2]  // SQDMLSL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlsl2 V23.4S, V6.8H, V7.H[6]  // SQDMLSL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlsl2 V20.2D, V26.4S, V4.S[2]  // SQDMLSL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlsl D9, S4, S30  // SQDMLSL <Va><d>, <Vb><n>, <Vb><m>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlsl V28.2D, V28.2S, V6.2S  // SQDMLSL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmlsl2 V30.4S, V27.8H, V31.8H  // SQDMLSL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
  sqdmulh H24, H28, V7.H[3]  // SQDMULH H<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqdmulh S11, S24, V4.S[3]  // SQDMULH S<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqdmulh V20.8H, V1.8H, V13.H[4]  // SQDMULH <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqdmulh V13.2S, V26.2S, V5.S[3]  // SQDMULH <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqdmulh H24, H1, H30  // SQDMULH <V><d>, <V><n>, <V><m>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqdmulh V8.4S, V4.4S, V11.4S  // SQDMULH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqdmull S21, H1, V4.H[5]  // SQDMULL S<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  sqdmull D11, S10, V4.S[2]  // SQDMULL D<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  sqdmull V29.4S, V4.4H, V9.H[7]  // SQDMULL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  sqdmull V0.2D, V4.2S, V6.S[1]  // SQDMULL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  sqdmull2 V25.4S, V15.8H, V14.H[0]  // SQDMULL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  sqdmull2 V13.2D, V7.4S, V0.S[3]  // SQDMULL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  sqdmull D15, S7, S30  // SQDMULL <Va><d>, <Vb><n>, <Vb><m>  \\ ASIMD multiply long  \\ 1 2  2  4.00 V1UnitV02
  sqdmull V27.2D, V16.2S, V0.2S  // SQDMULL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  sqdmull2 V30.2D, V9.4S, V27.4S  // SQDMULL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  sqincb X13, W13  // SQINCB <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincb X12, W12, POW2  // SQINCB <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincb X12, W12, VL4, MUL #4  // SQINCB <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincb X11  // SQINCB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincb X25, VL32  // SQINCB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincb X8, VL32, MUL #4  // SQINCB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincd X27, W27  // SQINCD <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincd X29, W29, VL2  // SQINCD <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincd X3, W3, VL64, MUL #5  // SQINCD <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincd X29  // SQINCD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincd X4, VL32  // SQINCD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincd X6, VL2, MUL #7  // SQINCD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincd Z8.D  // SQINCD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqincd Z15.D, MUL3  // SQINCD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqincd Z9.D, VL256, MUL #2  // SQINCD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqinch X26, W26  // SQINCH <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqinch X10, W10, VL6  // SQINCH <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqinch X7, W7, VL4, MUL #10  // SQINCH <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqinch X3  // SQINCH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqinch X0, MUL4  // SQINCH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqinch X8, VL32, MUL #5  // SQINCH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqinch Z17.H  // SQINCH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqinch Z14.H  // SQINCH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqinch Z31.H, MUL3, MUL #14  // SQINCH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqincp X18, P3.H, W18  // SQINCP <Xdn>, <Pm>.<T>, <Wdn>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  sqincp X25, P4.S  // SQINCP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  sqincp Z27.D, P4.D  // SQINCP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
  sqincw X30, W30  // SQINCW <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincw X20, W20, VL256  // SQINCW <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincw X5, W5, VL8  // SQINCW <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincw X5  // SQINCW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincw X20, MUL4  // SQINCW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincw X17, VL7, MUL #15  // SQINCW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  sqincw Z30.S  // SQINCW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqincw Z3.S, VL64  // SQINCW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqincw Z11.S, VL4, MUL #3  // SQINCW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  sqneg B1, B22  // SQNEG <V><d>, <V><n>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  sqneg V10.2D, V26.2D  // SQNEG <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  sqrdmlah H9, H0, V12.H[2]  // SQRDMLAH H<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlah S16, S25, V0.S[3]  // SQRDMLAH S<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlah V26.4H, V1.4H, V15.H[4]  // SQRDMLAH <Vd>.4H, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlah V4.2S, V28.2S, V2.S[2]  // SQRDMLAH <Vd>.2S, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlah S24, S24, S23  // SQRDMLAH <V><d>, <V><n>, <V><m>  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlah V30.4H, V14.4H, V0.4H  // SQRDMLAH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlsh H23, H12, V8.H[1]  // SQRDMLSH H<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlsh S9, S14, V1.S[1]  // SQRDMLSH S<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlsh V5.4H, V2.4H, V12.H[3]  // SQRDMLSH <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlsh V5.8H, V4.8H, V6.H[3]  // SQRDMLSH <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlsh V26.2S, V9.2S, V1.S[3]  // SQRDMLSH <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlsh V20.2S, V3.2S, V3.S[0]  // SQRDMLSH <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlsh S5, S21, S11  // SQRDMLSH <V><d>, <V><n>, <V><m>  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmlsh V28.2S, V27.2S, V9.2S  // SQRDMLSH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
  sqrdmulh H11, H0, V10.H[0]  // SQRDMULH H<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqrdmulh S2, S22, V5.S[2]  // SQRDMULH S<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqrdmulh V13.8H, V4.8H, V3.H[6]  // SQRDMULH <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqrdmulh V16.2S, V24.2S, V5.S[3]  // SQRDMULH <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqrdmulh H11, H15, H6  // SQRDMULH <V><d>, <V><n>, <V><m>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqrdmulh V20.2S, V28.2S, V27.2S  // SQRDMULH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
  sqrshl B15, B18, B0  // SQRSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshl V30.8B, V9.8B, V6.8B  // SQRSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrn B10, H14, #4  // SQRSHRN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqrshrn H9, S0, #8  // SQRSHRN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqrshrn S28, D26, #20  // SQRSHRN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqrshrn V10.8B, V18.8H, #8  // SQRSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrn V1.4H, V4.4S, #16  // SQRSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrn V13.2S, V20.2D, #1  // SQRSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrn2 V13.16B, V4.8H, #1  // SQRSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrn2 V25.8H, V5.4S, #12  // SQRSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrn2 V0.4S, V7.2D, #1  // SQRSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrun B20, H27, #6  // SQRSHRUN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqrshrun H25, S1, #7  // SQRSHRUN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqrshrun S29, D30, #7  // SQRSHRUN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqrshrun V30.8B, V7.8H, #6  // SQRSHRUN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrun V2.4H, V14.4S, #6  // SQRSHRUN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrun V0.2S, V15.2D, #10  // SQRSHRUN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrun2 V13.16B, V13.8H, #5  // SQRSHRUN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrun2 V19.8H, V18.4S, #1  // SQRSHRUN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqrshrun2 V25.4S, V15.2D, #4  // SQRSHRUN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl B23, B18, #3  // SQSHL B<d>, B<n>, #<shiftb>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl H11, H1, #0  // SQSHL H<d>, H<n>, #<shifth>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl S30, S29, #1  // SQSHL S<d>, S<n>, #<shifts>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl D16, D0, #25  // SQSHL D<d>, D<n>, #<shiftd>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl V26.8B, V2.8B, #7  // SQSHL <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl V16.8H, V29.8H, #4  // SQSHL <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl V5.2S, V29.2S, #22  // SQSHL <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl V31.2D, V7.2D, #35  // SQSHL <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl D17, D10, D23  // SQSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshl V23.2D, V24.2D, V11.2D  // SQSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshlu B14, B15, #0  // SQSHLU B<d>, B<n>, #<shiftb>  \\ No description \\ No scheduling info
  sqshlu H7, H6, #5  // SQSHLU H<d>, H<n>, #<shifth>  \\ No description \\ No scheduling info
  sqshlu S27, S28, #19  // SQSHLU S<d>, S<n>, #<shifts>  \\ No description \\ No scheduling info
  sqshlu D3, D30, #1  // SQSHLU D<d>, D<n>, #<shiftd>  \\ No description \\ No scheduling info
  sqshlu V15.8B, V28.8B, #1  // SQSHLU <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ No description \\ No scheduling info
  sqshlu V16.8H, V24.8H, #0  // SQSHLU <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ No description \\ No scheduling info
  sqshlu V15.4S, V3.4S, #19  // SQSHLU <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ No description \\ No scheduling info
  sqshlu V16.2D, V0.2D, #23  // SQSHLU <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ No description \\ No scheduling info
  sqshrn B3, H26, #7  // SQSHRN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrn H1, S27, #4  // SQSHRN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrn S1, D25, #19  // SQSHRN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrn V18.8B, V29.8H, #2  // SQSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshrn V7.4H, V19.4S, #7  // SQSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshrn V7.2S, V21.2D, #11  // SQSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshrn2 V6.16B, V1.8H, #5  // SQSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshrn2 V15.8H, V19.4S, #5  // SQSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshrn2 V16.4S, V7.2D, #13  // SQSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  sqshrun B4, H0, #6  // SQSHRUN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrun H4, S4, #6  // SQSHRUN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrun S7, D27, #32  // SQSHRUN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrun V7.8B, V6.8H, #3  // SQSHRUN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrun V14.4H, V5.4S, #4  // SQSHRUN <Vd>.4H, <Vn>.4S, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrun V10.2S, V19.2D, #6  // SQSHRUN <Vd>.2S, <Vn>.2D, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrun2 V17.16B, V23.8H, #3  // SQSHRUN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrun2 V17.8H, V20.4S, #5  // SQSHRUN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqshrun2 V20.4S, V26.2D, #15  // SQSHRUN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  sqsub Z27.B, Z27.B, #170  // SQSUB <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sqsub Z12.H, Z12.H, #134  // SQSUB <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sqsub Z18.S, Z18.S, #153, LSL #0  // SQSUB <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sqsub Z21.B, Z14.B, Z5.B  // SQSUB <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sqsub H17, H3, H4  // SQSUB <V><d>, <V><n>, <V><m>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  sqsub V14.2S, V18.2S, V27.2S  // SQSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  sqxtn H19, S13  // SQXTN <Vb><d>, <Va><n>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
  sqxtn V14.2S, V26.2D  // SQXTN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
  sqxtn2 V16.16B, V15.8H  // SQXTN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
  sqxtun H30, S23  // SQXTUN <Vb><d>, <Va><n>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
  sqxtun V11.2S, V30.2D  // SQXTUN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
  sqxtun2 V2.16B, V4.8H  // SQXTUN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
  srhadd V10.16B, V20.16B, V18.16B  // SRHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  sri D3, D8, #64  // SRI <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  4.00 V1UnitV13
  sri V21.16B, V12.16B, #8  // SRI <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
  sri V12.4H, V12.4H, #11  // SRI <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
  sri V18.2S, V9.2S, #8  // SRI <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
  sri V19.2D, V5.2D, #28  // SRI <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
  srshl D4, D20, D22  // SRSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  srshl V10.2S, V31.2S, V0.2S  // SRSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  srshr D10, D24, #21  // SRSHR <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  srshr V19.8B, V6.8B, #5  // SRSHR <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  srshr V10.4H, V3.4H, #12  // SRSHR <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  srshr V30.4S, V21.4S, #1  // SRSHR <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  srshr V16.2D, V22.2D, #45  // SRSHR <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  srsra D16, D27, #21  // SRSRA <V><d>, <V><n>, #<shift>  \\ ASIMD shift accumulate  \\ 1 2  2  4.00 V1UnitV13
  srsra V23.8B, V25.8B, #6  // SRSRA <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  srsra V31.4H, V1.4H, #10  // SRSRA <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  srsra V22.4S, V10.4S, #24  // SRSRA <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  srsra V16.2D, V17.2D, #42  // SRSRA <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  ssbb  // SSBB  \\ No description \\ No scheduling info
  sshl D24, D10, D4  // SSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, basic  \\ 1 2  2  2.0 V1UnitV13
  sshl V23.4S, V30.4S, V17.4S  // SSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, basic  \\ 1 2  2  2.0 V1UnitV13
  sshll V7.8H, V14.8B, #6  // SSHLL <Vd>.8H, <Vn>.8B, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sshll V9.4S, V24.4H, #15  // SSHLL <Vd>.4S, <Vn>.4H, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sshll V24.2D, V29.2S, #24  // SSHLL <Vd>.2D, <Vn>.2S, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sshll2 V7.8H, V13.16B, #3  // SSHLL2 <Vd>.8H, <Vn>.16B, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sshll2 V9.4S, V4.8H, #15  // SSHLL2 <Vd>.4S, <Vn>.8H, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sshll2 V4.2D, V25.4S, #5  // SSHLL2 <Vd>.2D, <Vn>.4S, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sshr D11, D29, #12  // SSHR <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, basic  \\ 1 2  2  4.00 V1UnitV13
  sshr V9.8B, V16.8B, #4  // SSHR <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sshr V23.4H, V12.4H, #13  // SSHR <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sshr V16.2S, V4.2S, #14  // SSHR <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sshr V24.2D, V21.2D, #39  // SSHR <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ssra D28, D4, #37  // SSRA <V><d>, <V><n>, #<shift>  \\ ASIMD shift accumulate  \\ 1 2  2  4.00 V1UnitV13
  ssra V17.8B, V31.8B, #1  // SSRA <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  ssra V4.4H, V28.4H, #10  // SSRA <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  ssra V26.4S, V2.4S, #23  // SSRA <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  ssra V29.2D, V6.2D, #12  // SSRA <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  ssubl V0.4S, V1.4H, V23.4H  // SSUBL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  ssubl2 V20.8H, V3.16B, V25.16B  // SSUBL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  ssubw V11.8H, V7.8H, V27.8B  // SSUBW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  ssubw2 V4.2D, V3.2D, V14.4S  // SSUBW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  st1 { V20.8B }, [X2]  // ST1 { <Vt>.8B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V10.16B }, [X11]  // ST1 { <Vt>.16B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V12.4H }, [X17]  // ST1 { <Vt>.4H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V11.8H }, [X12]  // ST1 { <Vt>.8H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V15.2S }, [X2]  // ST1 { <Vt>.2S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V5.4S }, [X26]  // ST1 { <Vt>.4S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V14.1D }, [X2]  // ST1 { <Vt>.1D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V19.2D }, [X19]  // ST1 { <Vt>.2D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V3.8B }, [X5], #8  // ST1 { <Vt>.8B }, [<Xn|SP>], #8  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V8.16B }, [X12], #16  // ST1 { <Vt>.16B }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V9.4H }, [X16], #8  // ST1 { <Vt>.4H }, [<Xn|SP>], #8  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V20.8H }, [X23], #16  // ST1 { <Vt>.8H }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V24.2S }, [X7], #8  // ST1 { <Vt>.2S }, [<Xn|SP>], #8  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V12.4S }, [X24], #16  // ST1 { <Vt>.4S }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V23.1D }, [X7], #8  // ST1 { <Vt>.1D }, [<Xn|SP>], #8  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V31.2D }, [X20], #16  // ST1 { <Vt>.2D }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V5.8B }, [X30], X14  // ST1 { <Vt>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V28.16B }, [X8], X4  // ST1 { <Vt>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V2.4H }, [X14], X13  // ST1 { <Vt>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V31.8H }, [X3], X17  // ST1 { <Vt>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V31.2S }, [X4], X17  // ST1 { <Vt>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V3.4S }, [X9], X4  // ST1 { <Vt>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V22.1D }, [X8], X21  // ST1 { <Vt>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V30.2D }, [X24], X10  // ST1 { <Vt>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V22.8B, V23.8B }, [X22]  // ST1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V18.16B, V19.16B }, [X14]  // ST1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V7.4H, V8.4H }, [X0]  // ST1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V2.8H, V3.8H }, [X3]  // ST1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V22.2S, V23.2S }, [X23]  // ST1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V27.4S, V28.4S }, [X28]  // ST1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V23.1D, V24.1D }, [X29]  // ST1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  st1 { V3.2D, V4.2D }, [X7]  // ST1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V16.8B, V17.8B }, [X19], #16  // ST1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V17.16B, V18.16B }, [X30], #32  // ST1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V5.4H, V6.4H }, [X20], #16  // ST1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V18.8H, V19.8H }, [X17], #32  // ST1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V3.2S, V4.2S }, [X15], #16  // ST1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V17.4S, V18.4S }, [X25], #32  // ST1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V7.1D, V8.1D }, [X6], #16  // ST1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V28.2D, V29.2D }, [X14], #32  // ST1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V13.8B, V14.8B }, [X29], X16  // ST1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V20.16B, V21.16B }, [X0], X11  // ST1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V0.4H, V1.4H }, [X29], X19  // ST1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V10.8H, V11.8H }, [X29], X23  // ST1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V28.2S, V29.2S }, [X27], X26  // ST1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V12.4S, V13.4S }, [X3], X16  // ST1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V9.1D, V10.1D }, [X28], X4  // ST1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V0.2D, V1.2D }, [X5], X29  // ST1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V24.8B, V25.8B, V26.8B }, [X1]  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V28.16B, V29.16B, V30.16B }, [X18]  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 6 2  2  0.67 V1UnitL01[3],V1UnitV01[3]
  st1 { V28.4H, V29.4H, V30.4H }, [X14]  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V17.8H, V18.8H, V19.8H }, [X11]  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 6 2  2  0.67 V1UnitL01[3],V1UnitV01[3]
  st1 { V15.2S, V16.2S, V17.2S }, [X6]  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V13.4S, V14.4S, V15.4S }, [X22]  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 6 2  2  0.67 V1UnitL01[3],V1UnitV01[3]
  st1 { V10.1D, V11.1D, V12.1D }, [X30]  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V6.2D, V7.2D, V8.2D }, [X29]  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 6 2  2  0.67 V1UnitL01[3],V1UnitV01[3]
  st1 { V11.8B, V12.8B, V13.8B }, [X6], #24  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #24  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V24.16B, V25.16B, V26.16B }, [X24], #48  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #48  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
  st1 { V5.4H, V6.4H, V7.4H }, [X14], #24  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #24  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V25.8H, V26.8H, V27.8H }, [X5], #48  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #48  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
  st1 { V23.2S, V24.2S, V25.2S }, [X18], #24  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #24  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V25.4S, V26.4S, V27.4S }, [X29], #48  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #48  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
  st1 { V12.1D, V13.1D, V14.1D }, [X27], #24  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], #24  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V24.2D, V25.2D, V26.2D }, [X10], #48  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #48  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
  st1 { V10.8B, V11.8B, V12.8B }, [X23], X2  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V20.16B, V21.16B, V22.16B }, [X19], X24  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
  st1 { V27.4H, V28.4H, V29.4H }, [X24], X23  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V16.8H, V17.8H, V18.8H }, [X18], X28  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
  st1 { V25.2S, V26.2S, V27.2S }, [X4], X16  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V24.4S, V25.4S, V26.4S }, [X12], X8  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
  st1 { V1.1D, V2.1D, V3.1D }, [X18], X0  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V6.2D, V7.2D, V8.2D }, [X14], X10  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
  st1 { V17.8B, V18.8B, V19.8B, V20.8B }, [X8]  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V3.16B, V4.16B, V5.16B, V6.16B }, [X9]  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 8 2  2  0.50 V1UnitL01[4],V1UnitV01[4]
  st1 { V24.4H, V25.4H, V26.4H, V27.4H }, [X16]  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V0.8H, V1.8H, V2.8H, V3.8H }, [X6]  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 8 2  2  0.50 V1UnitL01[4],V1UnitV01[4]
  st1 { V19.2S, V20.2S, V21.2S, V22.2S }, [X20]  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V21.4S, V22.4S, V23.4S, V24.4S }, [X16]  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 8 2  2  0.50 V1UnitL01[4],V1UnitV01[4]
  st1 { V7.1D, V8.1D, V9.1D, V10.1D }, [X18]  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
  st1 { V4.2D, V5.2D, V6.2D, V7.2D }, [X19]  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 8 2  2  0.50 V1UnitL01[4],V1UnitV01[4]
  st1 { V21.8B, V22.8B, V23.8B, V24.8B }, [X29], #32  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V5.16B, V6.16B, V7.16B, V8.16B }, [X2], #64  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #64  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
  st1 { V19.4H, V20.4H, V21.4H, V22.4H }, [X0], #32  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V5.8H, V6.8H, V7.8H, V8.8H }, [X18], #64  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #64  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
  st1 { V26.2S, V27.2S, V28.2S, V29.2S }, [X14], #32  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V2.4S, V3.4S, V4.4S, V5.4S }, [X11], #64  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #64  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
  st1 { V22.1D, V23.1D, V24.1D, V25.1D }, [X22], #32  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V15.2D, V16.2D, V17.2D, V18.2D }, [X28], #64  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #64  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
  st1 { V16.8B, V17.8B, V18.8B, V19.8B }, [X19], X23  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V22.16B, V23.16B, V24.16B, V25.16B }, [X18], X27  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
  st1 { V16.4H, V17.4H, V18.4H, V19.4H }, [X14], X0  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V25.8H, V26.8H, V27.8H, V28.8H }, [X11], X13  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
  st1 { V1.2S, V2.2S, V3.2S, V4.2S }, [X11], X24  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V25.4S, V26.4S, V27.4S, V28.4S }, [X6], X9  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
  st1 { V1.1D, V2.1D, V3.1D, V4.1D }, [X12], X2  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
  st1 { V24.2D, V25.2D, V26.2D, V27.2D }, [X6], X22  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
  st1 { V24.B }[7], [X0]  // ST1 { <Vt>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitL01,V1UnitV01
  st1 { V0.H }[6], [X14]  // ST1 { <Vt>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitL01,V1UnitV01
  st1 { V4.S }[3], [X6]  // ST1 { <Vt>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitL01,V1UnitV01
  st1 { V15.D }[1], [X27]  // ST1 { <Vt>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD store, 1 element, one lane, D  \\ 2 4  4  2.0 V1UnitL01,V1UnitV01
  st1 { V10.B }[13], [X1], #1  // ST1 { <Vt>.B }[<indexb>], [<Xn|SP>], #1  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V30.B }[3], [X29], X19  // ST1 { <Vt>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V27.H }[5], [X29], #2  // ST1 { <Vt>.H }[<indexh>], [<Xn|SP>], #2  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V10.H }[2], [X18], X11  // ST1 { <Vt>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V3.S }[3], [X1], #4  // ST1 { <Vt>.S }[<indexs>], [<Xn|SP>], #4  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V25.S }[1], [X18], X24  // ST1 { <Vt>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V23.D }[1], [X21], #8  // ST1 { <Vt>.D }[<indexd>], [<Xn|SP>], #8  \\ ASIMD store, 1 element, one lane, D  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1 { V31.D }[0], [X19], X16  // ST1 { <Vt>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, one lane, D  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
  st1b { Z24.S }, P2, [X6]  // ST1B { <Zt>.<T> }, <Pg>, [<Xn|SP>]  \\ Contiguous store, scalar + imm  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  st1b { Z20.D }, P0, [X13, #-8, MUL VL]  // ST1B { <Zt>.<T> }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store, scalar + imm  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  st1b { Z30.H }, P6, [X5, X21]  // ST1B { <Zt>.<T> }, <Pg>, [<Xn|SP>, <Xm>]  \\ Contiguous store, scalar + scalar  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  st1b { Z30.D }, P5, [X5, Z23.D, UXTW]  // ST1B { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ Scatter store, 32-bit unpacked unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1b { Z2.S }, P2, [X27, Z19.S, SXTW]  // ST1B { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod>]  \\ Scatter store, 32-bit unscaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1b { Z2.D }, P0, [X15, Z1.D]  // ST1B { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D]  \\ Scatter store, 64-bit unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1b { Z15.S }, P0, [Z17.S]  // ST1B { <Zt>.S }, <Pg>, [<Zn>.S]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1b { Z22.S }, P2, [Z4.S, #9]  // ST1B { <Zt>.S }, <Pg>, [<Zn>.S, #<imm>]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1b { Z0.D }, P2, [Z5.D]  // ST1B { <Zt>.D }, <Pg>, [<Zn>.D]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1b { Z11.D }, P6, [Z11.D, #17]  // ST1B { <Zt>.D }, <Pg>, [<Zn>.D, #<imm>]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1d { Z20.D }, P0, [X11, Z16.D, SXTW #3]  // ST1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #3]  \\ Scatter store, 32-bit unpacked scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1d { Z28.D }, P1, [X17, Z15.D, SXTW]  // ST1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ Scatter store, 32-bit unpacked unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1d { Z10.D }, P6, [X26, Z3.D, LSL #3]  // ST1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, LSL #3]  \\ Scatter store, 64-bit scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1d { Z9.D }, P7, [X24, Z17.D]  // ST1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D]  \\ Scatter store, 64-bit unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1d { Z25.D }, P7, [Z1.D]  // ST1D { <Zt>.D }, <Pg>, [<Zn>.D]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1d { Z16.D }, P0, [Z20.D, #248]  // ST1D { <Zt>.D }, <Pg>, [<Zn>.D, #<imm>]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1h { Z28.S }, P6, [X29]  // ST1H { <Zt>.<T> }, <Pg>, [<Xn|SP>]  \\ Contiguous store, scalar + imm  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  st1h { Z21.D }, P1, [X15, #-2, MUL VL]  // ST1H { <Zt>.<T> }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store, scalar + imm  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  st1h { Z16.H }, P0, [X26, X9, LSL #1]  // ST1H { <Zt>.<T> }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous store, scalar + scalar   \\ 3 2  2  2.0 V1UnitL01,V1UnitS,V1UnitV
  st1h { Z21.S }, P6, [X1, Z31.S, SXTW #1]  // ST1H { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Scatter store, 32-bit scaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1h { Z19.D }, P5, [X8, Z16.D, SXTW #1]  // ST1H { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Scatter store, 32-bit unpacked scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1h { Z9.D }, P1, [X23, Z8.D, SXTW]  // ST1H { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ Scatter store, 32-bit unpacked unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1h { Z3.S }, P7, [X14, Z15.S, SXTW]  // ST1H { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod>]  \\ Scatter store, 32-bit unscaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1h { Z15.D }, P7, [X6, Z8.D, LSL #1]  // ST1H { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Scatter store, 64-bit scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1h { Z29.D }, P4, [X15, Z24.D]  // ST1H { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D]  \\ Scatter store, 64-bit unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1h { Z0.S }, P5, [Z14.S]  // ST1H { <Zt>.S }, <Pg>, [<Zn>.S]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1h { Z21.S }, P5, [Z22.S]  // ST1H { <Zt>.S }, <Pg>, [<Zn>.S, #<imm>]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1h { Z26.D }, P1, [Z30.D]  // ST1H { <Zt>.D }, <Pg>, [<Zn>.D]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1h { Z4.D }, P1, [Z24.D, #62]  // ST1H { <Zt>.D }, <Pg>, [<Zn>.D, #<imm>]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1w { Z5.S }, P2, [X30, Z8.S, UXTW #2]  // ST1W { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #2]  \\ Scatter store, 32-bit scaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1w { Z11.D }, P2, [X18, Z11.D, UXTW #2]  // ST1W { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Scatter store, 32-bit unpacked scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1w { Z3.D }, P7, [X25, Z1.D, SXTW]  // ST1W { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ Scatter store, 32-bit unpacked unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1w { Z12.S }, P2, [X14, Z25.S, SXTW]  // ST1W { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod>]  \\ Scatter store, 32-bit unscaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1w { Z31.D }, P6, [X18, Z13.D, LSL #2]  // ST1W { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Scatter store, 64-bit scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1w { Z28.D }, P7, [X2, Z29.D]  // ST1W { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D]  \\ Scatter store, 64-bit unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1w { Z31.S }, P5, [Z2.S]  // ST1W { <Zt>.S }, <Pg>, [<Zn>.S]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1w { Z7.S }, P3, [Z16.S, #4]  // ST1W { <Zt>.S }, <Pg>, [<Zn>.S, #<imm>]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
  st1w { Z3.D }, P5, [Z26.D]  // ST1W { <Zt>.D }, <Pg>, [<Zn>.D]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st1w { Z19.D }, P6, [Z30.D, #108]  // ST1W { <Zt>.D }, <Pg>, [<Zn>.D, #<imm>]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
  st2 { V10.8B, V11.8B }, [X23]  // ST2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
  st2 { V18.16B, V19.16B }, [X9]  // ST2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st2 { V25.4H, V26.4H }, [X15]  // ST2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
  st2 { V4.8H, V5.8H }, [X2]  // ST2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st2 { V0.2S, V1.2S }, [X21]  // ST2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
  st2 { V26.4S, V27.4S }, [X13]  // ST2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st2 { V4.2D, V5.2D }, [X9]  // ST2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, Q-form, D  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st2 { V27.8B, V28.8B }, [X0], #16  // ST2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #16  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V10.16B, V11.16B }, [X19], #32  // ST2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #32  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st2 { V0.4H, V1.4H }, [X5], #16  // ST2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #16  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V11.8H, V12.8H }, [X6], #32  // ST2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #32  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st2 { V15.2S, V16.2S }, [X25], #16  // ST2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #16  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V12.4S, V13.4S }, [X2], #32  // ST2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #32  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st2 { V15.2D, V16.2D }, [X24], #32  // ST2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #32  \\ ASIMD store, 2 element, multiple, Q-form, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st2 { V2.8B, V3.8B }, [X19], X29  // ST2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V1.16B, V2.16B }, [X9], X13  // ST2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st2 { V1.4H, V2.4H }, [X26], X22  // ST2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V11.8H, V12.8H }, [X19], X9  // ST2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st2 { V29.2S, V30.2S }, [X16], X18  // ST2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V23.4S, V24.4S }, [X6], X19  // ST2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st2 { V13.2D, V14.2D }, [X2], X1  // ST2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, Q-form, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st2 { V21.B, V22.B }[13], [X29]  // ST2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
  st2 { V3.H, V4.H }[1], [X24]  // ST2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
  st2 { V21.S, V22.S }[1], [X12]  // ST2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
  st2 { V28.D, V29.D }[1], [X17]  // ST2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD store, 2 element, one lane, D  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
  st2 { V14.B, V15.B }[0], [X12], #2  // ST2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>], #2  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V6.B, V7.B }[1], [X2], X27  // ST2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V7.H, V8.H }[5], [X14], #4  // ST2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>], #4  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V27.H, V28.H }[7], [X27], X30  // ST2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V18.S, V19.S }[2], [X5], #8  // ST2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>], #8  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V3.S, V4.S }[0], [X18], X12  // ST2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V2.D, V3.D }[1], [X11], #16  // ST2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>], #16  \\ ASIMD store, 2 element, one lane, D  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2 { V8.D, V9.D }[0], [X4], X13  // ST2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, one lane, D  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
  st2b { Z10.B, Z11.B }, P7, [X7]  // ST2B { <Zt1>.B, <Zt2>.B }, <Pg>, [<Xn|SP>]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2b { Z3.B, Z4.B }, P7, [X1, #14, MUL VL]  // ST2B { <Zt1>.B, <Zt2>.B }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2b { Z13.B, Z14.B }, P4, [X30, X3]  // ST2B { <Zt1>.B, <Zt2>.B }, <Pg>, [<Xn|SP>, <Xm>]  \\ Contiguous store two structures from two vectors, scalar + scalar  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2d { Z30.D, Z31.D }, P5, [X4]  // ST2D { <Zt1>.D, <Zt2>.D }, <Pg>, [<Xn|SP>]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2d { Z30.D, Z31.D }, P4, [X16, #-14, MUL VL]  // ST2D { <Zt1>.D, <Zt2>.D }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2d { Z13.D, Z14.D }, P2, [X10, X29, LSL #3]  // ST2D { <Zt1>.D, <Zt2>.D }, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous store two structures from two vectors, scalar + scalar  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2h { Z29.H, Z30.H }, P2, [X18]  // ST2H { <Zt1>.H, <Zt2>.H }, <Pg>, [<Xn|SP>]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2h { Z5.H, Z6.H }, P0, [X19, #12, MUL VL]  // ST2H { <Zt1>.H, <Zt2>.H }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2h { Z3.H, Z4.H }, P0, [X4, X6, LSL #1]  // ST2H { <Zt1>.H, <Zt2>.H }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous store two structures from two vectors, scalar + scalar  \\ 3 4  4  2.00 V1UnitL01[2],V1UnitS[2],V1UnitV[2]
  st2w { Z5.S, Z6.S }, P5, [X13]  // ST2W { <Zt1>.S, <Zt2>.S }, <Pg>, [<Xn|SP>]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2w { Z26.S, Z27.S }, P3, [X4, #-6, MUL VL]  // ST2W { <Zt1>.S, <Zt2>.S }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st2w { Z18.S, Z19.S }, P7, [X7, X0, LSL #2]  // ST2W { <Zt1>.S, <Zt2>.S }, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous store two structures from two vectors, scalar + scalar  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
  st3 { V26.8B - V28.8B }, [X6]  // ST3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st3 { V5.16B - V7.16B }, [X2]  // ST3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 6 5  5  0.67 V1UnitV01[3],V1UnitL01[3]
  st3 { V15.4H - V17.4H }, [X11]  // ST3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st3 { V11.8H - V13.8H }, [X20]  // ST3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 6 5  5  0.67 V1UnitV01[3],V1UnitL01[3]
  st3 { V16.2S - V18.2S }, [X16]  // ST3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st3 { V20.4S - V22.4S }, [X2]  // ST3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 6 5  5  0.67 V1UnitV01[3],V1UnitL01[3]
  st3 { V8.2D - V10.2D }, [X15]  // ST3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, Q-form, D  \\ 6 5  5  0.67 V1UnitV01[3],V1UnitL01[3]
  st3 { V26.8B - V28.8B }, [X18], #24  // ST3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #24  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V5.16B - V7.16B }, [X8], #48  // ST3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #48  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
  st3 { V7.4H - V9.4H }, [X17], #24  // ST3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #24  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V7.8H - V9.8H }, [X27], #48  // ST3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #48  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
  st3 { V15.2S - V17.2S }, [X28], #24  // ST3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #24  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V22.4S - V24.4S }, [X20], #48  // ST3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #48  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
  st3 { V10.2D - V12.2D }, [X10], #48  // ST3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #48  \\ ASIMD store, 3 element, multiple, Q-form, D  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
  st3 { V16.8B - V18.8B }, [X7], X0  // ST3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V9.16B - V11.16B }, [X12], X6  // ST3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
  st3 { V21.4H - V23.4H }, [X11], X5  // ST3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V8.8H - V10.8H }, [X3], X1  // ST3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
  st3 { V25.2S - V27.2S }, [X10], X27  // ST3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V25.4S - V27.4S }, [X21], X23  // ST3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
  st3 { V25.2D - V27.2D }, [X22], X13  // ST3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, Q-form, D  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
  st3 { V23.B - V25.B }[3], [X1]  // ST3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD store, 3 element, one lane, B/H  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st3 { V5.H - V7.H }[2], [X25]  // ST3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD store, 3 element, one lane, B/H  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st3 { V7.S - V9.S }[0], [X5]  // ST3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD store, 3 element, one lane, S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st3 { V9.D - V11.D }[0], [X27]  // ST3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD store, 3 element, one lane, D  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st3 { V7.B - V9.B }[8], [X12], #3  // ST3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>], #3  \\ ASIMD store, 3 element, one lane, B/H  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V6.B - V8.B }[1], [X21], X25  // ST3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, one lane, B/H  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V9.H - V11.H }[0], [X28], #6  // ST3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>], #6  \\ ASIMD store, 3 element, one lane, B/H  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V27.H - V29.H }[0], [X22], X4  // ST3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, one lane, B/H  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V6.S - V8.S }[2], [X6], #12  // ST3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>], #12  \\ ASIMD store, 3 element, one lane, S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V27.S - V29.S }[2], [X3], X1  // ST3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, one lane, S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V3.D - V5.D }[0], [X23], #24  // ST3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>], #24  \\ ASIMD store, 3 element, one lane, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3 { V9.D - V11.D }[1], [X16], X29  // ST3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, one lane, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st3b { Z3.B - Z5.B }, P0, [X30]  // ST3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>, [<Xn|SP>]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
  st3b { Z21.B - Z23.B }, P5, [X16, #3, MUL VL]  // ST3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
  st3b { Z24.B - Z26.B }, P7, [X12, X27]  // ST3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>, [<Xn|SP>, <Xm>]  \\ Contiguous store three structures from three vectors, scalar + scalar  \\ 15 7  7  0.40 V1UnitL01[10],V1UnitS[10],V1UnitV[10]
  st3d { Z24.D - Z26.D }, P5, [X14]  // ST3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>, [<Xn|SP>]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
  st3d { Z15.D - Z17.D }, P4, [X26, #-6, MUL VL]  // ST3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
  st3d { Z24.D - Z26.D }, P2, [X19, X9, LSL #3]  // ST3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous store three structures from three vectors, scalar + scalar  \\ 15 7  7  0.40 V1UnitL01[10],V1UnitS[10],V1UnitV[10]
  st3h { Z2.H - Z4.H }, P5, [X5]  // ST3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>, [<Xn|SP>]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
  st3h { Z12.H - Z14.H }, P6, [X20, #-12, MUL VL]  // ST3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
  st3h { Z22.H - Z24.H }, P2, [X27, X26, LSL #1]  // ST3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous store three structures from three vectors, scalar + scalar  \\ 15 7  7  0.40 V1UnitL01[10],V1UnitS[10],V1UnitV[10]
  st3w { Z20.S - Z22.S }, P2, [X28]  // ST3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>, [<Xn|SP>]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
  st3w { Z19.S - Z21.S }, P6, [X21, #-6, MUL VL]  // ST3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
  st3w { Z12.S - Z14.S }, P2, [X22, X22, LSL #2]  // ST3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous store three structures from three vectors, scalar + scalar  \\ 15 7  7  0.40 V1UnitL01[10],V1UnitS[10],V1UnitV[10]
  st4 { V24.8B - V27.8B }, [X8]  // ST4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 6 6  6  0.67 V1UnitV01[7],V1UnitL01[7]
  st4 { V9.16B - V12.16B }, [X27]  // ST4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 12 7  7  0.33 V1UnitV01[12],V1UnitL01[12]
  st4 { V10.4H - V13.4H }, [X27]  // ST4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 6 6  6  0.67 V1UnitV01[7],V1UnitL01[7]
  st4 { V18.8H - V21.8H }, [X15]  // ST4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 12 7  7  0.33 V1UnitV01[12],V1UnitL01[12]
  st4 { V22.2S - V25.2S }, [X21]  // ST4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 6 6  6  0.67 V1UnitV01[7],V1UnitL01[7]
  st4 { V27.4S - V30.4S }, [X22]  // ST4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 12 7  7  0.33 V1UnitV01[12],V1UnitL01[12]
  st4 { V1.2D - V4.2D }, [X6]  // ST4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, Q-form, D  \\ 8 4  4  0.50 V1UnitV01[8],V1UnitL01[8]
  st4 { V1.8B - V4.8B }, [X26], #32  // ST4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #32  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
  st4 { V5.16B - V8.16B }, [X23], #64  // ST4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #64  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
  st4 { V16.4H - V19.4H }, [X7], #32  // ST4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #32  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
  st4 { V25.8H - V28.8H }, [X7], #64  // ST4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #64  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
  st4 { V14.2S - V17.2S }, [X0], #32  // ST4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #32  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
  st4 { V21.4S - V24.4S }, [X17], #64  // ST4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #64  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
  st4 { V16.2D - V19.2D }, [X7], #64  // ST4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #64  \\ ASIMD store, 4 element, multiple, Q-form, D  \\ 9 4  4  0.50 V1UnitV01[8],V1UnitL01[8],V1UnitI
  st4 { V3.8B - V6.8B }, [X1], X23  // ST4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
  st4 { V25.16B - V28.16B }, [X19], X1  // ST4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
  st4 { V4.4H - V7.4H }, [X2], X3  // ST4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
  st4 { V13.8H - V16.8H }, [X18], X27  // ST4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
  st4 { V18.2S - V21.2S }, [X10], X6  // ST4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
  st4 { V4.4S - V7.4S }, [X9], X18  // ST4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
  st4 { V4.2D - V7.2D }, [X8], X2  // ST4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, Q-form, D  \\ 9 4  4  0.50 V1UnitV01[8],V1UnitL01[8],V1UnitI
  st4 { V25.B - V28.B }[5], [X8]  // ST4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD store, 4 element, one lane, B/H  \\ 6 6  6  1.00 V1UnitV01[2],V1UnitL01[2]
  st4 { V8.H - V11.H }[2], [X11]  // ST4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD store, 4 element, one lane, B/H  \\ 6 6  6  1.00 V1UnitV01[2],V1UnitL01[2]
  st4 { V1.S - V4.S }[1], [X17]  // ST4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD store, 4 element, one lane, S  \\ 6 6  6  1.00 V1UnitV01[2],V1UnitL01[2]
  st4 { V24.D - V27.D }[0], [X30]  // ST4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD store, 4 element, one lane, D  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
  st4 { V9.B - V12.B }[12], [X17], #4  // ST4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>], #4  \\ ASIMD store, 4 element, one lane, B/H  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st4 { V21.B - V24.B }[13], [X1], X22  // ST4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, one lane, B/H  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st4 { V17.H - V20.H }[5], [X16], #8  // ST4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>], #8  \\ ASIMD store, 4 element, one lane, B/H  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st4 { V14.H - V17.H }[5], [X24], X30  // ST4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, one lane, B/H  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st4 { V9.S - V12.S }[0], [X14], #16  // ST4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>], #16  \\ ASIMD store, 4 element, one lane, S  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st4 { V26.S - V29.S }[2], [X14], X24  // ST4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, one lane, S  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st4 { V17.D - V20.D }[1], [X10], #32  // ST4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>], #32  \\ ASIMD store, 4 element, one lane, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st4 { V26.D - V29.D }[0], [X20], X1  // ST4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, one lane, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
  st4b { Z8.B - Z11.B }, P7, [X21]  // ST4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>, [<Xn|SP>]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
  st4b { Z10.B - Z13.B }, P0, [X13, #-24, MUL VL]  // ST4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
  st4b { Z4.B - Z7.B }, P5, [X16, X8]  // ST4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>, [<Xn|SP>, <Xm>]  \\ Contiguous store four structures from four vectors, scalar + scalar  \\ 27 11  11  0.22 V1UnitL01[19],V1UnitS[19],V1UnitV[19]
  st4d { Z7.D - Z10.D }, P2, [X16]  // ST4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>, [<Xn|SP>]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
  st4d { Z22.D - Z25.D }, P7, [X29, #-4, MUL VL]  // ST4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
  st4d { Z16.D - Z19.D }, P7, [X8, X4, LSL #3]  // ST4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous store four structures from four vectors, scalar + scalar  \\ 27 11  11  0.22 V1UnitL01[19],V1UnitS[19],V1UnitV[19]
  st4h { Z17.H - Z20.H }, P0, [X19]  // ST4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>, [<Xn|SP>]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
  st4h { Z26.H - Z29.H }, P1, [X26, #-32, MUL VL]  // ST4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
  st4h { Z26.H - Z29.H }, P7, [X20, X27, LSL #1]  // ST4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous store four structures from four vectors, scalar + scalar  \\ 27 11  11  0.22 V1UnitL01[19],V1UnitS[19],V1UnitV[19]
  st4w { Z3.S - Z6.S }, P7, [X11]  // ST4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>, [<Xn|SP>]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
  st4w { Z10.S - Z13.S }, P5, [X18, #8, MUL VL]  // ST4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
  st4w { Z21.S - Z24.S }, P3, [X9, X19, LSL #2]  // ST4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous store four structures from four vectors, scalar + scalar  \\ 27 11  11  0.22 V1UnitL01[19],V1UnitS[19],V1UnitV[19]
  stlrb W5, [X30]  // STLRB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlrb W0, [X17]  // STLRB <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stlrh W17, [X2]  // STLRH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlrh W18, [X8]  // STLRH <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stlur W28, [X14]  // STLUR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlur W28, [X11, #133]  // STLUR <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  stlur X25, [X4]  // STLUR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlur X25, [X0, #101]  // STLUR <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  stlurb W28, [X16]  // STLURB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlurb W18, [X11, #-202]  // STLURB <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  stlurh W25, [X10]  // STLURH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlurh W17, [X4, #89]  // STLURH <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
  stlxp W15, W25, W26, [X28]  // STLXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlxp W24, W1, W1, [X22]  // STLXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stlxp W16, X26, X3, [X11]  // STLXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlxp W29, X18, X7, [X28]  // STLXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stlxr W24, W19, [X21]  // STLXR <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlxr W1, W2, [X4]  // STLXR <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stlxr W19, X1, [X9]  // STLXR <Ws>, <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlxr W1, X24, [X8]  // STLXR <Ws>, <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stlxrb W29, W1, [X4]  // STLXRB <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlxrb W21, W5, [X25]  // STLXRB <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stlxrh W6, W4, [X28]  // STLXRH <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stlxrh W9, W19, [X5]  // STLXRH <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stnp S25, S7, [X13]  // STNP <St1>, <St2>, [<Xn|SP>]  \\ Store vector pair, immed offset, S-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stnp S24, S5, [X25, #-80]  // STNP <St1>, <St2>, [<Xn|SP>, #<imm32>]  \\ Store vector pair, immed offset, S-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stnp D17, D29, [X0]  // STNP <Dt1>, <Dt2>, [<Xn|SP>]  \\ Store vector pair, immed offset, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stnp D11, D3, [X5, #176]  // STNP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]  \\ Store vector pair, immed offset, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stnp Q21, Q19, [X17]  // STNP <Qt1>, <Qt2>, [<Xn|SP>]  \\ Store vector pair, immed offset, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stnp Q10, Q0, [X16, #-416]  // STNP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]  \\ Store vector pair, immed offset, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stnp W26, W16, [X1]  // STNP <Wt1>, <Wt2>, [<Xn|SP>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stnp W22, W30, [X20, #-220]  // STNP <Wt1>, <Wt2>, [<Xn|SP>, #<imms>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stnp X24, X11, [X5]  // STNP <Xt1>, <Xt2>, [<Xn|SP>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stnp X16, X15, [X8, #248]  // STNP <Xt1>, <Xt2>, [<Xn|SP>, #<immd>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stnt1b { Z11.B }, P6, [X3]  // STNT1B { <Zt>.B }, <Pg>, [<Xn|SP>]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1b { Z19.B }, P6, [X21, #1, MUL VL]  // STNT1B { <Zt>.B }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1b { Z20.B }, P2, [X13, X8]  // STNT1B { <Zt>.B }, <Pg>, [<Xn|SP>, <Xm>]  \\ Non temporal store, scalar + scalar  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1d { Z6.D }, P6, [X19]  // STNT1D { <Zt>.D }, <Pg>, [<Xn|SP>]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1d { Z14.D }, P7, [X25, #-5, MUL VL]  // STNT1D { <Zt>.D }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1d { Z10.D }, P7, [X20, X13, LSL #3]  // STNT1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ Non temporal store, scalar + scalar  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1h { Z3.H }, P4, [X24]  // STNT1H { <Zt>.H }, <Pg>, [<Xn|SP>]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1h { Z27.H }, P5, [X11, #-4, MUL VL]  // STNT1H { <Zt>.H }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1h { Z21.H }, P6, [X26, X15, LSL #1]  // STNT1H { <Zt>.H }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Non temporal store, scalar + scalar  \\ 3 2  2  2.0 V1UnitL01,V1UnitS,V1UnitV
  stnt1w { Z8.S }, P3, [X4]  // STNT1W { <Zt>.S }, <Pg>, [<Xn|SP>]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1w { Z14.S }, P1, [X19, #-4, MUL VL]  // STNT1W { <Zt>.S }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stnt1w { Z24.S }, P1, [X6, X20, LSL #2]  // STNT1W { <Zt>.S }, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ Non temporal store, scalar + scalar  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  stp S15, S20, [X4], #40  // STP <St1>, <St2>, [<Xn|SP>], #<imm32>  \\ Store vector pair, immed post-index, S-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  stp D21, D24, [X16], #24  // STP <Dt1>, <Dt2>, [<Xn|SP>], #<imm64>  \\ Store vector pair, immed post-index, D-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  stp Q4, Q7, [X22], #-176  // STP <Qt1>, <Qt2>, [<Xn|SP>], #<imm128>  \\ Store vector pair, immed post-index, Q-form  \\ 4 2  2  1.00 V1UnitI,V1UnitL01[2],V1UnitV01[2]
  stp S27, S2, [X15, #120]!  // STP <St1>, <St2>, [<Xn|SP>, #<imm32>]!  \\ Store vector pair, immed pre-index, S-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  stp D4, D26, [X5, #192]!  // STP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]!  \\ Store vector pair, immed pre-index, D-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  stp Q23, Q8, [X10, #-560]!  // STP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]!  \\ Store vector pair, immed pre-index, Q-form  \\ 4 2  2  1.00 V1UnitI,V1UnitL01[2],V1UnitV01[2]
  stp S14, S29, [X25]  // STP <St1>, <St2>, [<Xn|SP>]  \\ Store vector pair, immed offset, S-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stp D17, D9, [X19]  // STP <Dt1>, <Dt2>, [<Xn|SP>]  \\ Store vector pair, immed offset, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stp Q5, Q25, [X5]  // STP <Qt1>, <Qt2>, [<Xn|SP>]  \\ Store vector pair, immed offset, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stp S27, S21, [X29, #-228]  // STP <St1>, <St2>, [<Xn|SP>, #<imm32>]  \\ Store vector pair, immed offset, S-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stp D10, D31, [X8, #-40]  // STP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]  \\ Store vector pair, immed offset, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stp Q17, Q18, [X21, #-784]  // STP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]  \\ Store vector pair, immed offset, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stp W27, W11, [X12], #-152  // STP <Wt1>, <Wt2>, [<Xn|SP>], #<imms>  \\ Store pair, immed post-index  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  stp X1, X12, [X4], #-240  // STP <Xt1>, <Xt2>, [<Xn|SP>], #<immd>  \\ Store pair, immed post-index  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  stp W8, W27, [X17, #16]!  // STP <Wt1>, <Wt2>, [<Xn|SP>, #<imms>]!  \\ Store pair, immed pre-index  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  stp X17, X29, [X8, #-224]!  // STP <Xt1>, <Xt2>, [<Xn|SP>, #<immd>]!  \\ Store pair, immed pre-index  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  stp W24, W15, [X6]  // STP <Wt1>, <Wt2>, [<Xn|SP>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stp X30, X6, [X30]  // STP <Xt1>, <Xt2>, [<Xn|SP>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stp W1, W24, [X2, #-96]  // STP <Wt1>, <Wt2>, [<Xn|SP>, #<imms>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stp X11, X17, [X17, #-112]  // STP <Xt1>, <Xt2>, [<Xn|SP>, #<immd>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str W21, [X0], #221  // STR <Wt>, [<Xn|SP>], #<simm>  \\ Store, immed post-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  str X22, [X20], #-70  // STR <Xt>, [<Xn|SP>], #<simm>  \\ Store register, immed post-index  \\ 3 1  1  2.00 V1UnitL01,V1UnitD
  str W19, [X16, #-180]!  // STR <Wt>, [<Xn|SP>, #<simm>]!  \\ Store, immed pre-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  str X29, [X19, #39]!  // STR <Xt>, [<Xn|SP>, #<simm>]!  \\ Store register, immed pre-index   \\ 3 1  1  2.00 V1UnitL01,V1UnitD
  str W29, [X17]  // STR <Wt>, [<Xn|SP>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str W30, [X1, #10460]  // STR <Wt>, [<Xn|SP>, #<pimm32>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X26, [X2]  // STR <Xt>, [<Xn|SP>]  \\ Store register, unsigned immed  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X10, [X6, #8024]  // STR <Xt>, [<Xn|SP>, #<pimm64>]  \\ Store register, unsigned immed  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str B19, [X29], #-132  // STR <Bt>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str H16, [X9], #-46  // STR <Ht>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str S27, [X19], #42  // STR <St>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str D25, [X23], #-93  // STR <Dt>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str Q20, [X29], #-68  // STR <Qt>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str B18, [X4, #71]!  // STR <Bt>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str H3, [X20, #67]!  // STR <Ht>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str S27, [X26, #-63]!  // STR <St>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str D19, [X19, #124]!  // STR <Dt>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str Q17, [X12, #117]!  // STR <Qt>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str B14, [X13]  // STR <Bt>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str B8, [X6, #842]  // STR <Bt>, [<Xn|SP>, #<pimm8>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str H26, [X20]  // STR <Ht>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str H22, [X26, #6584]  // STR <Ht>, [<Xn|SP>, #<pimm16>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str S12, [X26]  // STR <St>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str S6, [X10, #9644]  // STR <St>, [<Xn|SP>, #<pimm32>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D21, [X5]  // STR <Dt>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D25, [X11, #7496]  // STR <Dt>, [<Xn|SP>, #<pimm64>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str Q15, [X30]  // STR <Qt>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str Q3, [X18, #3936]  // STR <Qt>, [<Xn|SP>, #<pimm128>]  \\ Store vector reg, immed pre-index, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str P3, [X25]  // STR <Pt>, [<Xn|SP>]  \\ Store from predicate reg  \\ 1 1  1  2.0 V1UnitL01
  str P2, [X16, #196, MUL VL]  // STR <Pt>, [<Xn|SP>, #<imm>, MUL VL]  \\ Store from predicate reg  \\ 1 1  1  2.0 V1UnitL01
  str W25, [X29, X14]  // STR <Wt>, [<Xn|SP>, <Xm>]  \\ Store register, register offset, basic  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X30, [X12, X6]  // STR <Xt>, [<Xn|SP>, <Xm>]  \\ Store register, register offset, basic  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str W7, [X19, W8, UXTW]  // STR <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X3, [X28, W14, UXTW]  // STR <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str W14, [X17, W0, SXTW]  // STR <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X3, [X16, W25, SXTW]  // STR <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str W18, [X2, X28, SXTX]  // STR <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X10, [X5, X21, SXTX]  // STR <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str W17, [X27, W0, UXTW #2] // STR <Wt>, [<Xn|SP>, <Wm>, UXTW #2] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X17, [X21, W9, UXTW #3] // STR <Xt>, [<Xn|SP>, <Wm>, UXTW #3] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str W11, [X25, W10, SXTW #2] // STR <Wt>, [<Xn|SP>, <Wm>, SXTW #2] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X28, [X9, W13, SXTW #3] // STR <Xt>, [<Xn|SP>, <Wm>, SXTW #3] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str W21, [X18, X19, SXTX #2] // STR <Wt>, [<Xn|SP>, <Xm>, SXTX #2] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X25, [X19, X20, SXTX #3] // STR <Xt>, [<Xn|SP>, <Xm>, SXTX #3] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str W16, [X19, X10, LSL #2]  // STR <Wt>, [<Xn|SP>, <Xm>, LSL #2]  \\ Store register, register offset, scaled by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str X13, [X22, X9, LSL #3]  // STR <Xt>, [<Xn|SP>, <Xm>, LSL #3]  \\ Store register, register offset, scaled by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  str B14, [X1, X19]  // STR <Bt>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str B2, [X28, W0, UXTW]  // STR <Bt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str B11, [X20, W18, SXTW]  // STR <Bt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str B14, [X23, X29, SXTX]  // STR <Bt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str H20, [X27, X2]  // STR <Ht>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str H2, [X3, W27, UXTW]  // STR <Ht>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str H17, [X19, W17, SXTW]  // STR <Ht>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str H31, [X16, X17, SXTX]  // STR <Ht>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str H5, [X17, W3, UXTW #1] // STR <Ht>, [<Xn|SP>, <Wm>, UXTW #1] \\ Store vector reg, register offset, extend, scale, H-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  str H6, [X23, W30, SXTW #1] // STR <Ht>, [<Xn|SP>, <Wm>, SXTW #1] \\ Store vector reg, register offset, extend, scale, H-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  str H5, [X25, X23, SXTX #1] // STR <Ht>, [<Xn|SP>, <Xm>, SXTX #1] \\ Store vector reg, register offset, extend, scale, H-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  str H24, [X25, X5, LSL #1]  // STR <Ht>, [<Xn|SP>, <Xm>, LSL #1]  \\ Store vector reg, register offset, scale, H-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  str S25, [X8, X29]  // STR <St>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str S17, [X22, W15, UXTW]  // STR <St>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str S20, [X11, W13, SXTW]  // STR <St>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str S15, [X10, X15, SXTX]  // STR <St>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str S10, [X13, W3, UXTW #2] // STR <St>, [<Xn|SP>, <Wm>, UXTW #2] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str S13, [X29, W5, SXTW #2] // STR <St>, [<Xn|SP>, <Wm>, SXTW #2] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str S31, [X4, X26, SXTX #2] // STR <St>, [<Xn|SP>, <Xm>, SXTX #2] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str S5, [X30, X20, LSL #2]  // STR <St>, [<Xn|SP>, <Xm>, LSL #2]  \\ Store vector reg, register offset, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D0, [X0, X20]  // STR <Dt>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D24, [X21, W22, UXTW]  // STR <Dt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D4, [X14, W7, SXTW]  // STR <Dt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D20, [X27, X5, SXTX]  // STR <Dt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D9, [X30, W23, UXTW #3] // STR <Dt>, [<Xn|SP>, <Wm>, UXTW #3] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D24, [X7, W29, SXTW #3] // STR <Dt>, [<Xn|SP>, <Wm>, SXTW #3] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D3, [X27, X28, SXTX #3] // STR <Dt>, [<Xn|SP>, <Xm>, SXTX #3] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str D27, [X5, X4, LSL #3]  // STR <Dt>, [<Xn|SP>, <Xm>, LSL #3]  \\ Store vector reg, register offset, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  str Q26, [X21, X7]  // STR <Qt>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str Q28, [X24, W23, UXTW]  // STR <Qt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str Q4, [X1, W15, SXTW]  // STR <Qt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str Q5, [X6, X25, SXTX]  // STR <Qt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
  str Q31, [X28, W25, UXTW #4] // STR <Qt>, [<Xn|SP>, <Wm>, UXTW #4] \\ Store vector reg, register offset, extend, scale, Q-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  str Q2, [X9, W28, SXTW #4] // STR <Qt>, [<Xn|SP>, <Wm>, SXTW #4] \\ Store vector reg, register offset, extend, scale, Q-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  str Q8, [X13, X8, SXTX #4] // STR <Qt>, [<Xn|SP>, <Xm>, SXTX #4] \\ Store vector reg, register offset, extend, scale, Q-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  str Q31, [X30, X16, LSL #4]  // STR <Qt>, [<Xn|SP>, <Xm>, LSL #4]  \\ Store vector reg, register offset, scale, Q-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
  str Z26, [X5]  // STR <Zt>, [<Xn|SP>]  \\ Store from vector reg  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  str Z15, [X12, #144, MUL VL]  // STR <Zt>, [<Xn|SP>, #<imm>, MUL VL]  \\ Store from vector reg  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
  strb W26, [X8], #147  // STRB <Wt>, [<Xn|SP>], #<simm>  \\ Store, immed post-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  strb W23, [X10, #-119]!  // STRB <Wt>, [<Xn|SP>, #<simm>]!  \\ Store, immed pre-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  strb W12, [X6]  // STRB <Wt>, [<Xn|SP>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strb W5, [X7, #1153]  // STRB <Wt>, [<Xn|SP>, #<pimm>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strb W4, [X9, W14, UXTW]  // STRB <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strb W25, [X26, W22, SXTW]  // STRB <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strb W9, [X2, X21, SXTX]  // STRB <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strb W17, [X10, X14]  // STRB <Wt>, [<Xn|SP>, <Xm>]  \\ Store register, register offset, basic  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strh W28, [X2], #49  // STRH <Wt>, [<Xn|SP>], #<simm>  \\ Store, immed post-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  strh W27, [X24, #-209]!  // STRH <Wt>, [<Xn|SP>, #<simm>]!  \\ Store, immed pre-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
  strh W11, [X25]  // STRH <Wt>, [<Xn|SP>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strh W6, [X22, #7980]  // STRH <Wt>, [<Xn|SP>, #<pimm>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strh W27, [X4, X10]  // STRH <Wt>, [<Xn|SP>, <Xm>]  \\ Store register, register offset, basic  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strh W15, [X17, W18, UXTW]  // STRH <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strh W26, [X28, W27, SXTW]  // STRH <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strh W18, [X13, X23, SXTX]  // STRH <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  strh W29, [X30, W2, UXTW #1]  // STRH <Wt>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Store register, register offset, extend, scale by 1  \\ 2 1  1  2.00 V1UnitI,V1UnitL01,V1UnitD
  strh W20, [X24, W14, SXTW #1]  // STRH <Wt>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Store register, register offset, extend, scale by 1  \\ 2 1  1  2.00 V1UnitI,V1UnitL01,V1UnitD
  strh W30, [X7, X27, SXTX #1]  // STRH <Wt>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Store register, register offset, extend, scale by 1  \\ 2 1  1  2.00 V1UnitI,V1UnitL01,V1UnitD
  strh W1, [X29, X13, LSL #1]  // STRH <Wt>, [<Xn|SP>, <Xm>, LSL #1]  \\ Store register, register offset, scaled by 1  \\ 2 1  1  2.00 V1UnitI,V1UnitL01,V1UnitD
  sttr W23, [X15]  // STTR <Wt>, [<Xn|SP>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sttr W20, [X3, #50]  // STTR <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sttr X1, [X23]  // STTR <Xt>, [<Xn|SP>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sttr X3, [X21, #37]  // STTR <Xt>, [<Xn|SP>, #<simm>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sttrb W12, [X20]  // STTRB <Wt>, [<Xn|SP>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sttrb W13, [X9, #148]  // STTRB <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sttrh W13, [X19]  // STTRH <Wt>, [<Xn|SP>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sttrh W12, [X0, #200]  // STTRH <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stur B8, [X14]  // STUR <Bt>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur B29, [X14, #-158]  // STUR <Bt>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur H24, [X15]  // STUR <Ht>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur H9, [X28, #-81]  // STUR <Ht>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur S12, [X16]  // STUR <St>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur S24, [X18, #-95]  // STUR <St>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur D13, [X22]  // STUR <Dt>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur D23, [X0, #8]  // STUR <Dt>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur Q14, [X3]  // STUR <Qt>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur Q22, [X15, #-178]  // STUR <Qt>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
  stur W21, [X17]  // STUR <Wt>, [<Xn|SP>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stur W25, [X24, #-232]  // STUR <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stur X17, [X20]  // STUR <Xt>, [<Xn|SP>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stur X11, [X16, #176]  // STUR <Xt>, [<Xn|SP>, #<simm>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sturb W27, [X21]  // STURB <Wt>, [<Xn|SP>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sturb W25, [X25, #-88]  // STURB <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sturh W13, [X20]  // STURH <Wt>, [<Xn|SP>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  sturh W3, [X8, #-34]  // STURH <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
  stxp W17, W30, W26, [X22]  // STXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stxp W17, W21, W1, [X3]  // STXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stxp W10, X14, X26, [X5]  // STXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stxp W17, X23, X29, [X30]  // STXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stxr W10, W26, [X27]  // STXR <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stxr W11, W1, [X21]  // STXR <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stxr W28, X29, [X11]  // STXR <Ws>, <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stxr W17, X20, [X25]  // STXR <Ws>, <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stxrb W30, W12, [X16]  // STXRB <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stxrb W19, W15, [X30]  // STXRB <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  stxrh W20, W18, [X19]  // STXRH <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
  stxrh W3, W23, [X27]  // STXRH <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
  sub W21, WSP, W27  // SUB <Wd>, <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.00 V1UnitI
  sub W20, WSP, W23, SXTH  // SUB <Wd>, <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.00 V1UnitI
  sub W27, WSP, W8, UXTH #4  // SUB <Wd>, <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.00 V1UnitI
  sub W9, WSP, W2, LSL #2  // SUB <Wd>, <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, no flagset   \\ 1 2  2  2.00 V1UnitI
  sub X8, X2, X25  // SUB <Xd>, <Xn|SP>, X<m>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  sub X18, X24, W28, UXTB  // SUB <Xd>, <Xn|SP>, <R><m>, <extend>  \\ ALU, basic  \\ 1 2  2  2.00 V1UnitI
  sub X10, X10, W29, UXTB #3  // SUB <Xd>, <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 2  2  2.0 V1UnitM
  sub X7, X1, X18, LSL #1  // SUB <Xd>, <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
  sub WSP, WSP, #37  // SUB <Wd|WSP>, <Wn|WSP>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  sub WSP, WSP, #176, LSL #0  // SUB <Wd|WSP>, <Wn|WSP>, #<imm>, <shift>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  sub X11, X16, #171  // SUB <Xd|SP>, <Xn|SP>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  sub X26, X23, #227, LSL #12  // SUB <Xd|SP>, <Xn|SP>, #<imm>, <shift>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
  sub Z23.B, Z23.B, #193  // SUB <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sub Z16.H, Z16.H, #115  // SUB <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sub Z2.H, Z2.H, #182, LSL #8  // SUB <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sub W1, W2, W11, LSL #3  // SUB <Wd>, <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, no flagset   \\ 1 1  1  4.0 V1UnitI
  sub W6, W25, W18, LSL #9  // SUB <Wd>, <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  sub W23, W8, W26, ASR #21  // SUB <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  sub X25, X2, X28, LSL #3  // SUB <Xd>, <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
  sub X10, X22, X12, LSL #63  // SUB <Xd>, <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  sub X27, X10, X13, LSR #60  // SUB <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  sub D4, D17, D3  // SUB <V><d>, <V><n>, <V><m>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  sub V24.16B, V15.16B, V13.16B  // SUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  sub Z15.S, P6/M, Z15.S, Z17.S  // SUB <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  sub Z27.D, Z24.D, Z20.D  // SUB <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  subhn V5.2S, V8.2D, V20.2D  // SUBHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  subhn2 V6.4S, V29.2D, V16.2D  // SUBHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  subr Z16.B, Z16.B, #149  // SUBR <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  subr Z28.S, Z28.S, #30  // SUBR <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  subr Z5.S, Z5.S, #43, LSL #8  // SUBR <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  subr Z25.B, P3/M, Z25.B, Z4.B  // SUBR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  subs W10, WSP, W20  // SUBS <Wd>, <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  subs W20, WSP, W16, SXTH  // SUBS <Wd>, <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  subs W21, WSP, W26, UXTH #4  // SUBS <Wd>, <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  subs W20, WSP, W6, LSL #1  // SUBS <Wd>, <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 2  2  2.00 V1UnitJ
  subs X3, X4, X16  // SUBS <Xd>, <Xn|SP>, X<m>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  subs X14, X23, W23, UXTB  // SUBS <Xd>, <Xn|SP>, <R><m>, <extend>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  subs X19, X28, W24, UXTB #1  // SUBS <Xd>, <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 1  1  3.00 V1UnitM
  subs X7, X5, X1, LSL #2  // SUBS <Xd>, <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
  subs W8, WSP, #13  // SUBS <Wd>, <Wn|WSP>, #<imm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  subs W4, WSP, #233, LSL #12  // SUBS <Wd>, <Wn|WSP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 1  1  3.00 V1UnitM
  subs X19, X3, #5  // SUBS <Xd>, <Xn|SP>, #<imm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  subs X12, X27, #254, LSL #12  // SUBS <Xd>, <Xn|SP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 1  1  3.00 V1UnitM
  subs W2, W8, W28  // SUBS <Wd>, <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  subs W8, W29, W4, LSL #0  // SUBS <Wd>, <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
  subs W9, W27, W24, LSL #25  // SUBS <Wd>, <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  subs W28, W4, W10, LSR #3  // SUBS <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
  subs X30, X3, X15  // SUBS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
  subs X29, X25, X12, LSL #3  // SUBS <Xd>, <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
  subs X20, X19, X12, LSL #8  // SUBS <Xd>, <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  subs X28, X26, X0, LSR #15  // SUBS <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
  sudot V10.2S, V6.8B, V30.4B[2]  // SUDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.4B[<index>]  \\ ASIMD dot product using signed and unsigned integers  \\ 1 3 1 4.0 V1UnitV
  sudot Z24.S, Z27.B, Z1.B[2]  // SUDOT <Zda>.S, <Zn>.B, <Zm>.B[<imm>]  \\ Dot product, 8 bit, using signed and unsigned integers  \\ 1 3  1  4.00 V1UnitV[2]
  sunpkhi Z26.D, Z29.S  // SUNPKHI <Zd>.<T>, <Zn>.<Tb>  \\ Unpack and extend  \\ 1 2  2  2.0 V1UnitV01
  sunpklo Z17.D, Z27.S  // SUNPKLO <Zd>.<T>, <Zn>.<Tb>  \\ Unpack and extend  \\ 1 2  2  2.0 V1UnitV01
  suqadd D3, D25  // SUQADD <V><d>, <V><n>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  suqadd V24.8H, V6.8H  // SUQADD <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  svc #6030  // SVC #<imm>  \\ No description \\ No scheduling info
  sxtb W9, W0  // SXTB <Wd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
  sxtb X13, W15  // SXTB <Xd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
  sxtb Z1.H, P1/M, Z27.H  // SXTB <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
  sxth Z30.D, P5/M, Z29.D  // SXTH <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
  sxtw Z1.D, P2/M, Z24.D  // SXTW <Zd>.D, <Pg>/M, <Zn>.D  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
  sxth W10, W24  // SXTH <Wd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
  sxth X19, W0  // SXTH <Xd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
  sxtl V15.4S, V2.4H  // SXTL <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sxtl2 V10.2D, V5.4S  // SXTL2 <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  sxtw X12, W16  // SXTW <Xd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
  sys #2, C6, C9, #3 // SYS #<op1>, <Cn>, <Cm>, #<op2> \\ No description \\ No scheduling info
  sys #6, C9, C2, #6, X13  // SYS #<op1>, <Cn>, <Cm>, #<op2>, <Xt>  \\ No description \\ No scheduling info
  sysl X13, #1, C0, C7, #4  // SYSL <Xt>, #<op1>, <Cn>, <Cm>, #<op2>  \\ No description \\ No scheduling info
  tbl V18.8B, { V13.16B, V14.16B }, V26.8B  // TBL <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup, 1 or 2 table regs  \\ 2 2  2  1.00 V1UnitV01
  tbl V0.8B, { V14.16B, V15.16B, V16.16B }, V21.8B  // TBL <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup, 3 table regs  \\ 2 4  4  1.00 V1UnitV01[2]
  tbl V21.16B, { V14.16B, V15.16B, V16.16B, V17.16B }, V27.16B  // TBL <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B, <Vn+3>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup, 4 table regs  \\ 3 4  4  0.67 V1UnitV01[3]
  tbl V8.8B, { V9.16B }, V26.8B  // TBL <Vd>.<Ta>, { <Vn>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup, 1 or 2 table regs  \\ 2 2  2  1.00 V1UnitV01
  tbnz W21, #17, test  // TBNZ W<t>, #<imms>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
  tbnz X25, #16, test  // TBNZ X<t>, #<immd>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
  tbx V3.16B, { V8.16B, V9.16B }, V21.16B  // TBX <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup extension, 2 table reg  \\ 2 4  4  1.00 V1UnitV01[2]
  tbx V3.16B, { V0.16B, V1.16B, V2.16B }, V9.16B  // TBX <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup extension, 3 table reg  \\ 3 6  6  0.67 V1UnitV01[3]
  tbx V12.16B, { V8.16B, V9.16B, V10.16B, V11.16B }, V10.16B  // TBX <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B, <Vn+3>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup extension, 4 table reg  \\ 5 6  6  0.40 V1UnitV01[6]
  tbx V21.16B, { V5.16B }, V17.16B  // TBX <Vd>.<Ta>, { <Vn>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup extension, 1 table reg  \\ 2 2  2  1.00 V1UnitV01
  tbz W0, #21, test  // TBZ W<t>, #<imms>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
  tbz X17, #49, test  // TBZ X<t>, #<immd>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
  tlbi ALLE2 // TLBI <tlbi_op> \\ No description \\ No scheduling info
  tlbi VAE2IS, X1 // TLBI <tlbi_op2>, <Xt> \\ No description \\ No scheduling info
  trn1 V28.2S, V15.2S, V25.2S  // TRN1 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD transpose  \\ 1 2  2  4.0 V1UnitV
  trn1 P0.B, P4.B, P6.B  // TRN1 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate transpose  \\ 1 2  2  1.0 V1UnitM0
  trn2 P7.D, P0.D, P5.D  // TRN2 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate transpose  \\ 1 2  2  1.0 V1UnitM0
  trn2 V9.2S, V5.2S, V2.2S  // TRN2 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD transpose  \\ 1 2  2  4.0 V1UnitV
  tst W24, #0xe00  // TST <Wn>, #<imms>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  tst X14, #0x1e00  // TST <Xn>, #<immd>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
  tst W28, W30  // TST <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
  tst W22, W8, LSL #20  // TST <Wn>, <Wm>, <shift> #<wamount>  \\ Test/Compare, shift by immed  \\ 1 2  2  2.0 V1UnitM
  tst X29, X8  // TST <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 2  2  2.00 V1UnitJ
  tst X11, X6, LSR #1  // TST <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, flagset  \\ 1 2  2  2.0 V1UnitM
  uaba V28.4H, V27.4H, V17.4H  // UABA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD absolute diff accum  \\ 1 4 1 2.0 V1UnitV13
  uabal V6.8H, V24.8B, V27.8B  // UABAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff accum long  \\ 1 4 1 2.0 V1UnitV13
  uabal2 V28.2D, V15.4S, V17.4S  // UABAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff accum long  \\ 1 4 1 2.0 V1UnitV13
  uabd V6.8H, V4.8H, V15.8H  // UABD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD absolute diff  \\ 1 2  2  4.0 V1UnitV
  uabd Z12.B, P4/M, Z12.B, Z4.B  // UABD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  uabdl V21.2D, V0.2S, V21.2S  // UABDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff long  \\ 1 2  2  4.0 V1UnitV
  uabdl2 V23.4S, V2.8H, V30.8H  // UABDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff long  \\ 1 2  2  4.0 V1UnitV
  uadalp V28.4H, V12.8B  // UADALP <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD pairwise add and accumulate long  \\ 1 4 1 2.0 V1UnitV13
  uaddl V22.4S, V18.4H, V9.4H  // UADDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  uaddl2 V28.2D, V16.4S, V6.4S  // UADDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  uaddlp V11.1D, V23.2S  // UADDLP <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD arith, pair-wise  \\ 1 2  2  4.0 V1UnitV
  uaddlv H5, V14.8B  // UADDLV H<d>, <Vn>.8B  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  uaddlv H4, V16.16B  // UADDLV H<d>, <Vn>.16B  \\ ASIMD arith, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
  uaddlv S13, V18.4H  // UADDLV S<d>, <Vn>.4H  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  uaddlv S9, V17.8H  // UADDLV S<d>, <Vn>.8H  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  uaddlv D20, V1.4S  // UADDLV D<d>, <Vn>.4S  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  uaddv D8, P7, Z12.B  // UADDV <Dd>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
  uaddv D19, P6, Z4.H  // UADDV <Dd>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
  uaddv D29, P3, Z2.S  // UADDV <Dd>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
  uaddv D24, P0, Z21.D  // UADDV <Dd>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
  uaddw V19.4S, V3.4S, V2.4H  // UADDW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  uaddw2 V20.4S, V13.4S, V21.8H  // UADDW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  ubfiz W8, W19, #27, #3  // UBFIZ <Wd>, <Wn>, #<lsbs>, #<widths>  \\ No description \\ No scheduling info
  ubfiz X12, X27, #26, #6  // UBFIZ <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ No description \\ No scheduling info
  ubfm W29, W26, #12, #4  // UBFM <Wd>, <Wn>, #<immrs>, #<immss>  \\ Bitfield move, basic  \\ 1 1  1  4.0 V1UnitI
  ubfm X29, X20, #13, #4  // UBFM <Xd>, <Xn>, #<immrd>, #<immsd>  \\ Bitfield move, basic  \\ 1 1  1  4.0 V1UnitI
  ubfx W29, W20, #12, #14  // UBFX <Wd>, <Wn>, #<lsbs>, #<widths>  \\ Bit field extract  \\ 1 1  1  4.0 V1UnitI
  ubfx X23, X25, #18, #41  // UBFX <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ Bit field extract  \\ 1 1  1  4.0 V1UnitI
  ucvtf H3, W16, #32  // UCVTF <Hd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf S10, W16, #29  // UCVTF <Sd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf D15, W0, #28  // UCVTF <Dd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf H14, X4, #18  // UCVTF <Hd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf S7, X9, #43  // UCVTF <Sd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf D7, X24, #10  // UCVTF <Dd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf H14, W18  // UCVTF <Hd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf S22, W16  // UCVTF <Sd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf D14, W26  // UCVTF <Dd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf H23, X16  // UCVTF <Hd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf S4, X26  // UCVTF <Sd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf D28, X21  // UCVTF <Dd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
  ucvtf H29, H1, #7  // UCVTF H<d>, H<n>, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
  ucvtf S23, S2, #28  // UCVTF S<d>, S<n>, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  ucvtf D10, D25, #27  // UCVTF D<d>, D<n>, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  ucvtf V3.4H, V14.4H, #15  // UCVTF <Vd>.4H, <Vn>.4H, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  ucvtf V22.8H, V29.8H, #7  // UCVTF <Vd>.8H, <Vn>.8H, #<hfbits>  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  ucvtf V4.2S, V27.2S, #6  // UCVTF <Vd>.2S, <Vn>.2S, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  ucvtf V21.4S, V17.4S, #14  // UCVTF <Vd>.4S, <Vn>.4S, #<sfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  ucvtf V6.2D, V17.2D, #63  // UCVTF <Vd>.2D, <Vn>.2D, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  ucvtf H28, H1  // UCVTF <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
  ucvtf S30, S15  // UCVTF S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
  ucvtf D7, D6  // UCVTF D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  ucvtf V17.4H, V11.4H  // UCVTF <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  ucvtf V17.8H, V28.8H  // UCVTF <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
  ucvtf V9.2S, V8.2S  // UCVTF <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  ucvtf V9.4S, V17.4S  // UCVTF <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
  ucvtf V19.2D, V1.2D  // UCVTF <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
  ucvtf Z26.H, P3/M, Z26.H  // UCVTF <Zd>.H, <Pg>/M, <Zn>.H  \\ Convert to floating point, 16b to half  \\ 4 6  6  0.25 V1UnitV0[4]
  ucvtf Z28.H, P4/M, Z6.S  // UCVTF <Zd>.H, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 2 4  4  0.50 V1UnitV0[2]
  ucvtf Z4.S, P3/M, Z5.S  // UCVTF <Zd>.S, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 2 4  4  0.50 V1UnitV0[2]
  ucvtf Z1.D, P4/M, Z1.S  // UCVTF <Zd>.D, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 1 3  3  1.00 V1UnitV0[2]
  ucvtf Z4.H, P4/M, Z28.D  // UCVTF <Zd>.H, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
  ucvtf Z18.S, P1/M, Z28.D  // UCVTF <Zd>.S, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
  ucvtf Z6.D, P2/M, Z12.D  // UCVTF <Zd>.D, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
  udiv W14, W22, W26  // UDIV <Wd>, <Wn>, <Wm>  \\ Divide, W-form  \\ 1 12  12  0.20 V1UnitM0[13]
  udiv X21, X6, X30  // UDIV <Xd>, <Xn>, <Xm>  \\ Divide, X-form  \\ 1 20  20  0.20 V1UnitM0[21]
  udiv Z7.S, P3/M, Z7.S, Z22.S  // UDIV <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Divides, 32 bit   \\ 1 12  12  0.14 V1UnitV0[12]
  udiv Z11.D, P6/M, Z11.D, Z21.D  // UDIV <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Divides, 64 bit  \\ 1 20  20  0.14 V1UnitV0[21]
  udivr Z23.S, P1/M, Z23.S, Z27.S  // UDIVR <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Divides, 32 bit   \\ 1 12  12  0.14 V1UnitV0[12]
  udivr Z7.D, P7/M, Z7.D, Z31.D  // UDIVR <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Divides, 64 bit  \\ 1 20  20  0.14 V1UnitV0[21]
  udot Z15.S, Z14.B, Z3.B[3]  // UDOT <Zda>.S, <Zn>.B, <Zms>.B[<imms>]  \\ Dot product, 8 bit  \\ 1 3 1 2.0 V1UnitV01
  udot Z2.D, Z29.H, Z6.H[0]  // UDOT <Zda>.D, <Zn>.H, <Zmd>.H[<immd>]  \\ Dot product, 16 bit  \\ 1 4 1 1.0 V1UnitV0
  udot Z20.S, Z8.B, Z9.B  // UDOT <Zda>.<T>, <Zn>.<Tb>, <Zm>.<Tb>  \\ Dot product, 8 bit  \\ 1 3 1 2.0 V1UnitV01
  udot V13.2S, V20.8B, V8.4B[3]  // UDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.4B[<index>]  \\ ASIMD dot product  \\ 1 3 1 4.0 V1UnitV
  udot V18.4S, V18.16B, V12.16B  // UDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD dot product  \\ 1 3 1 4.0 V1UnitV
  uhadd V21.4H, V31.4H, V9.4H  // UHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  uhsub V10.16B, V11.16B, V24.16B  // UHSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  umaddl X17, W5, W15, X4  // UMADDL <Xd>, <Wn>, <Wm>, <Xa>  \\ Multiply accumulate long  \\ 1 2 1 1.0 V1UnitM0
  umax Z22.B, Z22.B, #117  // UMAX <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  umax Z25.D, P5/M, Z25.D, Z1.D  // UMAX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  umax V7.4S, V1.4S, V19.4S  // UMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
  umaxp V18.4H, V26.4H, V1.4H  // UMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
  umaxv B25, V27.8B  // UMAXV B<d>, <Vn>.8B  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  umaxv B1, V19.16B  // UMAXV B<d>, <Vn>.16B  \\ ASIMD max/min, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
  umaxv H15, V5.4H  // UMAXV H<d>, <Vn>.4H  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  umaxv H28, V23.8H  // UMAXV H<d>, <Vn>.8H  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  umaxv S22, V5.4S  // UMAXV S<d>, <Vn>.4S  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  umaxv B2, P5, Z8.B  // UMAXV B<d>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
  umaxv H3, P2, Z8.H  // UMAXV H<d>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
  umaxv S21, P4, Z10.S  // UMAXV S<d>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
  umaxv D11, P0, Z26.D  // UMAXV D<d>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
  umin Z8.B, Z8.B, #187  // UMIN <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  umin Z21.S, P4/M, Z21.S, Z25.S  // UMIN <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  umin V5.4S, V30.4S, V9.4S  // UMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
  uminp V28.4H, V3.4H, V0.4H  // UMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
  uminv B11, V16.8B  // UMINV B<d>, <Vn>.8B  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  uminv B5, V10.16B  // UMINV B<d>, <Vn>.16B  \\ ASIMD max/min, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
  uminv H29, V31.4H  // UMINV H<d>, <Vn>.4H  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  uminv H0, V19.8H  // UMINV H<d>, <Vn>.8H  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
  uminv S16, V12.4S  // UMINV S<d>, <Vn>.4S  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
  uminv B6, P6, Z6.B  // UMINV B<d>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
  uminv H9, P2, Z14.H  // UMINV H<d>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
  uminv S26, P1, Z18.S  // UMINV S<d>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
  uminv D12, P6, Z4.D  // UMINV D<d>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
  umlal V29.4S, V23.4H, V9.H[0]  // UMLAL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlal V25.2D, V27.2S, V3.S[0]  // UMLAL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlal2 V6.4S, V30.8H, V2.H[1]  // UMLAL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlal2 V22.2D, V22.4S, V6.S[2]  // UMLAL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlal V21.8H, V20.8B, V26.8B  // UMLAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlal2 V28.2D, V14.4S, V2.4S  // UMLAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlsl V14.4S, V3.4H, V11.H[7]  // UMLSL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlsl V8.2D, V12.2S, V3.S[2]  // UMLSL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlsl2 V9.4S, V16.8H, V8.H[1]  // UMLSL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlsl2 V7.2D, V3.4S, V7.S[3]  // UMLSL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlsl V5.2D, V18.2S, V29.2S  // UMLSL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  umlsl2 V3.8H, V30.16B, V14.16B  // UMLSL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
  ummla V14.4S, V28.16B, V29.16B  // UMMLA <Vd>.4S, <Vn>.16B, <Vm>.16B  \\ ASIMD matrix multiply-accumulate  \\ 1 3 1 4.0 V1UnitV
  umnegl X15, W14, W24  // UMNEGL <Xd>, <Wn>, <Wm>  \\ Multiply long  \\ 1 2  2  2.0 V1UnitM
  umov W19, V13.B[0]  // UMOV <Wd>, <Vn>.B[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  umov W7, V20.B[4]  // UMOV <Wd>, <Vn>.B[<indexb>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  umov W18, V25.H[0]  // UMOV <Wd>, <Vn>.H[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  umov W22, V23.H[3]  // UMOV <Wd>, <Vn>.H[<indexh>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
  umov W1, V1.S[0]  // UMOV <Wd>, <Vn>.S[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.0 V1UnitV[4]
  umov W23, V29.S[2]  // UMOV <Wd>, <Vn>.S[<indexs>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.0 V1UnitV[4]
  umov X4, V23.D[0]  // UMOV <Xd>, <Vn>.D[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.0 V1UnitV[4]
  umov X26, V21.D[1]  // UMOV <Xd>, <Vn>.D[<indexd>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.0 V1UnitV[4]
  umsubl X1, W3, W27, X7  // UMSUBL <Xd>, <Wn>, <Wm>, <Xa>  \\ Multiply accumulate long  \\ 1 2 1 1.0 V1UnitM0
  umulh Z23.B, P4/M, Z23.B, Z1.B  // UMULH <Zdn>.B, <Pg>/M, <Zdn>.B, <Zm>.B  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  umulh Z16.H, P2/M, Z16.H, Z16.H  // UMULH <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  umulh Z12.S, P2/M, Z12.S, Z27.S  // UMULH <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
  umulh Z3.D, P2/M, Z3.D, Z25.D  // UMULH <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Multiply, D element size  \\ 2 5  5  0.50 V1UnitV0[2]
  umulh X14, X16, X8  // UMULH <Xd>, <Xn>, <Xm>  \\ Multiply high  \\ 1 3  3  2.0 V1UnitM
  umull X17, W15, W23  // UMULL <Xd>, <Wn>, <Wm>  \\ Multiply long  \\ 1 2  2  2.0 V1UnitM
  umull V19.4S, V16.4H, V8.H[0]  // UMULL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  umull V6.2D, V9.2S, V1.S[1]  // UMULL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  umull2 V23.4S, V9.8H, V1.H[7]  // UMULL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  umull2 V20.2D, V8.4S, V5.S[0]  // UMULL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  umull V21.8H, V10.8B, V28.8B  // UMULL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  umull2 V21.8H, V29.16B, V10.16B  // UMULL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
  uqadd Z20.B, Z20.B, #203  // UQADD <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  uqadd Z5.D, Z5.D, #82  // UQADD <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  uqadd Z4.S, Z4.S, #87, LSL #8  // UQADD <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  uqadd Z11.D, Z25.D, Z19.D  // UQADD <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  uqadd B20, B12, B21  // UQADD <V><d>, <V><n>, <V><m>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  uqadd V28.4S, V4.4S, V0.4S  // UQADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  uqdecb W9  // UQDECB <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecb W4, VL8  // UQDECB <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecb W11, MUL4, MUL #7  // UQDECB <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecb X30  // UQDECB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecb X14, VL256  // UQDECB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecb X8, VL6, MUL #16  // UQDECB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecd W24  // UQDECD <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecd W7, VL8  // UQDECD <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecd W22, MUL3, MUL #5  // UQDECD <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecd X11  // UQDECD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecd X1, VL2  // UQDECD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecd X25, VL128, MUL #16  // UQDECD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecd Z23.D  // UQDECD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqdecd Z26.D, VL256  // UQDECD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqdecd Z6.D, ALL, MUL #4  // UQDECD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqdech W30  // UQDECH <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdech W21, VL6  // UQDECH <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdech W14, VL6, MUL #6  // UQDECH <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdech X16  // UQDECH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdech X30, VL256  // UQDECH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdech X6, VL64, MUL #2  // UQDECH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdech Z5.H  // UQDECH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqdech Z27.H, MUL3  // UQDECH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqdech Z5.H, ALL, MUL #3  // UQDECH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqdecp W24, P7.B  // UQDECP <Wdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  uqdecp X8, P1.H  // UQDECP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  uqdecp Z15.S, P6.S  // UQDECP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
  uqdecw W13  // UQDECW <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecw W27, VL32  // UQDECW <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecw W25, VL7, MUL #2  // UQDECW <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecw X0  // UQDECW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecw X19, VL64  // UQDECW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecw X17, VL32, MUL #3  // UQDECW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqdecw Z5.S  // UQDECW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqdecw Z13.S  // UQDECW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqdecw Z2.S, VL2, MUL #6  // UQDECW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqincb W1  // UQINCB <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincb W15, POW2  // UQINCB <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincb W8, VL256, MUL #10  // UQINCB <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincb X10  // UQINCB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincb X27, MUL3  // UQINCB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincb X29, VL1, MUL #10  // UQINCB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincd W9  // UQINCD <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincd W26, VL64  // UQINCD <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincd W11, VL32, MUL #12  // UQINCD <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincd X6  // UQINCD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincd X26, MUL3  // UQINCD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincd X5, VL64, MUL #16  // UQINCD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincd Z2.D  // UQINCD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqincd Z9.D, VL8  // UQINCD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqincd Z11.D, VL3, MUL #11  // UQINCD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqinch W9  // UQINCH <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqinch W5, VL3  // UQINCH <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqinch W18, ALL, MUL #11  // UQINCH <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqinch X7  // UQINCH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqinch X21, VL1  // UQINCH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqinch X1, VL16, MUL #1  // UQINCH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqinch Z6.H  // UQINCH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqinch Z10.H, VL64  // UQINCH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqinch Z9.H, VL64, MUL #14  // UQINCH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqincp W2, P0.H  // UQINCP <Wdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  uqincp X3, P6.D  // UQINCP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
  uqincp Z15.H, P6.H  // UQINCP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
  uqincw W10  // UQINCW <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincw W28, VL5  // UQINCW <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincw W10, VL4, MUL #2  // UQINCW <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincw X20  // UQINCW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincw X4  // UQINCW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincw X1, VL5, MUL #12  // UQINCW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
  uqincw Z10.S  // UQINCW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqincw Z24.S, MUL4  // UQINCW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqincw Z16.S, VL16, MUL #7  // UQINCW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
  uqrshl D8, D7, D29  // UQRSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  uqrshl V16.2S, V10.2S, V23.2S  // UQRSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  uqrshrn B0, H17, #4  // UQRSHRN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  uqrshrn H1, S2, #15  // UQRSHRN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  uqrshrn S17, D1, #22  // UQRSHRN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  uqrshrn V14.8B, V21.8H, #3  // UQRSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqrshrn V16.4H, V4.4S, #15  // UQRSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqrshrn V12.2S, V31.2D, #9  // UQRSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqrshrn2 V28.16B, V17.8H, #7  // UQRSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqrshrn2 V24.8H, V16.4S, #13  // UQRSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqrshrn2 V26.4S, V11.2D, #6  // UQRSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl B10, B10, #1  // UQSHL B<d>, B<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl H15, H1, #7  // UQSHL H<d>, H<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl S22, S20, #8  // UQSHL S<d>, S<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl D26, D12, #40  // UQSHL D<d>, D<n>, #<shiftd>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl V9.8B, V23.8B, #5  // UQSHL <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl V15.8H, V10.8H, #7  // UQSHL <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl V12.4S, V27.4S, #11  // UQSHL <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl V14.2D, V26.2D, #31  // UQSHL <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl H16, H17, H27  // UQSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshl V6.8H, V27.8H, V16.8H  // UQSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshrn B21, H9, #4  // UQSHRN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  uqshrn H24, S24, #15  // UQSHRN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  uqshrn S25, D10, #30  // UQSHRN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  uqshrn V21.8B, V2.8H, #7  // UQSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshrn V29.4H, V2.4S, #16  // UQSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshrn V14.2S, V19.2D, #25  // UQSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshrn2 V11.16B, V31.8H, #5  // UQSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshrn2 V21.8H, V17.4S, #5  // UQSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqshrn2 V5.4S, V19.2D, #5  // UQSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  uqsub Z6.B, Z6.B, #50  // UQSUB <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  uqsub Z6.S, Z6.S, #194  // UQSUB <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  uqsub Z29.H, Z29.H, #135, LSL #0  // UQSUB <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  uqsub Z10.B, Z25.B, Z22.B  // UQSUB <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
  uqsub D12, D1, D12  // UQSUB <V><d>, <V><n>, <V><m>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  uqsub V31.8B, V15.8B, V23.8B  // UQSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  uqxtn S14, D12  // UQXTN <Vb><d>, <Va><n>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
  uqxtn V22.8B, V6.8H  // UQXTN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
  uqxtn2 V15.16B, V7.8H  // UQXTN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
  urecpe V6.2S, V6.2S  // URECPE <Vd>.2S, <Vn>.2S  \\ ASIMD reciprocal and square root estimate, D-form U32  \\ 1  3   3  2.0 V1UnitV02
  urecpe V18.4S, V17.4S  // URECPE <Vd>.4S, <Vn>.4S  \\ ASIMD reciprocal and square root estimate, Q-form U32  \\ 1 4  4  2.00 V1UnitV02[2]
  urhadd V6.2S, V15.2S, V22.2S  // URHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  urshl D26, D17, D24  // URSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  urshl V15.8H, V26.8H, V6.8H  // URSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
  urshr D23, D29, #52  // URSHR <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
  urshr V18.8B, V27.8B, #8  // URSHR <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  urshr V26.8H, V29.8H, #11  // URSHR <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  urshr V20.4S, V13.4S, #19  // URSHR <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  urshr V25.2D, V24.2D, #22  // URSHR <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
  ursqrte V0.2S, V21.2S  // URSQRTE <Vd>.2S, <Vn>.2S  \\ ASIMD reciprocal and square root estimate, D-form U32  \\ 1  3   3  2.0 V1UnitV02
  ursqrte V21.4S, V31.4S  // URSQRTE <Vd>.4S, <Vn>.4S  \\ ASIMD reciprocal and square root estimate, Q-form U32  \\ 1 4  4  2.00 V1UnitV02[2]
  ursra D11, D23, #38  // URSRA <V><d>, <V><n>, #<shift>  \\ ASIMD shift accumulate  \\ 1 2  2  4.00 V1UnitV13
  ursra V12.8B, V27.8B, #1  // URSRA <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  ursra V2.4H, V26.4H, #14  // URSRA <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  ursra V10.4S, V12.4S, #21  // URSRA <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  ursra V20.2D, V30.2D, #26  // URSRA <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  usdot V2.2S, V26.8B, V18.4B[2]  // USDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.4B[<index>]  \\ ASIMD dot product using signed and unsigned integers  \\ 1 3 1 4.0 V1UnitV
  usdot Z6.S, Z3.B, Z2.B[2]  // USDOT <Zda>.S, <Zn>.B, <Zm>.B[<imm>]  \\ Dot product, 8 bit, using signed and unsigned integers  \\ 1 3  1  4.00 V1UnitV[2]
  usdot V9.2S, V11.8B, V28.8B  // USDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD dot product using signed and unsigned integers  \\ 1 3 1 4.0 V1UnitV
  usdot Z20.S, Z20.B, Z9.B  // USDOT <Zda>.S, <Zn>.B, <Zm>.B  \\ Dot product, 8 bit, using signed and unsigned integers  \\ 1 3  1  4.00 V1UnitV[2]
  ushl D16, D3, D6  // USHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, basic  \\ 1 2  2  2.0 V1UnitV13
  ushl V18.4H, V8.4H, V23.4H  // USHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, basic  \\ 1 2  2  2.0 V1UnitV13
  ushll V11.8H, V8.8B, #7  // USHLL <Vd>.8H, <Vn>.8B, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ushll V29.4S, V5.4H, #11  // USHLL <Vd>.4S, <Vn>.4H, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ushll V16.2D, V9.2S, #10  // USHLL <Vd>.2D, <Vn>.2S, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ushll2 V29.8H, V3.16B, #5  // USHLL2 <Vd>.8H, <Vn>.16B, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ushll2 V10.4S, V21.8H, #9  // USHLL2 <Vd>.4S, <Vn>.8H, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ushll2 V10.2D, V26.4S, #28  // USHLL2 <Vd>.2D, <Vn>.4S, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ushr D15, D18, #11  // USHR <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, basic  \\ 1 2  2  4.00 V1UnitV13
  ushr V26.16B, V8.16B, #4  // USHR <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ushr V22.4H, V1.4H, #7  // USHR <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ushr V3.2S, V3.2S, #29  // USHR <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  ushr V1.2D, V14.2D, #58  // USHR <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  usmmla V29.4S, V23.16B, V11.16B  // USMMLA <Vd>.4S, <Vn>.16B, <Vm>.16B  \\ ASIMD matrix multiply-accumulate  \\ 1 3 1 4.0 V1UnitV
  usqadd D21, D19  // USQADD <V><d>, <V><n>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  usqadd V23.16B, V2.16B  // USQADD <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
  usra D30, D3, #34  // USRA <V><d>, <V><n>, #<shift>  \\ ASIMD shift accumulate  \\ 1 2  2  4.00 V1UnitV13
  usra V27.8B, V2.8B, #2  // USRA <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  usra V29.4H, V15.4H, #11  // USRA <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  usra V4.4S, V11.4S, #30  // USRA <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  usra V4.2D, V10.2D, #31  // USRA <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
  usubl V24.8H, V24.8B, V13.8B  // USUBL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  usubl2 V11.2D, V8.4S, V14.4S  // USUBL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  usubw V25.4S, V16.4S, V0.4H  // USUBW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  usubw2 V8.4S, V1.4S, V21.8H  // USUBW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
  uunpkhi Z15.H, Z5.B  // UUNPKHI <Zd>.<T>, <Zn>.<Tb>  \\ Unpack and extend  \\ 1 2  2  2.0 V1UnitV01
  uunpklo Z22.S, Z21.H  // UUNPKLO <Zd>.<T>, <Zn>.<Tb>  \\ Unpack and extend  \\ 1 2  2  2.0 V1UnitV01
  uxtb W25, W14  // UXTB <Wd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
  uxtb Z17.S, P1/M, Z25.S  // UXTB <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
  uxth Z19.S, P1/M, Z17.S  // UXTH <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
  uxtw Z17.D, P0/M, Z29.D  // UXTW <Zd>.D, <Pg>/M, <Zn>.D  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
  uxth W12, W5  // UXTH <Wd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
  uxtl V7.2D, V4.2S  // UXTL <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  uxtl2 V27.2D, V2.4S  // UXTL2 <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
  uzp1 V24.2D, V20.2D, V7.2D  // UZP1 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD unzip/zip  \\ 1 2  2  4.0 V1UnitV
  uzp1 P6.D, P5.D, P7.D  // UZP1 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate zip/unzip  \\ 1 2  2  1.0 V1UnitM0
  uzp2 P7.B, P6.B, P5.B  // UZP2 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate zip/unzip  \\ 1 2  2  1.0 V1UnitM0
  uzp2 V7.4S, V26.4S, V17.4S  // UZP2 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD unzip/zip  \\ 1 2  2  4.0 V1UnitV
  wfe  // WFE  \\ No description \\ No scheduling info
  wfi  // WFI  \\ No description \\ No scheduling info
  whilele P4.D, X21, X14  // WHILELE <Pd>.<T>, <R><n>, <R><m>  \\ Loop control, based on GPR  \\ 2 3  3  0.50 V1UnitM0[2]
  whilelo P3.B, W13, W2  // WHILELO <Pd>.<T>, <R><n>, <R><m>  \\ Loop control, based on GPR  \\ 2 3  3  0.50 V1UnitM0[2]
  whilels P7.H, X0, X29  // WHILELS <Pd>.<T>, <R><n>, <R><m>  \\ Loop control, based on GPR  \\ 2 3  3  0.50 V1UnitM0[2]
  whilelt P6.H, X15, X22  // WHILELT <Pd>.<T>, <R><n>, <R><m>  \\ Loop control, based on GPR  \\ 2 3  3  0.50 V1UnitM0[2]
  wrffr P0.B  // WRFFR <Pn>.B  \\ Write to first fault register  \\ 1 2  2  1.0 V1UnitM0
  xtn V14.8B, V3.8H  // XTN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow  \\ 1 2  2  4.0 V1UnitV
  xtn2 V15.16B, V26.8H  // XTN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow  \\ 1 2  2  4.0 V1UnitV
  yield  // YIELD  \\ No description \\ No scheduling info
  zip1 V4.2S, V19.2S, V18.2S  // ZIP1 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD unzip/zip  \\ 1 2  2  4.0 V1UnitV
  zip1 P0.H, P6.H, P2.H  // ZIP1 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate zip/unzip  \\ 1 2  2  1.0 V1UnitM0
  zip2 P3.H, P0.H, P3.H  // ZIP2 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate zip/unzip  \\ 1 2  2  1.0 V1UnitM0
  zip2 V28.4S, V6.4S, V20.4S  // ZIP2 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD unzip/zip  \\ 1 2  2  4.0 V1UnitV

.Lfunc_end0:
  .size	test, .Lfunc_end0-test

# CHECK:      Iterations:        100
# CHECK-NEXT: Instructions:      376400
# CHECK-NEXT: Total Cycles:      254420
# CHECK-NEXT: Total uOps:        754900

# CHECK:      Dispatch Width:    15
# CHECK-NEXT: uOps Per Cycle:    2.97
# CHECK-NEXT: IPC:               1.48
# CHECK-NEXT: Block RThroughput: 606.5

# CHECK:      Resources:
# CHECK-NEXT: [0]   - V1UnitB:2
# CHECK-NEXT: [1]   - V1UnitD:2
# CHECK-NEXT: [2]   - V1UnitFlg:3
# CHECK-NEXT: [3]   - V1UnitI:4   V1UnitS, V1UnitS, V1UnitM0, V1UnitM1,
# CHECK-NEXT: [4]   - V1UnitL:3   V1UnitL01, V1UnitL01, V1UnitL2,
# CHECK-NEXT: [5]   - V1UnitL2:1
# CHECK-NEXT: [6]   - V1UnitL01:2
# CHECK-NEXT: [7]   - V1UnitM:2   V1UnitM0, V1UnitM1,
# CHECK-NEXT: [8]   - V1UnitM0:1
# CHECK-NEXT: [9]   - V1UnitM1:1
# CHECK-NEXT: [10]  - V1UnitS:2
# CHECK-NEXT: [11]  - V1UnitV:4   V1UnitV0, V1UnitV1, V1UnitV2, V1UnitV3,
# CHECK-NEXT: [12]  - V1UnitV0:1
# CHECK-NEXT: [13]  - V1UnitV1:1
# CHECK-NEXT: [14]  - V1UnitV2:1
# CHECK-NEXT: [15]  - V1UnitV3:1
# CHECK-NEXT: [16]  - V1UnitV01:2 V1UnitV0, V1UnitV1,
# CHECK-NEXT: [17]  - V1UnitV02:2 V1UnitV0, V1UnitV2,
# CHECK-NEXT: [18]  - V1UnitV13:2 V1UnitV1, V1UnitV3,

# CHECK:      Scheduling Info:
# CHECK-NEXT: [1]: #uOps
# CHECK-NEXT: [2]: Latency
# CHECK-NEXT: [3]: Bypass Latency
# CHECK-NEXT: [4]: Throughput
# CHECK-NEXT: [5]: HasSideEffects (SE)
# CHECK-NEXT: [6]: LLVM OpcodeName
# CHECK-NEXT: [7]: Resources
# CHECK-NEXT: [8]: Instruction
# CHECK-NEXT: [9]: Comment if any
# CHECK-NEXT: [1]    [2]  [3]   [4]      [5]  [6]                            [7]                                               [8]                                  [9]
# CHECK-NEXT:  1      2    2     4.00     -    ABSv1i64                       V1UnitV,                                          abs	d20, d11                       /* ABS <V><d>, <V><n>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV */
# CHECK-NEXT:  1      2    2     4.00     -    ABSv2i32                       V1UnitV,                                          abs	v12.2s, v20.2s                 // ABS <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    ABS_ZPmZ_S                     V1UnitV, V1UnitV01,                               abs	z27.s, p4/m, z29.s             // ABS <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    ADCWr                          V1UnitI,                                          adc	w9, w3, w3                     // ADC <Wd>, <Wn>, <Wm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ADCXr                          V1UnitI,                                          adc	x28, x16, x22                  // ADC <Xd>, <Xn>, <Xm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     3.00     -    ADCSWr                         V1UnitFlg, V1UnitI,                               adcs	w12, w18, w18                  // ADCS <Wd>, <Wn>, <Wm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADCSXr                         V1UnitFlg, V1UnitI,                               adcs	x12, x3, x7                    // ADCS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDWrx                         V1UnitI, V1UnitM,                                 add	wsp, wsp, w27                  // ADD <Wd|WSP>, <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ADDWrx                         V1UnitI, V1UnitM,                                 add	wsp, wsp, w23, uxth            // ADD <Wd|WSP>, <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ADDWrx                         V1UnitI, V1UnitM,                                 add	wsp, wsp, w2, sxtw #2          // ADD <Wd|WSP>, <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ADDWrx                         V1UnitI, V1UnitM,                                 add	wsp, wsp, w9, lsl #3           // ADD <Wd|WSP>, <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 2  2  2.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ADDXrs                         V1UnitI,                                          add	x6, x2, x2                     // ADD <Xd|SP>, <Xn|SP>, X<m>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ADDXrx                         V1UnitI, V1UnitM,                                 add	x30, x1, w25, uxtb             // ADD <Xd|SP>, <Xn|SP>, <R><m>, <extend>  \\ ALU, basic  \\ 1 2  2  2.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ADDXrx                         V1UnitI, V1UnitM,                                 add	x9, x5, w8, uxtb #2            // ADD <Xd|SP>, <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     4.00     -    ADDXrs                         V1UnitI,                                          add	x25, x25, x4, lsl #3           // ADD <Xd|SP>, <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ADDWri                         V1UnitI,                                          add	wsp, wsp, #3397                // ADD <Wd|WSP>, <Wn|WSP>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ADDWri                         V1UnitI,                                          add	wsp, wsp, #1985, lsl #12       // ADD <Wd|WSP>, <Wn|WSP>, #<imm>, <shift>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ADDXri                         V1UnitI,                                          add	x12, x20, #1434                // ADD <Xd|SP>, <Xn|SP>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ADDXri                         V1UnitI,                                          add	x23, x24, #2054, lsl #12       // ADD <Xd|SP>, <Xn|SP>, #<imm>, <shift>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ADD_ZI_S                       V1UnitV, V1UnitV01,                               add	z25.s, z25.s, #244             // ADD <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ADD_ZI_H                       V1UnitV, V1UnitV01,                               add	z27.h, z27.h, #19968           // ADD <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    ADDWrs                         V1UnitI,                                          add	w0, w4, w20                    // ADD <Wd>, <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, no flagset   \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ADDWrs                         V1UnitI, V1UnitM,                                 add	w11, w7, w19, lsl #7           // ADD <Wd>, <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    ADDWrs                         V1UnitI, V1UnitM,                                 add	w10, w7, w6, lsr #0            // ADD <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     4.00     -    ADDXrs                         V1UnitI,                                          add	x12, x0, x12, lsl #3           // ADD <Xd>, <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ADDXrs                         V1UnitI, V1UnitM,                                 add	x6, x4, x3, lsl #15            // ADD <Xd>, <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    ADDXrs                         V1UnitI, V1UnitM,                                 add	x16, x0, x26, lsr #52          // ADD <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     4.00     -    ADDv1i64                       V1UnitV,                                          add	d1, d2, d17                    // ADD <V><d>, <V><n>, <V><m>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    ADDv2i64                       V1UnitV,                                          add	v5.2d, v31.2d, v12.2d          // ADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    ADD_ZPmZ_D                     V1UnitV, V1UnitV01,                               add	z6.d, p6/m, z6.d, z7.d         // ADD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ADD_ZZZ_H                      V1UnitV, V1UnitV01,                               add	z2.h, z22.h, z4.h              // ADD <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    ADDHNv2i64_v2i32               V1UnitV,                                          addhn	v13.2s, v9.2d, v26.2d          // ADDHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    ADDHNv4i32_v8i16               V1UnitV,                                          addhn2	v29.8h, v13.4s, v16.4s         // ADDHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    ADDPv2i64p                     V1UnitV,                                          addp	d16, v17.2d                    // ADDP <V><d>, <Vn>.<T>  \\ ASIMD arith, pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    ADDPv4i32                      V1UnitV,                                          addp	v1.4s, v2.4s, v20.4s           // ADDP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    ADDPL_XXI                      V1UnitI, V1UnitM, V1UnitM0,                       addpl	x7, x3, #30                    // ADDPL <Xd|SP>, <Xn|SP>, #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      adds	w29, wsp, w0                   // ADDS <Wd>, <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSWrx                        V1UnitFlg, V1UnitI,                               adds	w3, wsp, w17, uxtb             // ADDS <Wd>, <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      adds	w11, wsp, w13, sxth #4         // ADDS <Wd>, <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      adds	w30, wsp, w2, lsl #3           // ADDS <Wd>, <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 2  2  2.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrs                        V1UnitFlg, V1UnitI,                               adds	x18, x30, x24                  // ADDS <Xd>, <Xn|SP>, X<m>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSXrx64                      V1UnitFlg, V1UnitI, V1UnitM,                      adds	x17, x0, x6, sxtx              // ADDS <Xd>, <Xn|SP>, <R><m>, <extend>  \\ ALU, basic, flagset  \\ 1 2  2  2.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrx                        V1UnitFlg, V1UnitI,                               adds	x28, x8, w6, uxtb #1           // ADDS <Xd>, <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 1  1  3.0 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrs                        V1UnitFlg, V1UnitI,                               adds	x3, x16, x3, lsl #1            // ADDS <Xd>, <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSWri                        V1UnitFlg, V1UnitI,                               adds	w14, wsp, #3787                // ADDS <Wd>, <Wn|WSP>, #<imm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSWri                        V1UnitFlg, V1UnitI,                               adds	w7, wsp, #702, lsl #12         // ADDS <Wd>, <Wn|WSP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 1  1  3.0 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXri                        V1UnitFlg, V1UnitI,                               adds	x6, x17, #3827                 // ADDS <Xd>, <Xn|SP>, #<imm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXri                        V1UnitFlg, V1UnitI,                               adds	x18, x30, #1484, lsl #12       // ADDS <Xd>, <Xn|SP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 1  1  3.0 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    ADDSWrs                        V1UnitFlg, V1UnitI,                               adds	w10, w18, w21                  // ADDS <Wd>, <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSWrs                        V1UnitFlg, V1UnitI,                               adds	w2, w8, w19, lsl #2            // ADDS <Wd>, <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      adds	w30, w29, w0, lsl #24          // ADDS <Wd>, <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      adds	w19, w24, w19, asr #1          // ADDS <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrs                        V1UnitFlg, V1UnitI,                               adds	x14, x11, x12                  // ADDS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrs                        V1UnitFlg, V1UnitI,                               adds	x22, x6, x8, lsl #2            // ADDS <Xd>, <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      adds	x0, x16, x16, lsl #50          // ADDS <Xd>, <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    ADDSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      adds	x25, x9, x14, lsr #61          // ADDS <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  2      4    4     2.00     -    ADDVv8i8v                      V1UnitV[2], V1UnitV13,                            addv	b6, v29.8b                     // ADDV B<d>, <Vn>.8B  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.0 V1UnitV13
# CHECK-NEXT:  2      4    4     1.00     -    ADDVv16i8v                     V1UnitV[2], V1UnitV13[2],                         addv	b2, v15.16b                    // ADDV B<d>, <Vn>.16B  \\ ASIMD arith, reduce, 16B  \\ 2 4  4  1.0 V1UnitV13[2]
# CHECK-NEXT:  1      2    2     2.00     -    ADDVv4i16v                     V1UnitV, V1UnitV13,                               addv	h30, v1.4h                     // ADDV H<d>, <Vn>.4H  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  2      4    4     2.00     -    ADDVv8i16v                     V1UnitV[2], V1UnitV13,                            addv	h26, v13.8h                    // ADDV H<d>, <Vn>.8H  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    ADDVv4i32v                     V1UnitV, V1UnitV13,                               addv	s30, v0.4s                     // ADDV S<d>, <Vn>.4S  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     1.00     -    ADDVL_XXI                      V1UnitI, V1UnitM, V1UnitM0,                       addvl	x24, x19, #-19                 // ADDVL <Xd|SP>, <Xn|SP>, #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     4.00     -    ADR                            V1UnitI,                                          adr	x19, test                      // ADR <Xd>, <label>  \\ Address generation  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ADR_LSL_ZZZ_S_0                V1UnitV, V1UnitV01,                               adr	z10.s, [z16.s, z4.s]           // ADR <Zd>.<T>, [<Zn>.<T>, <Zm>.<T>]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ADR_LSL_ZZZ_S_1                V1UnitV, V1UnitV01,                               adr	z6.s, [z11.s, z8.s, lsl #1]    // ADR <Zd>.<T>, [<Zn>.<T>, <Zm>.<T>, <mod> #<amount>]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ADR_SXTW_ZZZ_D_0               V1UnitV, V1UnitV01,                               adr	z31.d, [z4.d, z18.d, sxtw]     // ADR <Zd>.D, [<Zn>.D, <Zm>.D, SXTW ]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ADR_SXTW_ZZZ_D_1               V1UnitV, V1UnitV01,                               adr	z9.d, [z3.d, z7.d, sxtw #1]    // ADR <Zd>.D, [<Zn>.D, <Zm>.D, SXTW #<amount>]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ADR_UXTW_ZZZ_D_0               V1UnitV, V1UnitV01,                               adr	z30.d, [z2.d, z18.d, uxtw]     // ADR <Zd>.D, [<Zn>.D, <Zm>.D, UXTW ]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ADR_UXTW_ZZZ_D_3               V1UnitV, V1UnitV01,                               adr	z20.d, [z13.d, z31.d, uxtw #3]  // ADR <Zd>.D, [<Zn>.D, <Zm>.D, UXTW #<amount>]  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    ADRP                           V1UnitI,                                          adrp	x7, test                       // ADRP <Xd>, <label>  \\ Address generation  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ANDWri                         V1UnitI,                                          and	wsp, w10, #0xe00               // AND <Wd|WSP>, <Wn>, #<imms>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ANDXri                         V1UnitI,                                          and	x30, x15, #0xe00               // AND <Xd|SP>, <Xn>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZI                         V1UnitV, V1UnitV01,                               and	z20.b, z20.b, #0x70            // AND <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZI                         V1UnitV, V1UnitV01,                               and	z23.h, z23.h, #0x60            // AND <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZI                         V1UnitV, V1UnitV01,                               and	z28.s, z28.s, #0x2             // AND <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZI                         V1UnitV, V1UnitV01,                               and	z25.d, z25.d, #0x4             // AND <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     1.00     -    AND_PPzPP                      V1UnitI, V1UnitM, V1UnitM0,                       and	p1.b, p7/z, p4.b, p0.b         // AND <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     4.00     -    ANDWrs                         V1UnitI,                                          and	w23, w11, w20                  // AND <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ANDWrs                         V1UnitI,                                          and	w5, w22, w4, asr #22           // AND <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ANDXrs                         V1UnitI,                                          and	x18, x3, x28                   // AND <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ANDXrs                         V1UnitI,                                          and	x13, x21, x24, asr #1          // AND <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    ANDv8i8                        V1UnitV,                                          and	v3.8b, v3.8b, v15.8b           // AND <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZPmZ_B                     V1UnitV, V1UnitV01,                               and	z20.b, p4/m, z20.b, z5.b       // AND <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZZZ                        V1UnitV, V1UnitV01,                               and	z2.d, z1.d, z12.d              // AND <Zd>.D, <Zn>.D, <Zm>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     3.00     -    ANDSWri                        V1UnitFlg, V1UnitI,                               ands	w21, w15, #0x70                // ANDS <Wd>, <Wn>, #<imms>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ANDSXri                        V1UnitFlg, V1UnitI,                               ands	x17, x2, #0x60                 // ANDS <Xd>, <Xn>, #<immd>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ANDSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      ands	w19, w8, w25                   // ANDS <Wd>, <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ANDSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      ands	w26, w11, w19, asr #6          // ANDS <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift by immed, flagset, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    ANDSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      ands	x21, x3, x17                   // ANDS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ANDSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      ands	x29, x0, x5, lsr #62           // ANDS <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, flagset  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  2      2    2     0.50     -    ANDS_PPzPP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              ands	p4.b, p3/z, p4.b, p2.b         // ANDS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  4      12   12    0.50     -    ANDV_VPZ_D                     V1UnitV[4], V1UnitV01[4],                         andv	d20, p1, z28.d                 // ANDV <V><d>, <Pg>, <Zn>.<T>  \\ Reduction, logical   \\ 4 12  12  0.50 V1UnitV01[4]
# CHECK-NEXT:  1      1    1     4.00     -    SBFMWri                        V1UnitI,                                          asr	w9, w13, #0                    // ASR <Wd>, <Wn>, #<shifts>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SBFMXri                        V1UnitI,                                          asr	x21, x12, #48                  // ASR <Xd>, <Xn>, #<shiftd>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     1.00     -    ASR_ZPmI_B                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z0.b, p4/m, z0.b, #3           // ASR <Zdn>.B, <Pg>/M, <Zdn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASR_ZPmI_H                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z2.h, p2/m, z2.h, #7           // ASR <Zdn>.H, <Pg>/M, <Zdn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASR_ZPmI_S                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z19.s, p2/m, z19.s, #1         // ASR <Zdn>.S, <Pg>/M, <Zdn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASR_ZPmI_D                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z6.d, p5/m, z6.d, #25          // ASR <Zdn>.D, <Pg>/M, <Zdn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASR_ZZI_B                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z24.b, z5.b, #3                // ASR <Zd>.B, <Zn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASR_ZZI_H                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z22.h, z16.h, #2               // ASR <Zd>.H, <Zn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASR_ZZI_S                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z9.s, z12.s, #8                // ASR <Zd>.S, <Zn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASR_ZZI_D                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z23.d, z10.d, #25              // ASR <Zd>.D, <Zn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      1    1     4.00     -    ASRVWr                         V1UnitI,                                          asr	w29, w11, w27                  // ASR <Wd>, <Wn>, <Wm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ASRVXr                         V1UnitI,                                          asr	x1, x4, x23                    // ASR <Xd>, <Xn>, <Xm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     1.00     -    ASR_ZPmZ_B                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z29.b, p2/m, z29.b, z20.b      // ASR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASR_WIDE_ZPmZ_B                V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z6.b, p3/m, z6.b, z19.d        // ASR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASR_WIDE_ZZZ_H                 V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asr	z18.h, z2.h, z24.d             // ASR <Zd>.<T>, <Zn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      4    4     1.00     -    ASRD_ZPmI_B                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asrd	z8.b, p5/m, z8.b, #1           // ASRD <Zdn>.B, <Pg>/M, <Zdn>.B, #<constb>  \\ Arithmetic, shift right for divide  \\ 1 4  4  1.0 V1UnitV1
# CHECK-NEXT:  1      4    4     1.00     -    ASRD_ZPmI_H                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asrd	z12.h, p3/m, z12.h, #5         // ASRD <Zdn>.H, <Pg>/M, <Zdn>.H, #<consth>  \\ Arithmetic, shift right for divide  \\ 1 4  4  1.0 V1UnitV1
# CHECK-NEXT:  1      4    4     1.00     -    ASRD_ZPmI_S                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asrd	z14.s, p6/m, z14.s, #13        // ASRD <Zdn>.S, <Pg>/M, <Zdn>.S, #<consts>  \\ Arithmetic, shift right for divide  \\ 1 4  4  1.0 V1UnitV1
# CHECK-NEXT:  1      4    4     1.00     -    ASRD_ZPmI_D                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asrd	z0.d, p5/m, z0.d, #2           // ASRD <Zdn>.D, <Pg>/M, <Zdn>.D, #<constd>  \\ Arithmetic, shift right for divide  \\ 1 4  4  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    ASRR_ZPmZ_H                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          asrr	z0.h, p4/m, z0.h, z9.h         // ASRR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      1    1     4.00     -    ASRVWr                         V1UnitI,                                          asr	w3, w25, w22                   // ASRV <Wd>, <Wn>, <Wm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ASRVXr                         V1UnitI,                                          asr	x6, x0, x9                     // ASRV <Xd>, <Xn>, <Xm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     15.00    SE   SYSxt                                                                            at	s1e2w, x17                     // AT <at_op>, <Xt>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     2.00     -    B                              V1UnitB,                                          b	test                           // B <label>  \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.eq	test                           // B.eq <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.eq	test                           // B.none <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.ne	test                           // B.ne <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.ne	test                           // B.any <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.hs	test                           // B.cs <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.hs	test                           // B.hs <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.hs	test                           // B.nlast <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.lo	test                           // B.cc <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.lo	test                           // B.lo <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.lo	test                           // B.last <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.mi	test                           // B.mi <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.mi	test                           // B.first <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.pl	test                           // B.pl <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.pl	test                           // B.nfrst <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.vs	test                           // B.vs <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.vc	test                           // B.vc <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.hi	test                           // B.hi <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.hi	test                           // B.pmore <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.ls	test                           // B.ls <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.ls	test                           // B.plast <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.ge	test                           // B.ge <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.ge	test                           // B.tcont <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.lt	test                           // B.lt <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.lt	test                           // B.tstop <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.gt	test                           // B.gt <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.le	test                           // B.le <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.al	test                           // B.al <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    Bcc                            V1UnitB,                                          b.nv	test                           // B.nv <label> \\ Branch, immed  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      3    3     2.00     -    BFCVT                          V1UnitV, V1UnitV02,                               bfcvt	h4, s2                         // BFCVT <Hd>, <Sn>  \\ Scalar convert, F32 to BF16  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     1.00     -    BFCVT_ZPmZ                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          bfcvt	z1.h, p7/m, z9.s               // BFCVT <Zd>.H, <Pg>/M, <Zn>.S  \\ Convert, F32 to BF16  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     2.00     -    BFCVTN                         V1UnitV, V1UnitV02,                               bfcvtn	v25.4h, v28.4s                 // BFCVTN <Vd>.<Ta>, <Vn>.4S  \\ ASIMD convert, F32 to BF16  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  1      4    4     2.00     -    BFCVTN2                        V1UnitV, V1UnitV02,                               bfcvtn2	v18.8h, v26.4s         // BFCVTN2 <Vd>.<Ta>, <Vn>.4S  \\ ASIMD convert, F32 to BF16  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  1      4    4     1.00     -    BFCVTNT_ZPmZ                   V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          bfcvtnt	z25.h, p5/m, z8.s      // BFCVTNT <Zd>.H, <Pg>/M, <Zn>.S  \\ Convert, F32 to BF16  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    2     4.00     -    BF16DOTlanev4bf16              V1UnitV,                                          bfdot	v20.2s, v5.4h, v20.2h[1]       // BFDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.2H[<index>]  \\ ASIMD dot product  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     2.00     -    BFDOT_ZZI                      V1UnitV, V1UnitV01,                               bfdot	z16.s, z27.h, z6.h[0]          // BFDOT <Zda>.S, <Zn>.H, <Zm>.H[<imm>]  \\ Dot product  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     4.00     -    BFDOTv4bf16                    V1UnitV,                                          bfdot	v11.2s, v19.4h, v26.4h         // BFDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD dot product  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     2.00     -    BFDOT_ZZZ                      V1UnitV, V1UnitV01,                               bfdot	z25.s, z18.h, z10.h            // BFDOT <Zda>.S, <Zn>.H, <Zm>.H  \\ Dot product  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    BFMWri                         V1UnitI, V1UnitM,                                 bfi	w22, w2, #16, #9               // BFI <Wd>, <Wn>, #<lsbs>, #<widths>  \\ Bit field insert/clear, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    BFMXri                         V1UnitI, V1UnitM,                                 bfi	x2, x14, #42, #21              // BFI <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ Bit field insert/clear, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    BFMWri                         V1UnitI, V1UnitM,                                 bfi	w27, w10, #25, #3              // BFM <Wd>, <Wn>, #<immrs>, #<immss>  \\ Bitfield move, insert  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    BFMXri                         V1UnitI, V1UnitM,                                 bfi	x25, x13, #9, #15              // BFM <Xd>, <Xn>, #<immrd>, #<immsd>  \\ Bitfield move, insert  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      5    2     2.00     -    BFMLALB_ZZZI                   V1UnitV, V1UnitV01,                               bfmlalb	z22.s, z24.h, z6.h[4]  // BFMLALB <Zda>.S, <Zn>.H, <Zm>.H[<imm>]  \\ Multiply accumulate long  \\ 1 5 2 2.0 V1UnitV01
# CHECK-NEXT:  1      5    2     2.00     -    BFMLALB_ZZZ                    V1UnitV, V1UnitV01,                               bfmlalb	z6.s, z14.h, z26.h     // BFMLALB <Zda>.S, <Zn>.H, <Zm>.H  \\ Multiply accumulate long  \\ 1 5 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     4.00     -    BFMLALBIdx                     V1UnitV,                                          bfmlalb	v4.4s, v26.8h, v10.h[3]  // BFMLALB <Vd>.4S, <Vn>.8H, <Vm>.H[<index>]  \\ ASIMD multiply accumulate long  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    BFMLALTIdx                     V1UnitV,                                          bfmlalt	v2.4s, v7.8h, v6.h[4]  // BFMLALT <Vd>.4S, <Vn>.8H, <Vm>.H[<index>]  \\ ASIMD multiply accumulate long  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    BFMLALB                        V1UnitV,                                          bfmlalb	v16.4s, v8.8h, v6.8h   // BFMLALB <Vd>.4S, <Vn>.8H, <Vm>.8H  \\ ASIMD multiply accumulate long  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    BFMLALT                        V1UnitV,                                          bfmlalt	v0.4s, v2.8h, v25.8h   // BFMLALT <Vd>.4S, <Vn>.8H, <Vm>.8H  \\ ASIMD multiply accumulate long  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      5    2     2.00     -    BFMLALT_ZZZI                   V1UnitV, V1UnitV01,                               bfmlalt	z4.s, z0.h, z3.h[0]    // BFMLALT <Zda>.S, <Zn>.H, <Zm>.H[<imm>]  \\ Multiply accumulate long  \\ 1 5 2 2.0 V1UnitV01
# CHECK-NEXT:  1      5    2     2.00     -    BFMLALT_ZZZ                    V1UnitV, V1UnitV01,                               bfmlalt	z12.s, z29.h, z14.h    // BFMLALT <Zda>.S, <Zn>.H, <Zm>.H  \\ Multiply accumulate long  \\ 1 5 2 2.0 V1UnitV01
# CHECK-NEXT:  1      5    3     4.00     -    BFMMLA                         V1UnitV,                                          bfmmla	v25.4s, v6.8h, v29.8h          // BFMMLA <Vd>.4S, <Vn>.8H, <Vm>.8H  \\ ASIMD matrix multiply accumulate  \\ 1 5 3 4.0 V1UnitV
# CHECK-NEXT:  1      5    3     2.00     -    BFMMLA_ZZZ                     V1UnitV, V1UnitV01,                               bfmmla	z8.s, z2.h, z0.h               // BFMMLA <Zda>.S, <Zn>.H, <Zm>.H  \\ Matrix multiply accumulate  \\ 1 5 3 2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    BFMWri                         V1UnitI, V1UnitM,                                 bfxil	w18, w23, #21, #3              // BFXIL <Wd>, <Wn>, #<lsbs>, #<widths>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     2.00     -    BFMXri                         V1UnitI, V1UnitM,                                 bfxil	x19, x9, #44, #20              // BFXIL <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZI                         V1UnitV, V1UnitV01,                               and	z20.b, z20.b, #0x8f            // BIC <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZI                         V1UnitV, V1UnitV01,                               and	z0.h, z0.h, #0xff9f            // BIC <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZI                         V1UnitV, V1UnitV01,                               and	z3.s, z3.s, #0xfffffffd        // BIC <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    AND_ZI                         V1UnitV, V1UnitV01,                               and	z18.d, z18.d, #0xfffffffffffffffb  // BIC <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     1.00     -    BIC_PPzPP                      V1UnitI, V1UnitM, V1UnitM0,                       bic	p6.b, p7/z, p1.b, p4.b         // BIC <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     4.00     -    BICWrs                         V1UnitI,                                          bic	w30, w22, w9                   // BIC <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    BICWrs                         V1UnitI,                                          bic	w17, w15, w22, asr #25         // BIC <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    BICXrs                         V1UnitI,                                          bic	x9, x10, x0                    // BIC <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    BICXrs                         V1UnitI,                                          bic	x18, x3, x21, asr #48          // BIC <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    BICv8i16                       V1UnitV,                                          bic	v22.8h, #13                    // BIC <Vd>.<Th>, #<imm8>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    BICv4i16                       V1UnitV,                                          bic	v0.4h, #24                     // BIC <Vd>.<Th>, #<imm8>, LSL #<amounth>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    BICv2i32                       V1UnitV,                                          bic	v2.2s, #247                    // BIC <Vd>.<T>, #<imm8>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    BICv2i32                       V1UnitV,                                          bic	v19.2s, #241, lsl #16          // BIC <Vd>.<T>, #<imm8>, LSL #<amount>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    BICv8i8                        V1UnitV,                                          bic	v17.8b, v19.8b, v13.8b         // BIC <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    BIC_ZPmZ_B                     V1UnitV, V1UnitV01,                               bic	z21.b, p2/m, z21.b, z25.b      // BIC <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    BIC_ZZZ                        V1UnitV, V1UnitV01,                               bic	z29.d, z8.d, z8.d              // BIC <Zd>.D, <Zn>.D, <Zm>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    BICSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      bics	w27, w16, w28                  // BICS <Wd>, <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    BICSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      bics	w26, w18, w23, lsr #5          // BICS <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift by immed, flagset, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    BICSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      bics	x16, x11, x18                  // BICS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    BICSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      bics	x7, x1, x9, asr #61            // BICS <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, flagset  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  2      2    2     0.50     -    BICS_PPzPP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              bics	p3.b, p1/z, p2.b, p2.b         // BICS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     4.00     -    BIFv16i8                       V1UnitV,                                          bif	v2.16b, v24.16b, v16.16b       // BIF <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD bitwise insert  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    BITv8i8                        V1UnitV,                                          bit	v14.8b, v15.8b, v22.8b         // BIT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD bitwise insert  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      1    1     2.00     -    BL                             V1UnitB, V1UnitI, V1UnitS,                        bl	test                           // BL <label>  \\ Branch and link, immed  \\ 2 1  1  2.0 V1UnitB,V1UnitS
# CHECK-NEXT:  2      1    1     2.00     -    BLR                            V1UnitB, V1UnitI, V1UnitS,                        blr	x0                             // BLR <Xn>  \\ Branch and link, register   \\ 2 1  1  2.0 V1UnitB,V1UnitS
# CHECK-NEXT:  1      1    1     2.00     -    BR                             V1UnitB,                                          br	x16                            // BR <Xn>  \\ Branch, register  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     15.00    SE   BRK                                                                              brk	#0x609e                        // BRK #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     1.00     -    BRKA_PPmP                      V1UnitI, V1UnitM, V1UnitM0,                       brka	p5.b, p0/m, p5.b               // BRKA <Pd>.B, <Pg>/<ZM>, <Pn>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  2      3    3     0.50     -    BRKAS_PPzP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              brkas	p0.b, p4/z, p2.b               // BRKAS <Pd>.B, <Pg>/Z, <Pn>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     1.00     -    BRKB_PPmP                      V1UnitI, V1UnitM, V1UnitM0,                       brkb	p5.b, p5/m, p1.b               // BRKB <Pd>.B, <Pg>/<ZM>, <Pn>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  2      3    3     0.50     -    BRKBS_PPzP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              brkbs	p1.b, p1/z, p2.b               // BRKBS <Pd>.B, <Pg>/Z, <Pn>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     1.00     -    BRKN_PPzP                      V1UnitI, V1UnitM, V1UnitM0,                       brkn	p2.b, p1/z, p1.b, p2.b         // BRKN <Pdm>.B, <Pg>/Z, <Pn>.B, <Pdm>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  2      3    3     0.50     -    BRKNS_PPzP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              brkns	p0.b, p4/z, p6.b, p0.b         // BRKNS <Pdm>.B, <Pg>/Z, <Pn>.B, <Pdm>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     1.00     -    BRKPA_PPzPP                    V1UnitI, V1UnitM, V1UnitM0,                       brkpa	p3.b, p4/z, p6.b, p6.b         // BRKPA <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  2      3    3     0.50     -    BRKPAS_PPzPP                   V1UnitI[2], V1UnitM[2], V1UnitM0[2],              brkpas	p7.b, p5/z, p6.b, p1.b         // BRKPAS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     1.00     -    BRKPB_PPzPP                    V1UnitI, V1UnitM, V1UnitM0,                       brkpb	p0.b, p3/z, p1.b, p7.b         // BRKPB <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Loop control, based on predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  2      3    3     0.50     -    BRKPBS_PPzPP                   V1UnitI[2], V1UnitM[2], V1UnitM0[2],              brkpbs	p2.b, p0/z, p2.b, p3.b         // BRKPBS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Loop control, based on predicate and flag setting  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     4.00     -    BSLv16i8                       V1UnitV,                                          bsl	v1.16b, v22.16b, v12.16b       // BSL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD bitwise insert  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     2.00     -    CBNZW                          V1UnitB,                                          cbnz	w17, test                      // CBNZ <Wt>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    CBNZX                          V1UnitB,                                          cbnz	x21, test                      // CBNZ <Xt>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    CBZW                           V1UnitB,                                          cbz	w12, test                      // CBZ <Wt>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    CBZX                           V1UnitB,                                          cbz	x20, test                      // CBZ <Xt>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     4.00     -    CCMNWi                         V1UnitI,                                          ccmn	w30, #30, #14, vs              // CCMN <Wn>, #<imm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CCMNXi                         V1UnitI,                                          ccmn	x4, #29, #13, gt               // CCMN <Xn>, #<imm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CCMNWr                         V1UnitI,                                          ccmn	w12, w10, #9, mi               // CCMN <Wn>, <Wm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CCMNXr                         V1UnitI,                                          ccmn	x12, x24, #13, vs              // CCMN <Xn>, <Xm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CCMPWi                         V1UnitI,                                          ccmp	w18, #16, #12, hi              // CCMP <Wn>, #<imm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CCMPXi                         V1UnitI,                                          ccmp	x9, #3, #3, eq                 // CCMP <Xn>, #<imm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CCMPWr                         V1UnitI,                                          ccmp	w6, w12, #9, gt                // CCMP <Wn>, <Wm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CCMPXr                         V1UnitI,                                          ccmp	x12, x2, #13, hs               // CCMP <Xn>, <Xm>, #<nzcv>, <cond>  \\ Conditional compare  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CSINCWr                        V1UnitI,                                          cinc	w28, w12, gt                   // CINC <Wd>, <Wn>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    CSINCXr                        V1UnitI,                                          cinc	x13, x8, eq                    // CINC <Xd>, <Xn>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    CSINVWr                        V1UnitI,                                          cinv	w22, w0, hi                    // CINV <Wd>, <Wn>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    CSINVXr                        V1UnitI,                                          cinv	x29, x26, mi                   // CINV <Xd>, <Xn>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      3    3     1.00     -    CLASTA_VPZ_H                   V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          clasta	h11, p6, h11, z12.h            // CLASTA <V><dn>, <Pg>, <V><dn>, <Zm>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
# CHECK-NEXT:  2      9    9     1.00     -    CLASTA_RPZ_D                   V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   clasta	x20, p6, x20, z16.d  // CLASTA <R><dn>, <Pg>, <R><dn>, <Zm>.<T>  \\ Conditional extract operations, scalar form  \\ 2 9  9  1.0 V1UnitM0,V1UnitV1
# CHECK-NEXT:  1      3    3     1.00     -    CLASTA_ZPZ_D                   V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          clasta	z7.d, p0, z7.d, z5.d           // CLASTA <Zdn>.<T>, <Pg>, <Zdn>.<T>, <Zm>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
# CHECK-NEXT:  1      3    3     1.00     -    CLASTB_VPZ_B                   V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          clastb	b17, p4, b17, z24.b            // CLASTB <V><dn>, <Pg>, <V><dn>, <Zm>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
# CHECK-NEXT:  2      9    9     1.00     -    CLASTB_RPZ_B                   V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   clastb	w1, p2, w1, z13.b  // CLASTB <R><dn>, <Pg>, <R><dn>, <Zm>.<T>  \\ Conditional extract operations, scalar form  \\ 2 9  9  1.0 V1UnitM0,V1UnitV1
# CHECK-NEXT:  1      3    3     1.00     -    CLASTB_ZPZ_B                   V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          clastb	z0.b, p5, z0.b, z27.b          // CLASTB <Zdn>.<T>, <Pg>, <Zdn>.<T>, <Zm>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
# CHECK-NEXT:  1      1    1     15.00    SE   CLREX                                                                            clrex                                // CLREX   \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   CLREX                                                                            clrex	#5                             // CLREX #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     4.00     -    CLSv4i32                       V1UnitV,                                          cls	v2.4s, v26.4s                  // CLS <Vd>.<T>, <Vn>.<T>  \\ ASIMD count  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    CLSWr                          V1UnitI,                                          cls	w21, w22                       // CLS <Wd>, <Wn>  \\ Count leading  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CLSXr                          V1UnitI,                                          cls	x3, x10                        // CLS <Xd>, <Xn>  \\ Count leading  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    CLS_ZPmZ_H                     V1UnitV, V1UnitV01,                               cls	z19.h, p2/m, z27.h             // CLS <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Count/reverse bits  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    CLZv2i32                       V1UnitV,                                          clz	v25.2s, v29.2s                 // CLZ <Vd>.<T>, <Vn>.<T>  \\ ASIMD count  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    CLZWr                          V1UnitI,                                          clz	w8, w20                        // CLZ <Wd>, <Wn>  \\ Count leading zeros  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CLZXr                          V1UnitI,                                          clz	x7, x2                         // CLZ <Xd>, <Xn>  \\ Count leading zeros  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    CLZ_ZPmZ_S                     V1UnitV, V1UnitV01,                               clz	z14.s, p0/m, z11.s             // CLZ <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Count/reverse bits  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    CMEQv1i64                      V1UnitV,                                          cmeq	d9, d1, d15                    // CMEQ <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMEQv2i32                      V1UnitV,                                          cmeq	v1.2s, v17.2s, v19.2s          // CMEQ <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMEQv1i64rz                    V1UnitV,                                          cmeq	d6, d17, #0                    // CMEQ <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMEQv8i16rz                    V1UnitV,                                          cmeq	v11.8h, v25.8h, #0             // CMEQ <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMGEv1i64                      V1UnitV,                                          cmge	d16, d29, d4                   // CMGE <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMGEv2i32                      V1UnitV,                                          cmge	v6.2s, v28.2s, v14.2s          // CMGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMGEv1i64rz                    V1UnitV,                                          cmge	d23, d23, #0                   // CMGE <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMGEv4i32rz                    V1UnitV,                                          cmge	v7.4s, v1.4s, #0               // CMGE <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMGTv1i64                      V1UnitV,                                          cmgt	d27, d9, d20                   // CMGT <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMGTv8i16                      V1UnitV,                                          cmgt	v31.8h, v0.8h, v31.8h          // CMGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMGTv1i64rz                    V1UnitV,                                          cmgt	d14, d29, #0                   // CMGT <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMGTv16i8rz                    V1UnitV,                                          cmgt	v19.16b, v1.16b, #0            // CMGT <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMHIv1i64                      V1UnitV,                                          cmhi	d0, d11, d6                    // CMHI <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMHIv8i8                       V1UnitV,                                          cmhi	v25.8b, v5.8b, v3.8b           // CMHI <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMHSv1i64                      V1UnitV,                                          cmhs	d6, d13, d24                   // CMHS <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMHSv16i8                      V1UnitV,                                          cmhs	v14.16b, v4.16b, v27.16b       // CMHS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMLEv1i64rz                    V1UnitV,                                          cmle	d11, d26, #0                   // CMLE <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMLEv2i64rz                    V1UnitV,                                          cmle	v21.2d, v30.2d, #0             // CMLE <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMLTv1i64rz                    V1UnitV,                                          cmlt	d27, d26, #0                   // CMLT <V><d>, <V><n>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMLTv4i16rz                    V1UnitV,                                          cmlt	v26.4h, v31.4h, #0             // CMLT <Vd>.<T>, <Vn>.<T>, #0  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      cmn	wsp, w6                        // CMN <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      cmn	wsp, w27, sxth                 // CMN <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      cmn	wsp, w15, uxth #2              // CMN <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      cmn	wsp, w28, lsl #4               // CMN <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrs                        V1UnitFlg, V1UnitI,                               cmn	x21, x25                       // CMN <Xn|SP>, X<m>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrx                        V1UnitFlg, V1UnitI,                               cmn	x16, w3, uxtb                  // CMN <Xn|SP>, <R><m>, <extend>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrx                        V1UnitFlg, V1UnitI,                               cmn	x10, w2, uxtb #4               // CMN <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 1  1  3.00 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrs                        V1UnitFlg, V1UnitI,                               cmn	x2, x9, lsl #2                 // CMN <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSWri                        V1UnitFlg, V1UnitI,                               cmn	wsp, #87                       // CMN <Wn|WSP>, #<imm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSWri                        V1UnitFlg, V1UnitI,                               cmn	wsp, #1199, lsl #12            // CMN <Wn|WSP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 1  1  3.00 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXri                        V1UnitFlg, V1UnitI,                               cmn	x15, #1872                     // CMN <Xn|SP>, #<imm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXri                        V1UnitFlg, V1UnitI,                               cmn	x7, #2434, lsl #12             // CMN <Xn|SP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 1  1  3.00 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    ADDSWrs                        V1UnitFlg, V1UnitI,                               cmn	w22, w23                       // CMN <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSWrs                        V1UnitFlg, V1UnitI,                               cmn	w1, w11, lsl #3                // CMN <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      cmn	w15, w8, lsl #24               // CMN <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    ADDSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      cmn	w3, w3, asr #6                 // CMN <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrs                        V1UnitFlg, V1UnitI,                               cmn	x10, x17                       // CMN <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ADDSXrs                        V1UnitFlg, V1UnitI,                               cmn	x2, x2, lsl #1                 // CMN <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ADDSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      cmn	x29, x3, lsl #34               // CMN <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    ADDSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      cmn	x21, x16, asr #52              // CMN <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      cmp	wsp, w8                        // CMP <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      cmp	wsp, w19, sxth                 // CMP <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      cmp	wsp, w29, sxtb #1              // CMP <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      cmp	wsp, w22, lsl #4               // CMP <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrs                        V1UnitFlg, V1UnitI,                               cmp	x28, x19                       // CMP <Xn|SP>, X<m>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrx                        V1UnitFlg, V1UnitI,                               cmp	x15, w15, uxtb                 // CMP <Xn|SP>, <R><m>, <extend>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSXrx64                      V1UnitFlg, V1UnitI, V1UnitM,                      cmp	x26, x14, sxtx #1              // CMP <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrs                        V1UnitFlg, V1UnitI,                               cmp	x30, x2, lsl #2                // CMP <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSWri                        V1UnitFlg, V1UnitI,                               cmp	wsp, #1603                     // CMP <Wn|WSP>, #<imm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSWri                        V1UnitFlg, V1UnitI,                               cmp	wsp, #3756, lsl #12            // CMP <Wn|WSP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 1  1  3.00 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXri                        V1UnitFlg, V1UnitI,                               cmp	x7, #1698                      // CMP <Xn|SP>, #<imm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXri                        V1UnitFlg, V1UnitI,                               cmp	x25, #754, lsl #12             // CMP <Xn|SP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 1  1  3.00 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    SUBSWrs                        V1UnitFlg, V1UnitI,                               cmp	w26, w16, lsl #2               // CMP <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      cmp	w13, w20, lsl #26              // CMP <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      cmp	w21, w1, lsr #16               // CMP <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrs                        V1UnitFlg, V1UnitI,                               cmp	x10, x25, lsl #1               // CMP <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      cmp	x5, x15, lsl #21               // CMP <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      cmp	x13, x19, lsr #7               // CMP <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  2      4    4     1.00     -    CMPEQ_PPzZI_H                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpeq	p3.h, p4/z, z9.h, #9  // CMPEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPGE_PPzZI_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpge	p6.d, p4/z, z0.d, #15  // CMPGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPGT_PPzZI_B                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpgt	p6.b, p3/z, z2.b, #14  // CMPGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPHI_PPzZI_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmphi	p4.d, p2/z, z25.d, #119  // CMPHI <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPHS_PPzZI_H                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmphs	p4.h, p7/z, z6.h, #86  // CMPHS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPLE_PPzZI_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmple	p2.d, p2/z, z22.d, #-16  // CMPLE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPLO_PPzZI_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmplo	p0.d, p5/z, z20.d, #61  // CMPLO <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPLS_PPzZI_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpls	p1.d, p1/z, z29.d, #119  // CMPLS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPLT_PPzZI_B                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmplt	p7.b, p1/z, z29.b, #14  // CMPLT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPNE_PPzZI_S                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpne	p4.s, p1/z, z31.s, #-10  // CMPNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPEQ_PPzZZ_H                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpeq	p0.h, p0/z, z6.h, z1.h  // CMPEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPGE_PPzZZ_S                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpge	p7.s, p0/z, z22.s, z30.s  // CMPGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPGT_PPzZZ_B                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpgt	p2.b, p2/z, z9.b, z26.b  // CMPGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPHI_PPzZZ_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmphi	p7.d, p3/z, z27.d, z26.d  // CMPHI <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPHS_PPzZZ_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmphs	p0.d, p7/z, z19.d, z23.d  // CMPHS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPNE_PPzZZ_B                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpne	p6.b, p5/z, z13.b, z4.b  // CMPNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPEQ_WIDE_PPzZZ_B             V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpeq	p6.b, p0/z, z23.b, z5.d  // CMPEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPGE_WIDE_PPzZZ_B             V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpge	p4.b, p3/z, z14.b, z29.d  // CMPGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPGT_WIDE_PPzZZ_S             V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpgt	p6.s, p1/z, z17.s, z18.d  // CMPGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPHI_PPzZZ_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmphi	p6.d, p4/z, z29.d, z29.d  // CMPHI <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPHS_WIDE_PPzZZ_B             V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmphs	p5.b, p5/z, z11.b, z21.d  // CMPHS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPLE_WIDE_PPzZZ_B             V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmple	p5.b, p1/z, z24.b, z17.d  // CMPLE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPLO_WIDE_PPzZZ_B             V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmplo	p2.b, p5/z, z17.b, z12.d  // CMPLO <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPHS_PPzZZ_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmphs	p4.d, p5/z, z25.d, z28.d  // CMPLS <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPLT_WIDE_PPzZZ_S             V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmplt	p1.s, p2/z, z12.s, z10.d  // CMPLT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPNE_WIDE_PPzZZ_S             V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpne	p2.s, p0/z, z17.s, z14.d  // CMPNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.D  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPGE_PPzZZ_S                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpge	p5.s, p4/z, z9.s, z27.s  // CMPLE <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPHI_PPzZZ_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmphi	p1.d, p6/z, z30.d, z17.d  // CMPLO <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPHS_PPzZZ_S                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmphs	p0.s, p6/z, z5.s, z16.s  // CMPLS <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  2      4    4     1.00     -    CMPGT_PPzZZ_D                  V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,   cmpgt	p5.d, p6/z, z30.d, z20.d  // CMPLT <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Compare and set flags  \\ 2 4  4  1.0 V1UnitV0,V1UnitM0
# CHECK-NEXT:  1      2    2     4.00     -    CMTSTv1i64                     V1UnitV,                                          cmtst	d23, d13, d9                   // CMTST <V><d>, <V><n>, <V><m>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    CMTSTv8i16                     V1UnitV,                                          cmtst	v14.8h, v23.8h, v7.8h          // CMTST <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    CSNEGWr                        V1UnitI,                                          cneg	w13, w27, lo                   // CNEG <Wd>, <Wn>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    CSNEGXr                        V1UnitI,                                          cneg	x29, x9, hs                    // CNEG <Xd>, <Xn>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     2.00     -    CNOT_ZPmZ_H                    V1UnitV, V1UnitV01,                               cnot	z14.h, p3/m, z23.h             // CNOT <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    CNTv8i8                        V1UnitV,                                          cnt	v11.8b, v23.8b                 // CNT <Vd>.<T>, <Vn>.<T>  \\ ASIMD count  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    CNT_ZPmZ_B                     V1UnitV, V1UnitV01,                               cnt	z5.b, p6/m, z20.b              // CNT <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Predicate counting vector  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    CNTB_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cntb	x24                            // CNTB <Xd>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTB_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cntb	x21, vl2                       // CNTB <Xd>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTB_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cntb	x11, vl16, mul #8              // CNTB <Xd>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTD_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cntd	x28                            // CNTD <Xd>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTD_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cntd	x15, mul3                      // CNTD <Xd>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTD_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cntd	x15, vl256, mul #5             // CNTD <Xd>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTH_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cnth	x20                            // CNTH <Xd>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTH_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cnth	x29, vl3                       // CNTH <Xd>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTH_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cnth	x25, vl4, mul #12              // CNTH <Xd>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTW_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cntw	x17                            // CNTW <Xd>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTW_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cntw	x3                             // CNTW <Xd>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTW_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       cntw	x26, vl6, mul #6               // CNTW <Xd>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    CNTP_XPP_H                     V1UnitI, V1UnitM, V1UnitM0,                       cntp	x21, p5, p0.h                  // CNTP <Xd>, <Pg>, <Pn>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    COMPACT_ZPZ_S                  V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          compact	z14.s, p3, z10.s       // COMPACT <Zd>.<T>, <Pg>, <Zn>.<T>  \\ Conditional extract operations, SIMD&FP scalar and vector forms  \\ 1 3  3  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPmV_H                     V1UnitV, V1UnitV01,                               mov	z16.h, p7/m, h12               // CPY <Zd>.<T>, <Pg>/M, <V><n>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPmI_B                     V1UnitV, V1UnitV01,                               mov	z28.b, p4/m, #55               // CPY <Zd>.B, <Pg>/M, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPmI_D                     V1UnitV, V1UnitV01,                               mov	z15.d, p6/m, #23               // CPY <Zd>.<T>, <Pg>/M, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPmI_D                     V1UnitV, V1UnitV01,                               mov	z8.d, p1/m, #-10496            // CPY <Zd>.<T>, <Pg>/M, #<imm>, <shift>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPzI_B                     V1UnitV, V1UnitV01,                               mov	z4.b, p7/z, #105               // CPY <Zd>.B, <Pg>/Z, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPzI_D                     V1UnitV, V1UnitV01,                               mov	z29.d, p0/z, #-74              // CPY <Zd>.<T>, <Pg>/Z, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPzI_D                     V1UnitV, V1UnitV01,                               mov	z0.d, p2/z, #15872             // CPY <Zd>.<T>, <Pg>/Z, #<imm>, <shift>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  2      5    5     1.00     -    CPY_ZPmR_D                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV01,   mov	z17.d, p1/m, x12               // CPY <Zd>.<T>, <Pg>/M, <R><n>  \\ Copy, scalar  \\ 2 5  5  1.0 V1UnitM0,V1UnitV01
# CHECK-NEXT:  2      5    5     1.00     -    CPY_ZPmR_H                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV01,   mov	z3.h, p1/m, wsp                // CPY <Zd>.<T>, <Pg>/M, <R2>SP  \\ Copy, scalar  \\ 2 5  5  1.0 V1UnitM0,V1UnitV01
# CHECK-NEXT:  1      2    1     1.00     -    CRC32Brr                       V1UnitI, V1UnitM, V1UnitM0,                       crc32b	w13, w24, w28                  // CRC32B <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
# CHECK-NEXT:  1      2    1     1.00     -    CRC32Hrr                       V1UnitI, V1UnitM, V1UnitM0,                       crc32h	w3, w12, w25                   // CRC32H <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
# CHECK-NEXT:  1      2    1     1.00     -    CRC32Wrr                       V1UnitI, V1UnitM, V1UnitM0,                       crc32w	w8, w27, w19                   // CRC32W <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
# CHECK-NEXT:  1      2    1     1.00     -    CRC32Xrr                       V1UnitI, V1UnitM, V1UnitM0,                       crc32x	w24, w16, x20                  // CRC32X <Wd>, <Wn>, <Xm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
# CHECK-NEXT:  1      2    1     1.00     -    CRC32CBrr                      V1UnitI, V1UnitM, V1UnitM0,                       crc32cb	w22, w22, w19          // CRC32CB <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
# CHECK-NEXT:  1      2    1     1.00     -    CRC32CHrr                      V1UnitI, V1UnitM, V1UnitM0,                       crc32ch	w4, w21, w16           // CRC32CH <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
# CHECK-NEXT:  1      2    1     1.00     -    CRC32CWrr                      V1UnitI, V1UnitM, V1UnitM0,                       crc32cw	w12, w28, w7           // CRC32CW <Wd>, <Wn>, <Wm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
# CHECK-NEXT:  1      2    1     1.00     -    CRC32CXrr                      V1UnitI, V1UnitM, V1UnitM0,                       crc32cx	w23, w29, x14          // CRC32CX <Wd>, <Wn>, <Xm>  \\ CRC checksum ops  \\ 1 2  1  1.00 V1UnitM0
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             csdb                                 // CSDB  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    CSELWr                         V1UnitI,                                          csel	w3, w5, w11, vc                // CSEL <Wd>, <Wn>, <Wm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CSELXr                         V1UnitI,                                          csel	x19, x24, x22, pl              // CSEL <Xd>, <Xn>, <Xm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CSINCWr                        V1UnitI,                                          cset	w2, ge                         // CSET <Wd>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    CSINCXr                        V1UnitI,                                          cset	x17, lo                        // CSET <Xd>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    CSINVWr                        V1UnitI,                                          csetm	w16, lo                        // CSETM <Wd>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    CSINVXr                        V1UnitI,                                          csetm	x24, hs                        // CSETM <Xd>, <cond>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    CSINCWr                        V1UnitI,                                          csinc	w4, w20, w16, vc               // CSINC <Wd>, <Wn>, <Wm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CSINCXr                        V1UnitI,                                          csinc	x1, x2, x27, lt                // CSINC <Xd>, <Xn>, <Xm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CSINVWr                        V1UnitI,                                          csinv	w6, w24, w11, hs               // CSINV <Wd>, <Wn>, <Wm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CSINVXr                        V1UnitI,                                          csinv	x29, x7, x30, mi               // CSINV <Xd>, <Xn>, <Xm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CSNEGWr                        V1UnitI,                                          csneg	w17, w11, w8, lo               // CSNEG <Wd>, <Wn>, <Wm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    CSNEGXr                        V1UnitI,                                          csneg	x10, x25, x27, lt              // CSNEG <Xd>, <Xn>, <Xm>, <cond>  \\ Conditional select  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     1.00     -    CTERMEQ_XX                     V1UnitI, V1UnitM, V1UnitM0,                       ctermeq	x5, x3                 // CTERMEQ <R><n>, <R><m>  \\ Loop terminate  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     1.00     -    CTERMNE_XX                     V1UnitI, V1UnitM, V1UnitM0,                       ctermne	x8, x18                // CTERMNE <R><n>, <R><m>  \\ Loop terminate  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     15.00    SE   SYSxt                                                                            dc	ivac, x1                       // DC <dc_op>, <Xt>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   DCPS1                                                                            dcps1                                // DCPS1   \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   DCPS1                                                                            dcps1	#0xa250                        // DCPS1 #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   DCPS2                                                                            dcps2                                // DCPS2   \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   DCPS2                                                                            dcps2	#0xcc26                        // DCPS2 #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   DCPS3                                                                            dcps3                                // DCPS3   \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   DCPS3                                                                            dcps3	#0x89c5                        // DCPS3 #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     1.00     -    DECB_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       decb	x7                             // DECB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECB_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       decb	x18                            // DECB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECB_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       decb	x20, all, mul #4               // DECB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECD_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       decd	x9                             // DECD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECD_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       decd	x11, vl64                      // DECD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECD_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       decd	x29, vl16, mul #16             // DECD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECH_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       dech	x2                             // DECH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECH_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       dech	x1, vl5                        // DECH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECH_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       dech	x0, vl4, mul #16               // DECH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECW_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       decw	x7                             // DECW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECW_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       decw	x30, vl6                       // DECW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECW_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       decw	x28, vl32, mul #5              // DECW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    DECD_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          decd	z3.d                           // DECD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    DECD_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          decd	z11.d, vl3                     // DECD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    DECD_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          decd	z27.d, vl1, mul #2             // DECD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    DECH_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          dech	z28.h                          // DECH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    DECH_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          dech	z3.h, vl5                      // DECH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    DECH_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          dech	z9.h, vl256, mul #15           // DECH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    DECW_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          decw	z27.s                          // DECW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    DECW_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          decw	z13.s, pow2                    // DECW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    DECW_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          decw	z2.s, vl3, mul #15             // DECW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    DECP_XP_S                      V1UnitI, V1UnitM, V1UnitM0,                       decp	x21, p5.s                      // DECP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  3      7    7     0.50     -    DECP_ZP_S                      V1UnitI[2], V1UnitM[2], V1UnitM0[2], V1UnitV, V1UnitV01,   decp	z21.s, p5.s            // DECP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
# CHECK-NEXT:  1      1    1     15.00    SE   DMB                                                                              dmb	ish                            // DMB <option>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   DMB                                                                              dmb	#4                             // DMB #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     2.00     SE   DRPS                           V1UnitB,                                          drps                                 // DRPS  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     4.00     -    DUPi8                          V1UnitV,                                          mov	b18, v30.b[10]                 // DUP B<d>, <Vn>.B[<indexb>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPi16                         V1UnitV,                                          mov	h1, v3.h[6]                    // DUP H<d>, <Vn>.H[<indexh>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPi32                         V1UnitV,                                          mov	s10, v13.s[2]                  // DUP S<d>, <Vn>.S[<indexs>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPi64                         V1UnitV,                                          mov	d2, v16.d[1]                   // DUP D<d>, <Vn>.D[<indexd>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPv16i8lane                   V1UnitV,                                          dup	v18.16b, v4.b[9]               // DUP <Vd>.<Tb>, <Vn>.B[<indexb>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPv8i16lane                   V1UnitV,                                          dup	v8.8h, v29.h[6]                // DUP <Vd>.<Th>, <Vn>.H[<indexh>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPv4i32lane                   V1UnitV,                                          dup	v11.4s, v28.s[3]               // DUP <Vd>.<Ts>, <Vn>.S[<indexs>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPv2i64lane                   V1UnitV,                                          dup	v15.2d, v11.d[1]               // DUP <Vd>.<Td>, <Vn>.D[<indexd>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     1.00     -    DUPv4i16gpr                    V1UnitI, V1UnitM, V1UnitM0,                       dup	v30.4h, w27                    // DUP <Vd>.<T>, <R><n>  \\ ASIMD duplicate, gen reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_B                       V1UnitV, V1UnitV01,                               mov	z31.b, #94                     // DUP <Zd>.B, #<imm>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_D                       V1UnitV, V1UnitV01,                               mov	z15.d, #-34                    // DUP <Zd>.<T>, #<imm>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_H                       V1UnitV, V1UnitV01,                               mov	z26.h, #-121                   // DUP <Zd>.<T>, #<imm>, <shift>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZZI_B                      V1UnitV, V1UnitV01,                               mov	z4.b, z18.b[59]                // DUP <Zd>.B, <Zn>.B[<immb>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZZI_H                      V1UnitV, V1UnitV01,                               mov	z24.h, z6.h[10]                // DUP <Zd>.H, <Zn>.H[<immh>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZZI_S                      V1UnitV, V1UnitV01,                               mov	z5.s, z12.s[14]                // DUP <Zd>.S, <Zn>.S[<imms>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZZI_D                      V1UnitV, V1UnitV01,                               mov	z18.d, z30.d[2]                // DUP <Zd>.D, <Zn>.D[<immd>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     1.00     -    DUP_ZR_H                       V1UnitI, V1UnitM, V1UnitM0,                       mov	z15.h, w14                     // DUP <Zd>.<T>, <R><n>  \\ Duplicate, scalar form  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    DUP_ZR_H                       V1UnitI, V1UnitM, V1UnitM0,                       mov	z6.h, wsp                      // DUP <Zd>.<T>, <R2>SP  \\ Duplicate, scalar form  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     2.00     -    DUPM_ZI                        V1UnitV, V1UnitV01,                               dupm	z29.b, #0x70                   // DUPM <Zd>.B, #<constb>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUPM_ZI                        V1UnitV, V1UnitV01,                               dupm	z11.h, #0x60                   // DUPM <Zd>.H, #<consth>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUPM_ZI                        V1UnitV, V1UnitV01,                               dupm	z31.s, #0x2                    // DUPM <Zd>.S, #<consts>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUPM_ZI                        V1UnitV, V1UnitV01,                               dupm	z8.d, #0x4                     // DUPM <Zd>.D, #<constd>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    EONWrs                         V1UnitI,                                          eon	w0, w2, w15                    // EON <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    EONWrs                         V1UnitI,                                          eon	w17, w16, w5, lsl #23          // EON <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    EONXrs                         V1UnitI,                                          eon	x9, x23, x27                   // EON <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    EONXrs                         V1UnitI,                                          eon	x12, x21, x26, lsr #40         // EON <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZI                         V1UnitV, V1UnitV01,                               eor	z7.b, z7.b, #0x8f              // EON <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZI                         V1UnitV, V1UnitV01,                               eor	z4.h, z4.h, #0xff9f            // EON <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZI                         V1UnitV, V1UnitV01,                               eor	z6.s, z6.s, #0xfffffffd        // EON <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZI                         V1UnitV, V1UnitV01,                               eor	z26.d, z26.d, #0xfffffffffffffffb  // EON <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    EORWri                         V1UnitI,                                          eor	wsp, w11, #0xe00               // EOR <Wd|WSP>, <Wn>, #<imms>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    EORXri                         V1UnitI,                                          eor	x25, x10, #0xe00               // EOR <Xd|SP>, <Xn>, #<immd>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZI                         V1UnitV, V1UnitV01,                               eor	z27.b, z27.b, #0x70            // EOR <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZI                         V1UnitV, V1UnitV01,                               eor	z20.h, z20.h, #0x60            // EOR <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZI                         V1UnitV, V1UnitV01,                               eor	z31.s, z31.s, #0x2             // EOR <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZI                         V1UnitV, V1UnitV01,                               eor	z0.d, z0.d, #0x4               // EOR <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     1.00     -    EOR_PPzPP                      V1UnitI, V1UnitM, V1UnitM0,                       eor	p1.b, p6/z, p2.b, p4.b         // EOR <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     4.00     -    EORWrs                         V1UnitI,                                          eor	w0, w19, w17                   // EOR <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    EORWrs                         V1UnitI,                                          eor	w26, w14, w12, lsr #5          // EOR <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    EORXrs                         V1UnitI,                                          eor	x26, x25, x18                  // EOR <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    EORXrs                         V1UnitI,                                          eor	x10, x10, x4, asr #33          // EOR <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    EORv8i8                        V1UnitV,                                          eor	v26.8b, v9.8b, v23.8b          // EOR <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZPmZ_H                     V1UnitV, V1UnitV01,                               eor	z4.h, p7/m, z4.h, z16.h        // EOR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    EOR_ZZZ                        V1UnitV, V1UnitV01,                               eor	z6.d, z6.d, z20.d              // EOR <Zd>.D, <Zn>.D, <Zm>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  2      2    2     0.50     -    EORS_PPzPP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              eors	p0.b, p5/z, p2.b, p2.b         // EORS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  4      12   12    0.50     -    EORV_VPZ_H                     V1UnitV[4], V1UnitV01[4],                         eorv	h8, p7, z17.h                  // EORV <V><d>, <Pg>, <Zn>.<T>  \\ Reduction, logical   \\ 4 12  12  0.50 V1UnitV01[4]
# CHECK-NEXT:  1      1    1     2.00     SE   ERET                           V1UnitB,                                          eret                                 // ERET  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             esb                                  // ESB  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     4.00     -    EXTv8i8                        V1UnitV,                                          ext	v9.8b, v20.8b, v16.8b, #7      // EXT <Vd>.8B, <Vn>.8B, <Vm>.8B, #<index8>  \\ ASIMD extract  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    EXTv16i8                       V1UnitV,                                          ext	v18.16b, v12.16b, v29.16b, #1  // EXT <Vd>.16B, <Vn>.16B, <Vm>.16B, #<index16>  \\ ASIMD extract  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    EXTRWrri                       V1UnitI,                                          ror	w18, w24, #13                  // EXTR <Wd>, <Wn>, <Wn>, #<lsbs>  \\ Bitfield extract, one reg  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  2      3    3     2.00     -    EXTRWrri                       V1UnitI[2], V1UnitM,                              extr	w5, w7, w8, #24                // EXTR <Wd>, <Wn>, <Wm>, #<lsbs>  \\ Bitfield extract, two regs  \\ 2 3  3  2.00 V1UnitM
# CHECK-NEXT:  1      1    1     4.00     -    EXTRXrri                       V1UnitI,                                          ror	x3, x7, #55                    // EXTR <Xd>, <Xn>, <Xn>, #<lsbd>  \\ Bitfield extract, one reg  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  2      3    3     2.00     -    EXTRXrri                       V1UnitI[2], V1UnitM,                              extr	x14, x25, x26, #49             // EXTR <Xd>, <Xn>, <Xm>, #<lsbd>  \\ Bitfield extract, two regs  \\ 2 3  3  2.00 V1UnitM
# CHECK-NEXT:  1      2    2     4.00     -    FABD16                         V1UnitV,                                          fabd	h26, h2, h11                   // FABD <Hd>, <Hn>, <Hm>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FABD32                         V1UnitV,                                          fabd	s13, s26, s15                  // FABD <V><d>, <V><n>, <V><m>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FABDv4f16                      V1UnitV,                                          fabd	v24.4h, v31.4h, v11.4h         // FABD <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FABDv2f64                      V1UnitV,                                          fabd	v4.2d, v1.2d, v18.2d           // FABD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FABD_ZPmZ_H                    V1UnitV, V1UnitV01,                               fabd	z23.h, p1/m, z23.h, z1.h       // FABD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point absolute value/difference  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FABSHr                         V1UnitV,                                          fabs	h19, h5                        // FABS <Hd>, <Hn>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FABSSr                         V1UnitV,                                          fabs	s0, s18                        // FABS <Sd>, <Sn>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FABSDr                         V1UnitV,                                          fabs	d12, d1                        // FABS <Dd>, <Dn>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FABSv4f32                      V1UnitV,                                          fabs	v1.4s, v1.4s                   // FABS <Vd>.<T>, <Vn>.<T>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FABSv4f32                      V1UnitV,                                          fabs	v27.4s, v20.4s                 // FABS <Vd>.<T>, <Vn>.<T>  \\ ASIMD FP absolute value/difference  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FABS_ZPmZ_S                    V1UnitV, V1UnitV01,                               fabs	z9.s, p1/m, z3.s               // FABS <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Floating point absolute value/difference  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    FACGE_PPzZZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          facge	p7.s, p7/z, z1.s, z15.s        // FACGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FACGT_PPzZZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          facgt	p0.s, p3/z, z1.s, z18.s        // FACGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     4.00     -    FACGE16                        V1UnitV,                                          facge	h14, h31, h27                  // FACGE <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FACGE32                        V1UnitV,                                          facge	s7, s11, s3                    // FACGE <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FACGEv4f32                     V1UnitV,                                          facge	v26.4s, v7.4s, v29.4s          // FACGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FACGEv2f32                     V1UnitV,                                          facge	v30.2s, v24.2s, v31.2s         // FACGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FACGT16                        V1UnitV,                                          facgt	h11, h22, h30                  // FACGT <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FACGT64                        V1UnitV,                                          facgt	d0, d1, d5                     // FACGT <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FACGTv8f16                     V1UnitV,                                          facgt	v15.8h, v2.8h, v20.8h          // FACGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FACGTv4f16                     V1UnitV,                                          facgt	v6.4h, v2.4h, v8.4h            // FACGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    FACGE_PPzZZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          facge	p6.d, p7/z, z30.d, z25.d       // FACLE <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FACGT_PPzZZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          facgt	p3.d, p5/z, z16.d, z29.d       // FACLT <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     2.00     -    FADD_ZPmI_S                    V1UnitV, V1UnitV01,                               fadd	z12.s, p2/m, z12.s, #0.5       // FADD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FADDHrr                        V1UnitV,                                          fadd	h30, h5, h14                   // FADD <Hd>, <Hn>, <Hm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FADDSrr                        V1UnitV,                                          fadd	s23, s15, s20                  // FADD <Sd>, <Sn>, <Sm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FADDDrr                        V1UnitV,                                          fadd	d30, d4, d26                   // FADD <Dd>, <Dn>, <Dm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FADDv2f64                      V1UnitV,                                          fadd	v14.2d, v25.2d, v8.2d          // FADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FADDv2f64                      V1UnitV,                                          fadd	v11.2d, v13.2d, v7.2d          // FADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FADD_ZPmZ_S                    V1UnitV, V1UnitV01,                               fadd	z15.s, p1/m, z15.s, z21.s      // FADD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FADD_ZZZ_H                     V1UnitV, V1UnitV01,                               fadd	z27.h, z6.h, z1.h              // FADD <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  18     19   19    0.06     -    FADDA_VPZ_H                    V1UnitV[18], V1UnitV0[18], V1UnitV01[18], V1UnitV02[18],   fadda	h2, p4, h2, z24.h      // FADDA H<dn>, <Pg>, H<dn>, <Zm>.H  \\ Floating point associative add, F16  \\ 18 19  19  0.06 V1UnitV0[17]
# CHECK-NEXT:  10     11   11    0.10     -    FADDA_VPZ_S                    V1UnitV[10], V1UnitV0[10], V1UnitV01[10], V1UnitV02[10],   fadda	s2, p3, s2, z23.s      // FADDA S<dn>, <Pg>, S<dn>, <Zm>.S  \\ Floating point associative add, F32  \\ 10 11  11  0.10 V1UnitV0[11]
# CHECK-NEXT:  3      8    8     0.67     -    FADDA_VPZ_D                    V1UnitV[3], V1UnitV01[3],                         fadda	d1, p3, d1, z7.d               // FADDA D<dn>, <Pg>, D<dn>, <Zm>.D  \\ Floating point associative add, F64  \\ 3 8  8  0.67 V1UnitV01[3]
# CHECK-NEXT:  1      2    2     4.00     -    FADDPv2i16p                    V1UnitV,                                          faddp	h22, v29.2h                    // FADDP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FADDPv2i32p                    V1UnitV,                                          faddp	s12, v10.2s                    // FADDP <V><d>, <Vn>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FADDPv4f32                     V1UnitV,                                          faddp	v22.4s, v12.4s, v29.4s         // FADDP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FADDPv4f32                     V1UnitV,                                          faddp	v12.4s, v29.4s, v24.4s         // FADDP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  6      13   13    0.33     -    FADDV_VPZ_H                    V1UnitV[6], V1UnitV01[6],                         faddv	h21, p6, z17.h                 // FADDV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
# CHECK-NEXT:  6      11   11    0.40     -    FADDV_VPZ_S                    V1UnitV[6], V1UnitV01[5],                         faddv	s10, p7, z18.s                 // FADDV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
# CHECK-NEXT:  5      9    9     0.50     -    FADDV_VPZ_D                    V1UnitV[5], V1UnitV01[4],                         faddv	d1, p6, z9.d                   // FADDV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCADD_ZPmZ_H                   V1UnitV, V1UnitV01,                               fcadd	z30.h, p1/m, z30.h, z29.h, #90  // FCADD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>, <const>  \\ Floating point complex add  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    FCCMPHrr                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fccmp	h22, h12, #2, lo               // FCCMP <Hn>, <Hm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCCMPSrr                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fccmp	s26, s3, #14, ne               // FCCMP <Sn>, <Sm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCCMPDrr                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fccmp	d1, d16, #2, hs                // FCCMP <Dn>, <Dm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCCMPEHrr                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fccmpe	h13, h8, #4, ne                // FCCMPE <Hn>, <Hm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCCMPESrr                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fccmpe	s25, s6, #5, mi                // FCCMPE <Sn>, <Sm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCCMPEDrr                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fccmpe	d26, d10, #1, eq               // FCCMPE <Dn>, <Dm>, #<nzcv>, <cond>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMEQ_PPzZZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmeq	p3.s, p4/z, z14.s, z30.s       // FCMEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMGE_PPzZZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmge	p3.s, p2/z, z14.s, z9.s        // FCMGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMGT_PPzZZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmgt	p4.h, p0/z, z21.h, z10.h       // FCMGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMNE_PPzZZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmne	p5.h, p7/z, z18.h, z29.h       // FCMNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMUO_PPzZZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmuo	p4.h, p7/z, z4.h, z13.h        // FCMUO <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMEQ_PPzZ0_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmeq	p7.s, p1/z, z11.s, #0.0        // FCMEQ <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMGE_PPzZ0_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmge	p6.h, p5/z, z31.h, #0.0        // FCMGE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMGT_PPzZ0_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmgt	p7.d, p4/z, z2.d, #0.0         // FCMGT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMLE_PPzZ0_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmle	p3.d, p6/z, z7.d, #0.0         // FCMLE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMLT_PPzZ0_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmlt	p0.h, p7/z, z18.h, #0.0        // FCMLT <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMNE_PPzZ0_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmne	p7.d, p6/z, z9.d, #0.0         // FCMNE <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #0.0  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     4.00     -    FCMEQ16                        V1UnitV,                                          fcmeq	h16, h2, h7                    // FCMEQ <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMEQ64                        V1UnitV,                                          fcmeq	d10, d23, d5                   // FCMEQ <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMEQv8f16                     V1UnitV,                                          fcmeq	v26.8h, v18.8h, v10.8h         // FCMEQ <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMEQv4f16                     V1UnitV,                                          fcmeq	v24.4h, v7.4h, v24.4h          // FCMEQ <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMEQv1i16rz                   V1UnitV,                                          fcmeq	h9, h3, #0.0                   // FCMEQ <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMEQv1i32rz                   V1UnitV,                                          fcmeq	s0, s21, #0.0                  // FCMEQ <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMEQv8i16rz                   V1UnitV,                                          fcmeq	v26.8h, v10.8h, #0.0           // FCMEQ <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMEQv8i16rz                   V1UnitV,                                          fcmeq	v22.8h, v22.8h, #0.0           // FCMEQ <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGE16                        V1UnitV,                                          fcmge	h8, h8, h17                    // FCMGE <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGE64                        V1UnitV,                                          fcmge	d16, d0, d20                   // FCMGE <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGEv4f16                     V1UnitV,                                          fcmge	v28.4h, v22.4h, v5.4h          // FCMGE <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGEv2f64                     V1UnitV,                                          fcmge	v30.2d, v22.2d, v10.2d         // FCMGE <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGEv1i16rz                   V1UnitV,                                          fcmge	h2, h25, #0.0                  // FCMGE <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGEv1i32rz                   V1UnitV,                                          fcmge	s12, s9, #0.0                  // FCMGE <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGEv4i16rz                   V1UnitV,                                          fcmge	v28.4h, v21.4h, #0.0           // FCMGE <Vd>.<Th>, <Vn>.<Th>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGEv4i32rz                   V1UnitV,                                          fcmge	v17.4s, v30.4s, #0.0           // FCMGE <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGT16                        V1UnitV,                                          fcmgt	h19, h5, h14                   // FCMGT <Hd>, <Hn>, <Hm>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGT64                        V1UnitV,                                          fcmgt	d17, d19, d16                  // FCMGT <V><d>, <V><n>, <V><m>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGTv8f16                     V1UnitV,                                          fcmgt	v4.8h, v30.8h, v13.8h          // FCMGT <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGTv2f64                     V1UnitV,                                          fcmgt	v11.2d, v7.2d, v14.2d          // FCMGT <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGTv1i16rz                   V1UnitV,                                          fcmgt	h1, h3, #0.0                   // FCMGT <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGTv1i64rz                   V1UnitV,                                          fcmgt	d29, d8, #0.0                  // FCMGT <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGTv4i16rz                   V1UnitV,                                          fcmgt	v24.4h, v14.4h, #0.0           // FCMGT <Vd>.<Th>, <Vn>.<Th>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMGTv4i32rz                   V1UnitV,                                          fcmgt	v9.4s, v15.4s, #0.0            // FCMGT <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      5    2     2.00     -    FCMLA_ZZZI_H                   V1UnitV, V1UnitV01,                               fcmla	z8.h, z27.h, z3.h[2], #90      // FCMLA <Zda>.H, <Zn>.H, <Zmh>.H[<immh>], <const>  \\ Floating point complex multiply add   \\ 1 5 2 2.0 V1UnitV01
# CHECK-NEXT:  1      5    2     2.00     -    FCMLA_ZZZI_S                   V1UnitV, V1UnitV01,                               fcmla	z5.s, z21.s, z3.s[1], #90      // FCMLA <Zda>.S, <Zn>.S, <Zm>.S[<imm>], <const>  \\ Floating point complex multiply add   \\ 1 5 2 2.0 V1UnitV01
# CHECK-NEXT:  1      5    2     2.00     -    FCMLA_ZPmZZ_H                  V1UnitV, V1UnitV01,                               fcmla	z6.h, p5/m, z13.h, z4.h, #180  // FCMLA <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>, <const>  \\ Floating point complex multiply add   \\ 1 5 2 2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    FCMGE_PPzZZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmge	p3.s, p6/z, z17.s, z26.s       // FCMLE <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     4.00     -    FCMLEv1i16rz                   V1UnitV,                                          fcmle	h10, h25, #0.0                 // FCMLE <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMLEv1i64rz                   V1UnitV,                                          fcmle	d19, d24, #0.0                 // FCMLE <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMLEv4i16rz                   V1UnitV,                                          fcmle	v17.4h, v25.4h, #0.0           // FCMLE <Vd>.<Th>, <Vn>.<Th>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMLEv2i64rz                   V1UnitV,                                          fcmle	v28.2d, v15.2d, #0.0           // FCMLE <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    FCMGT_PPzZZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmgt	p6.d, p2/z, z28.d, z14.d       // FCMLT <Pd>.<T>, <Pg>/Z, <Zm>.<T>, <Zn>.<T>  \\ Floating point compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     4.00     -    FCMLTv1i16rz                   V1UnitV,                                          fcmlt	h9, h12, #0.0                  // FCMLT <Hd>, <Hn>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMLTv1i32rz                   V1UnitV,                                          fcmlt	s5, s21, #0.0                  // FCMLT <V><d>, <V><n>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMLTv4i16rz                   V1UnitV,                                          fcmlt	v15.4h, v7.4h, #0.0            // FCMLT <Vd>.<Th>, <Vn>.<Th>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FCMLTv4i32rz                   V1UnitV,                                          fcmlt	v18.4s, v16.4s, #0.0           // FCMLT <Vd>.<T>, <Vn>.<T>, #0.0  \\ ASIMD FP compare  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    FCMPHrr                        V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmp	h9, h23                        // FCMP <Hn>, <Hm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPHri                        V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmp	h14, #0.0                      // FCMP <Hn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPSrr                        V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmp	s28, s17                       // FCMP <Sn>, <Sm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPSri                        V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmp	s0, #0.0                       // FCMP <Sn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPDrr                        V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmp	d24, d28                       // FCMP <Dn>, <Dm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPDri                        V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmp	d2, #0.0                       // FCMP <Dn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPEHrr                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmpe	h20, h16                       // FCMPE <Hn>, <Hm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPEHri                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmpe	h21, #0.0                      // FCMPE <Hn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPESrr                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmpe	s3, s14                        // FCMPE <Sn>, <Sm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPESri                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmpe	s27, #0.0                      // FCMPE <Sn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPEDrr                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmpe	d6, d23                        // FCMPE <Dn>, <Dm>  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     1.00     -    FCMPEDri                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcmpe	d11, #0.0                      // FCMPE <Dn>, #0.0  \\ FP compare  \\ 1 2  2  1.0 V1UnitV0
# CHECK-NEXT:  1      2    2     2.00     -    FCPY_ZPmI_S                    V1UnitV, V1UnitV01,                               fmov	z0.s, p0/m, #0.50000000        // FCPY <Zd>.<T>, <Pg>/M, #<const>  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FCSELHrrr                      V1UnitV, V1UnitV01,                               fcsel	h27, h4, h5, hs                // FCSEL <Hd>, <Hn>, <Hm>, <cond>  \\ FP select  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FCSELSrrr                      V1UnitV, V1UnitV01,                               fcsel	s10, s6, s24, hs               // FCSEL <Sd>, <Sn>, <Sm>, <cond>  \\ FP select  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FCSELDrrr                      V1UnitV, V1UnitV01,                               fcsel	d22, d27, d6, hi               // FCSEL <Dd>, <Dn>, <Dm>, <cond>  \\ FP select  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FCVTSHr                        V1UnitV, V1UnitV02,                               fcvt	s18, h24                       // FCVT <Sd>, <Hn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTDHr                        V1UnitV, V1UnitV02,                               fcvt	d13, h15                       // FCVT <Dd>, <Hn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTHSr                        V1UnitV, V1UnitV02,                               fcvt	h3, s15                        // FCVT <Hd>, <Sn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTDSr                        V1UnitV, V1UnitV02,                               fcvt	d3, s1                         // FCVT <Dd>, <Sn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTHDr                        V1UnitV, V1UnitV02,                               fcvt	h17, d0                        // FCVT <Hd>, <Dn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTSDr                        V1UnitV, V1UnitV02,                               fcvt	s8, d13                        // FCVT <Sd>, <Dn>  \\ FP convert, from vec to vec reg  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     0.50     -    FCVT_ZPmZ_HtoS                 V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   fcvt	z8.s, p7/m, z31.h      // FCVT <Zd>.S, <Pg>/M, <Zn>.H  \\ Floating point convert, long or narrow (F16 to F32 or F32 to F16)  \\ 2 4  4  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    FCVT_ZPmZ_HtoD                 V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvt	z20.d, p0/m, z23.h             // FCVT <Zd>.D, <Pg>/M, <Zn>.H  \\ Floating point convert, long or narrow (F16 to F64, F32 to F64, F64 to F32 or F64 to F16)  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  2      4    4     0.50     -    FCVT_ZPmZ_StoH                 V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   fcvt	z13.h, p0/m, z15.s     // FCVT <Zd>.H, <Pg>/M, <Zn>.S  \\ Floating point convert, long or narrow (F16 to F32 or F32 to F16)  \\ 2 4  4  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    FCVT_ZPmZ_StoD                 V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvt	z3.d, p3/m, z26.s              // FCVT <Zd>.D, <Pg>/M, <Zn>.S  \\ Floating point convert, long or narrow (F16 to F64, F32 to F64, F64 to F32 or F64 to F16)  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVT_ZPmZ_DtoH                 V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvt	z21.h, p3/m, z19.d             // FCVT <Zd>.H, <Pg>/M, <Zn>.D  \\ Floating point convert, long or narrow (F16 to F64, F32 to F64, F64 to F32 or F64 to F16)  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVT_ZPmZ_DtoS                 V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvt	z0.s, p2/m, z10.d              // FCVT <Zd>.S, <Pg>/M, <Zn>.D  \\ Floating point convert, long or narrow (F16 to F64, F32 to F64, F64 to F32 or F64 to F16)  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTASUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtas	w0, h0                         // FCVTAS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTASUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtas	x17, h28                       // FCVTAS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTASUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtas	w6, s30                        // FCVTAS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTASUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtas	x26, s19                       // FCVTAS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTASUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtas	w23, d22                       // FCVTAS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTASUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtas	x22, d24                       // FCVTAS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTASv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtas	h4, h15                        // FCVTAS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTASv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtas	s16, s24                       // FCVTAS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTASv1i64                    V1UnitV, V1UnitV02,                               fcvtas	d18, d2                        // FCVTAS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTASv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtas	v16.4h, v6.4h                  // FCVTAS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTASv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtas	v26.8h, v6.8h                  // FCVTAS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTASv2f32                    V1UnitV, V1UnitV02,                               fcvtas	v11.2s, v0.2s                  // FCVTAS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTASv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtas	v25.4s, v28.4s                 // FCVTAS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTASv2f64                    V1UnitV, V1UnitV02,                               fcvtas	v10.2d, v31.2d                 // FCVTAS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     1.00     -    FCVTAUUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtau	w10, h25                       // FCVTAU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTAUUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtau	x23, h9                        // FCVTAU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTAUUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtau	w3, s25                        // FCVTAU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTAUUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtau	x28, s2                        // FCVTAU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTAUUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtau	w7, d18                        // FCVTAU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTAUUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtau	x22, d6                        // FCVTAU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTAUv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtau	h22, h12                       // FCVTAU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTAUv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtau	s9, s6                         // FCVTAU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTAUv1i64                    V1UnitV, V1UnitV02,                               fcvtau	d29, d5                        // FCVTAU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTAUv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtau	v0.4h, v27.4h                  // FCVTAU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTAUv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtau	v5.8h, v7.8h                   // FCVTAU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTAUv2f32                    V1UnitV, V1UnitV02,                               fcvtau	v20.2s, v10.2s                 // FCVTAU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTAUv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtau	v15.4s, v17.4s                 // FCVTAU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTAUv2f64                    V1UnitV, V1UnitV02,                               fcvtau	v27.2d, v25.2d                 // FCVTAU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTLv4i16                     V1UnitV[2], V1UnitV02[2],                         fcvtl	v13.4s, v26.4h                 // FCVTL <Vd>.4S, <Vn>.4H  \\ ASIMD FP convert, long (F16 to F32)  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTLv2i32                     V1UnitV, V1UnitV02,                               fcvtl	v0.2d, v29.2s                  // FCVTL <Vd>.2D, <Vn>.2S  \\ ASIMD FP convert, long (F32 to F64)  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTLv8i16                     V1UnitV[2], V1UnitV02[2],                         fcvtl2	v4.4s, v30.8h                  // FCVTL2 <Vd>.4S, <Vn>.8H  \\ ASIMD FP convert, long (F16 to F32)  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTLv4i32                     V1UnitV, V1UnitV02,                               fcvtl2	v13.2d, v11.4s                 // FCVTL2 <Vd>.2D, <Vn>.4S  \\ ASIMD FP convert, long (F32 to F64)  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMSUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtms	w18, h21                       // FCVTMS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMSUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtms	x17, h19                       // FCVTMS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMSUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtms	w3, s8                         // FCVTMS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMSUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtms	x16, s10                       // FCVTMS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMSUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtms	w15, d9                        // FCVTMS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMSUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtms	x11, d20                       // FCVTMS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTMSv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtms	h21, h0                        // FCVTMS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTMSv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtms	s3, s26                        // FCVTMS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTMSv1i64                    V1UnitV, V1UnitV02,                               fcvtms	d9, d0                         // FCVTMS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTMSv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtms	v29.4h, v11.4h                 // FCVTMS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTMSv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtms	v9.8h, v8.8h                   // FCVTMS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTMSv2f32                    V1UnitV, V1UnitV02,                               fcvtms	v23.2s, v6.2s                  // FCVTMS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTMSv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtms	v27.4s, v17.4s                 // FCVTMS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTMSv2f64                    V1UnitV, V1UnitV02,                               fcvtms	v30.2d, v11.2d                 // FCVTMS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMUUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtmu	w7, h4                         // FCVTMU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMUUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtmu	x6, h30                        // FCVTMU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMUUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtmu	w4, s29                        // FCVTMU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMUUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtmu	x10, s0                        // FCVTMU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMUUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtmu	w13, d17                       // FCVTMU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTMUUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtmu	x11, d14                       // FCVTMU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTMUv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtmu	h5, h24                        // FCVTMU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTMUv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtmu	s8, s3                         // FCVTMU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTMUv1i64                    V1UnitV, V1UnitV02,                               fcvtmu	d13, d10                       // FCVTMU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTMUv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtmu	v3.4h, v31.4h                  // FCVTMU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTMUv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtmu	v31.8h, v20.8h                 // FCVTMU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTMUv2f32                    V1UnitV, V1UnitV02,                               fcvtmu	v7.2s, v29.2s                  // FCVTMU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTMUv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtmu	v10.4s, v17.4s                 // FCVTMU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTMUv2f64                    V1UnitV, V1UnitV02,                               fcvtmu	v25.2d, v4.2d                  // FCVTMU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTNv4i16                     V1UnitV[2], V1UnitV02[2],                         fcvtn	v20.4h, v12.4s                 // FCVTN <Vd>.4H, <Vn>.4S  \\ ASIMD FP convert, narrow (F32 to F16)  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTNv2i32                     V1UnitV, V1UnitV02,                               fcvtn	v10.2s, v4.2d                  // FCVTN <Vd>.2S, <Vn>.2D  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTNv8i16                     V1UnitV[2], V1UnitV02[2],                         fcvtn2	v31.8h, v0.4s                  // FCVTN2 <Vd>.8H, <Vn>.4S  \\ ASIMD FP convert, narrow (F32 to F16)  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTNv4i32                     V1UnitV, V1UnitV02,                               fcvtn2	v17.4s, v2.2d                  // FCVTN2 <Vd>.4S, <Vn>.2D  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNSUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtns	w25, h11                       // FCVTNS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNSUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtns	x9, h29                        // FCVTNS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNSUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtns	w6, s23                        // FCVTNS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNSUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtns	x9, s27                        // FCVTNS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNSUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtns	w28, d30                       // FCVTNS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNSUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtns	x18, d9                        // FCVTNS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTNSv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtns	h19, h3                        // FCVTNS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTNSv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtns	s12, s5                        // FCVTNS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTNSv1i64                    V1UnitV, V1UnitV02,                               fcvtns	d16, d9                        // FCVTNS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTNSv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtns	v14.4h, v22.4h                 // FCVTNS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTNSv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtns	v20.8h, v25.8h                 // FCVTNS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTNSv2f32                    V1UnitV, V1UnitV02,                               fcvtns	v19.2s, v28.2s                 // FCVTNS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTNSv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtns	v16.4s, v12.4s                 // FCVTNS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTNSv2f64                    V1UnitV, V1UnitV02,                               fcvtns	v19.2d, v8.2d                  // FCVTNS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNUUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtnu	w20, h27                       // FCVTNU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNUUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtnu	x6, h11                        // FCVTNU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNUUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtnu	w22, s3                        // FCVTNU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNUUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtnu	x3, s3                         // FCVTNU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNUUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtnu	w24, d29                       // FCVTNU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTNUUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtnu	x12, d23                       // FCVTNU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTNUv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtnu	h3, h1                         // FCVTNU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTNUv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtnu	s13, s19                       // FCVTNU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTNUv1i64                    V1UnitV, V1UnitV02,                               fcvtnu	d3, d13                        // FCVTNU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTNUv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtnu	v4.4h, v2.4h                   // FCVTNU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTNUv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtnu	v22.8h, v10.8h                 // FCVTNU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTNUv2f32                    V1UnitV, V1UnitV02,                               fcvtnu	v17.2s, v13.2s                 // FCVTNU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTNUv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtnu	v5.4s, v18.4s                  // FCVTNU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTNUv2f64                    V1UnitV, V1UnitV02,                               fcvtnu	v3.2d, v27.2d                  // FCVTNU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPSUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtps	w8, h26                        // FCVTPS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPSUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtps	x12, h17                       // FCVTPS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPSUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtps	w3, s4                         // FCVTPS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPSUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtps	x13, s20                       // FCVTPS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPSUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtps	w17, d2                        // FCVTPS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPSUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtps	x6, d27                        // FCVTPS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTPSv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtps	h5, h0                         // FCVTPS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTPSv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtps	s3, s20                        // FCVTPS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTPSv1i64                    V1UnitV, V1UnitV02,                               fcvtps	d19, d24                       // FCVTPS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTPSv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtps	v12.4h, v12.4h                 // FCVTPS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTPSv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtps	v8.8h, v12.8h                  // FCVTPS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTPSv2f32                    V1UnitV, V1UnitV02,                               fcvtps	v6.2s, v4.2s                   // FCVTPS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTPSv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtps	v18.4s, v29.4s                 // FCVTPS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTPSv2f64                    V1UnitV, V1UnitV02,                               fcvtps	v10.2d, v26.2d                 // FCVTPS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPUUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtpu	w30, h4                        // FCVTPU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPUUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtpu	x16, h31                       // FCVTPU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPUUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtpu	w27, s15                       // FCVTPU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPUUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtpu	x22, s3                        // FCVTPU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPUUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtpu	w12, d12                       // FCVTPU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTPUUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtpu	x18, d0                        // FCVTPU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTPUv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtpu	h4, h29                        // FCVTPU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTPUv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtpu	s25, s24                       // FCVTPU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTPUv1i64                    V1UnitV, V1UnitV02,                               fcvtpu	d17, d21                       // FCVTPU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTPUv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtpu	v26.4h, v15.4h                 // FCVTPU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTPUv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtpu	v22.8h, v6.8h                  // FCVTPU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTPUv2f32                    V1UnitV, V1UnitV02,                               fcvtpu	v22.2s, v10.2s                 // FCVTPU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTPUv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtpu	v0.4s, v19.4s                  // FCVTPU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTPUv2f64                    V1UnitV, V1UnitV02,                               fcvtpu	v25.2d, v13.2d                 // FCVTPU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTXNv1i64                    V1UnitV, V1UnitV02,                               fcvtxn	s12, d22                       // FCVTXN <Vb><d>, <Va><n>  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTXNv2f32                    V1UnitV, V1UnitV02,                               fcvtxn	v29.2s, v10.2d                 // FCVTXN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTXNv4f32                    V1UnitV, V1UnitV02,                               fcvtxn2	v21.4s, v2.2d          // FCVTXN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD FP convert, narrow (F64 to F32)  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSSWHri                    V1UnitV, V1UnitV02,                               fcvtzs	w8, h7, #31                    // FCVTZS <Wd>, <Hn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSSXHri                    V1UnitV, V1UnitV02,                               fcvtzs	x21, h24, #9                   // FCVTZS <Xd>, <Hn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSSWSri                    V1UnitV, V1UnitV02,                               fcvtzs	w6, s22, #20                   // FCVTZS <Wd>, <Sn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSSXSri                    V1UnitV, V1UnitV02,                               fcvtzs	x5, s2, #54                    // FCVTZS <Xd>, <Sn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSSWDri                    V1UnitV, V1UnitV02,                               fcvtzs	w14, d31, #2                   // FCVTZS <Wd>, <Dn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSSXDri                    V1UnitV, V1UnitV02,                               fcvtzs	x30, d9, #2                    // FCVTZS <Xd>, <Dn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZSUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	w21, h7                        // FCVTZS <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZSUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	x10, h9                        // FCVTZS <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZSUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	w27, s23                       // FCVTZS <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZSUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	x30, s0                        // FCVTZS <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZSUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	w25, d30                       // FCVTZS <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZSUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	x5, d5                         // FCVTZS <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTZSh                        V1UnitV[2], V1UnitV02[2],                         fcvtzs	h26, h19, #10                  // FCVTZS H<d>, H<n>, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZSs                        V1UnitV[2], V1UnitV02[2],                         fcvtzs	s23, s10, #5                   // FCVTZS S<d>, S<n>, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSd                        V1UnitV, V1UnitV02,                               fcvtzs	d16, d6, #42                   // FCVTZS D<d>, D<n>, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZSv4i16_shift              V1UnitV[2], V1UnitV02[2],                         fcvtzs	v3.4h, v27.4h, #1              // FCVTZS <Vd>.4H, <Vn>.4H, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTZSv8i16_shift              V1UnitV[2], V1UnitV02[2],                         fcvtzs	v29.8h, v29.8h, #4             // FCVTZS <Vd>.8H, <Vn>.8H, #<hfbits>  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSv2i32_shift              V1UnitV, V1UnitV02,                               fcvtzs	v22.2s, v4.2s, #1              // FCVTZS <Vd>.2S, <Vn>.2S, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZSv4i32_shift              V1UnitV[2], V1UnitV02[2],                         fcvtzs	v31.4s, v3.4s, #10             // FCVTZS <Vd>.4S, <Vn>.4S, #<sfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSv2i64_shift              V1UnitV, V1UnitV02,                               fcvtzs	v17.2d, v2.2d, #37             // FCVTZS <Vd>.2D, <Vn>.2D, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  4      6    6     1.00     -    FCVTZSv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtzs	h5, h21                        // FCVTZS <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZSv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtzs	s7, s25                        // FCVTZS S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSv1i64                    V1UnitV, V1UnitV02,                               fcvtzs	d23, d0                        // FCVTZS D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZSv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtzs	v9.4h, v30.4h                  // FCVTZS <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTZSv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtzs	v25.8h, v12.8h                 // FCVTZS <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSv2f32                    V1UnitV, V1UnitV02,                               fcvtzs	v8.2s, v9.2s                   // FCVTZS <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZSv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtzs	v13.4s, v2.4s                  // FCVTZS <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZSv2f64                    V1UnitV, V1UnitV02,                               fcvtzs	v22.2d, v30.2d                 // FCVTZS <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  4      6    6     0.25     -    FCVTZS_ZPmZ_HtoH               V1UnitV[4], V1UnitV0[4], V1UnitV01[4], V1UnitV02[4],   fcvtzs	z9.h, p7/m, z3.h       // FCVTZS <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 4 6  6  0.25 V1UnitV0[4]
# CHECK-NEXT:  2      4    4     0.50     -    FCVTZS_ZPmZ_HtoS               V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   fcvtzs	z30.s, p3/m, z28.h     // FCVTZS <Zd>.S, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 2 4  4  0.50 V1UnitV0[4]
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZS_ZPmZ_HtoD               V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	z0.d, p0/m, z20.h              // FCVTZS <Zd>.D, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 1 3  3  1.00 V1UnitV0[4]
# CHECK-NEXT:  2      4    4     0.50     -    FCVTZS_ZPmZ_StoS               V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   fcvtzs	z26.s, p7/m, z5.s      // FCVTZS <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point convert to integer, F32  \\ 2 4  4  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZS_ZPmZ_StoD               V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	z14.d, p0/m, z1.s              // FCVTZS <Zd>.D, <Pg>/M, <Zn>.S  \\ Floating point convert to integer, F32  \\ 1 3  3  1.00 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZS_ZPmZ_DtoS               V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	z14.s, p1/m, z8.d              // FCVTZS <Zd>.S, <Pg>/M, <Zn>.D  \\ Floating point convert to integer, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZS_ZPmZ_DtoD               V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzs	z3.d, p2/m, z19.d              // FCVTZS <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point convert to integer, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUSWHri                    V1UnitV, V1UnitV02,                               fcvtzu	w5, h8, #19                    // FCVTZU <Wd>, <Hn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUSXHri                    V1UnitV, V1UnitV02,                               fcvtzu	x22, h25, #60                  // FCVTZU <Xd>, <Hn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUSWSri                    V1UnitV, V1UnitV02,                               fcvtzu	w0, s26, #18                   // FCVTZU <Wd>, <Sn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUSXSri                    V1UnitV, V1UnitV02,                               fcvtzu	x0, s23, #30                   // FCVTZU <Xd>, <Sn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUSWDri                    V1UnitV, V1UnitV02,                               fcvtzu	w30, d8, #9                    // FCVTZU <Wd>, <Dn>, #<sfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUSXDri                    V1UnitV, V1UnitV02,                               fcvtzu	x27, d23, #5                   // FCVTZU <Xd>, <Dn>, #<dfbits>  \\ FP convert, from vec to gen reg  \\ 1 3  3  2.00 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZUUWHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	w17, h28                       // FCVTZU <Wd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZUUXHr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	x4, h17                        // FCVTZU <Xd>, <Hn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZUUWSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	w21, s3                        // FCVTZU <Wd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZUUXSr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	x24, s4                        // FCVTZU <Xd>, <Sn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZUUWDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	w13, d26                       // FCVTZU <Wd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZUUXDr                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	x17, d13                       // FCVTZU <Xd>, <Dn>  \\ FP convert, from vec to gen reg  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  4      6    6     1.00     -    FCVTZUh                        V1UnitV[2], V1UnitV02[2],                         fcvtzu	h5, h10, #12                   // FCVTZU H<d>, H<n>, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZUs                        V1UnitV[2], V1UnitV02[2],                         fcvtzu	s8, s7, #27                    // FCVTZU S<d>, S<n>, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUd                        V1UnitV, V1UnitV02,                               fcvtzu	d21, d28, #30                  // FCVTZU D<d>, D<n>, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZUv4i16_shift              V1UnitV[2], V1UnitV02[2],                         fcvtzu	v15.4h, v21.4h, #3             // FCVTZU <Vd>.4H, <Vn>.4H, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTZUv8i16_shift              V1UnitV[2], V1UnitV02[2],                         fcvtzu	v8.8h, v14.8h, #5              // FCVTZU <Vd>.8H, <Vn>.8H, #<hfbits>  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUv2i32_shift              V1UnitV, V1UnitV02,                               fcvtzu	v2.2s, v31.2s, #18             // FCVTZU <Vd>.2S, <Vn>.2S, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZUv4i32_shift              V1UnitV[2], V1UnitV02[2],                         fcvtzu	v7.4s, v23.4s, #3              // FCVTZU <Vd>.4S, <Vn>.4S, #<sfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUv2i64_shift              V1UnitV, V1UnitV02,                               fcvtzu	v10.2d, v2.2d, #61             // FCVTZU <Vd>.2D, <Vn>.2D, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  4      6    6     1.00     -    FCVTZUv1f16                    V1UnitV[2], V1UnitV02[2],                         fcvtzu	h12, h28                       // FCVTZU <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 4 6  6  1.00 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZUv1i32                    V1UnitV[2], V1UnitV02[2],                         fcvtzu	s4, s27                        // FCVTZU S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUv1i64                    V1UnitV, V1UnitV02,                               fcvtzu	d22, d9                        // FCVTZU D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZUv4f16                    V1UnitV[2], V1UnitV02[2],                         fcvtzu	v19.4h, v3.4h                  // FCVTZU <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FCVTZUv8f16                    V1UnitV[2], V1UnitV02[2],                         fcvtzu	v4.8h, v13.8h                  // FCVTZU <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUv2f32                    V1UnitV, V1UnitV02,                               fcvtzu	v20.2s, v16.2s                 // FCVTZU <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FCVTZUv4f32                    V1UnitV[2], V1UnitV02[2],                         fcvtzu	v8.4s, v18.4s                  // FCVTZU <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FCVTZUv2f64                    V1UnitV, V1UnitV02,                               fcvtzu	v18.2d, v6.2d                  // FCVTZU <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  4      6    6     0.25     -    FCVTZU_ZPmZ_HtoH               V1UnitV[4], V1UnitV0[4], V1UnitV01[4], V1UnitV02[4],   fcvtzu	z0.h, p5/m, z9.h       // FCVTZU <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 4 6  6  0.25 V1UnitV0[4]
# CHECK-NEXT:  2      4    4     0.50     -    FCVTZU_ZPmZ_HtoS               V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   fcvtzu	z10.s, p3/m, z9.h      // FCVTZU <Zd>.S, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 2 4  4  0.50 V1UnitV0[4]
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZU_ZPmZ_HtoD               V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	z31.d, p0/m, z30.h             // FCVTZU <Zd>.D, <Pg>/M, <Zn>.H  \\ Floating point convert to integer, F16  \\ 1 3  3  1.00 V1UnitV0[4]
# CHECK-NEXT:  2      4    4     0.50     -    FCVTZU_ZPmZ_StoS               V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   fcvtzu	z17.s, p5/m, z22.s     // FCVTZU <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point convert to integer, F32  \\ 2 4  4  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZU_ZPmZ_StoD               V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	z1.d, p1/m, z23.s              // FCVTZU <Zd>.D, <Pg>/M, <Zn>.S  \\ Floating point convert to integer, F32  \\ 1 3  3  1.00 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZU_ZPmZ_DtoS               V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	z29.s, p7/m, z3.d              // FCVTZU <Zd>.S, <Pg>/M, <Zn>.D  \\ Floating point convert to integer, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FCVTZU_ZPmZ_DtoD               V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          fcvtzu	z29.d, p6/m, z17.d             // FCVTZU <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point convert to integer, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      7    7     0.29     -    FDIVHrr                        V1UnitV[7], V1UnitV02[7],                         fdiv	h29, h6, h25                   // FDIV <Hd>, <Hn>, <Hm>  \\ FP divide, H-form  \\ 1 7  7  0.29 V1UnitV02[2]
# CHECK-NEXT:  1      10   10    0.29     -    FDIVSrr                        V1UnitV[7], V1UnitV02[7],                         fdiv	s7, s11, s3                    // FDIV <Sd>, <Sn>, <Sm>  \\ FP divide, S-form  \\ 1 10  10  0.29 V1UnitV02[3]
# CHECK-NEXT:  1      15   15    0.29     -    FDIVDrr                        V1UnitV[7], V1UnitV02[7],                         fdiv	d10, d5, d2                    // FDIV <Dd>, <Dn>, <Dm>  \\ FP divide, D-form  \\ 1 15 15 0.29 V1UnitV02[7]
# CHECK-NEXT:  1      7    7     0.29     -    FDIVv4f16                      V1UnitV[7], V1UnitV02[7],                         fdiv	v20.4h, v5.4h, v18.4h          // FDIV <Vd>.4H, <Vn>.4H, <Vm>.4H  \\ ASIMD FP divide, D-form, F16  \\ 1 7  7  0.29 V1UnitV02[7]
# CHECK-NEXT:  1      13   13    0.40     -    FDIVv8f16                      V1UnitV[5], V1UnitV02[5],                         fdiv	v20.8h, v12.8h, v20.8h         // FDIV <Vd>.8H, <Vn>.8H, <Vm>.8H  \\ ASIMD FP divide, Q-form, F16  \\ 1 13  13  0.40 V1UnitV02[14]
# CHECK-NEXT:  1      10   10    0.29     -    FDIVv2f32                      V1UnitV[7], V1UnitV02[7],                         fdiv	v27.2s, v0.2s, v12.2s          // FDIV <Vd>.2S, <Vn>.2S, <Vm>.2S  \\ ASIMD FP divide, D-form, F32  \\ 1 10  10  0.29 V1UnitV02[5]
# CHECK-NEXT:  1      10   10    0.29     -    FDIVv4f32                      V1UnitV[7], V1UnitV02[7],                         fdiv	v11.4s, v28.4s, v6.4s          // FDIV <Vd>.4S, <Vn>.4S, <Vm>.4S  \\ ASIMD FP divide, Q-form, F32  \\ 1 10  10  0.29 V1UnitV02[10]
# CHECK-NEXT:  1      15   15    0.29     -    FDIVv2f64                      V1UnitV[7], V1UnitV02[7],                         fdiv	v6.2d, v26.2d, v21.2d          // FDIV <Vd>.2D, <Vn>.2D, <Vm>.2D  \\ ASIMD FP divide, Q-form, F64  \\ 1 15  15  0.29 V1UnitV02[15]
# CHECK-NEXT:  1      13   13    0.10     -    FDIV_ZPmZ_H                    V1UnitV[10], V1UnitV0[10], V1UnitV01[10], V1UnitV02[10],   fdiv	z3.h, p1/m, z3.h, z24.h  // FDIV <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Floating point divide, F16  \\ 1 13  13  0.10 V1UnitV0[13]
# CHECK-NEXT:  1      10   10    0.14     -    FDIV_ZPmZ_S                    V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   fdiv	z11.s, p1/m, z11.s, z18.s  // FDIV <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Floating point divide, F32  \\ 1 10  10  0.14 V1UnitV0[10]
# CHECK-NEXT:  1      15   15    0.14     -    FDIV_ZPmZ_D                    V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   fdiv	z16.d, p2/m, z16.d, z29.d  // FDIV <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Floating point divide, F64  \\ 1 15  15  0.14 V1UnitV0[15]
# CHECK-NEXT:  1      13   13    0.10     -    FDIVR_ZPmZ_H                   V1UnitV[10], V1UnitV0[10], V1UnitV01[10], V1UnitV02[10],   fdivr	z20.h, p1/m, z20.h, z5.h  // FDIVR <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Floating point divide, F16  \\ 1 13  13  0.10 V1UnitV0[13]
# CHECK-NEXT:  1      10   10    0.14     -    FDIVR_ZPmZ_S                   V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   fdivr	z28.s, p6/m, z28.s, z9.s  // FDIVR <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Floating point divide, F32  \\ 1 10  10  0.14 V1UnitV0[10]
# CHECK-NEXT:  1      15   15    0.14     -    FDIVR_ZPmZ_D                   V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   fdivr	z25.d, p4/m, z25.d, z28.d  // FDIVR <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Floating point divide, F64  \\ 1 15  15  0.14 V1UnitV0[15]
# CHECK-NEXT:  1      2    2     2.00     -    FDUP_ZI_S                      V1UnitV, V1UnitV01,                               fmov	z29.s, #0.50000000             // FDUP <Zd>.<T>, #<const>  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FEXPA_ZZ_S                     V1UnitV, V1UnitV01,                               fexpa	z24.s, z23.s                   // FEXPA <Zd>.<T>, <Zn>.<T>  \\ Floating point trigonometric   \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FMAD_ZPmZZ_D                   V1UnitV, V1UnitV01,                               fmad	z21.d, p4/m, z26.d, z25.d      // FMAD <Zdn>.<T>, <Pg>/M, <Zm>.<T>, <Za>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     4.00     -    FMADDHrrr                      V1UnitV,                                          fmadd	h13, h21, h13, h29             // FMADD <Hd>, <Hn>, <Hm>, <Ha>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMADDSrrr                      V1UnitV,                                          fmadd	s26, s10, s10, s21             // FMADD <Sd>, <Sn>, <Sm>, <Sa>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMADDDrrr                      V1UnitV,                                          fmadd	d24, d9, d17, d5               // FMADD <Dd>, <Dn>, <Dm>, <Da>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FMAX_ZPmI_D                    V1UnitV, V1UnitV01,                               fmax	z11.d, p7/m, z11.d, #0.0       // FMAX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FMAXHrr                        V1UnitV,                                          fmax	h23, h17, h14                  // FMAX <Hd>, <Hn>, <Hm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXSrr                        V1UnitV,                                          fmax	s19, s26, s7                   // FMAX <Sd>, <Sn>, <Sm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXDrr                        V1UnitV,                                          fmax	d28, d24, d30                  // FMAX <Dd>, <Dn>, <Dm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXv2f32                      V1UnitV,                                          fmax	v5.2s, v13.2s, v20.2s          // FMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXv2f32                      V1UnitV,                                          fmax	v4.2s, v11.2s, v22.2s          // FMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FMAX_ZPmZ_D                    V1UnitV, V1UnitV01,                               fmax	z20.d, p4/m, z20.d, z21.d      // FMAX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FMAXNM_ZPmI_D                  V1UnitV, V1UnitV01,                               fmaxnm	z5.d, p2/m, z5.d, #1.0         // FMAXNM <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FMAXNMHrr                      V1UnitV,                                          fmaxnm	h11, h17, h6                   // FMAXNM <Hd>, <Hn>, <Hm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXNMSrr                      V1UnitV,                                          fmaxnm	s19, s21, s18                  // FMAXNM <Sd>, <Sn>, <Sm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXNMDrr                      V1UnitV,                                          fmaxnm	d25, d4, d26                   // FMAXNM <Dd>, <Dn>, <Dm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXNMv2f32                    V1UnitV,                                          fmaxnm	v24.2s, v23.2s, v20.2s         // FMAXNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXNMv8f16                    V1UnitV,                                          fmaxnm	v6.8h, v16.8h, v2.8h           // FMAXNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FMAXNM_ZPmZ_S                  V1UnitV, V1UnitV01,                               fmaxnm	z29.s, p2/m, z29.s, z8.s       // FMAXNM <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FMAXNMPv2i16p                  V1UnitV,                                          fmaxnmp	h1, v31.2h             // FMAXNMP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXNMPv2i32p                  V1UnitV,                                          fmaxnmp	s5, v10.2s             // FMAXNMP <V><d>, <Vn>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXNMPv2f64                   V1UnitV,                                          fmaxnmp	v4.2d, v17.2d, v22.2d  // FMAXNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXNMPv2f64                   V1UnitV,                                          fmaxnmp	v22.2d, v24.2d, v8.2d  // FMAXNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    FMAXNMVv4i16v                  V1UnitV[2],                                       fmaxnmv	h17, v18.4h            // FMAXNMV H<d>, <Vn>.4H  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
# CHECK-NEXT:  3      6    6     1.33     -    FMAXNMVv8i16v                  V1UnitV[3],                                       fmaxnmv	h26, v3.8h             // FMAXNMV H<d>, <Vn>.8H  \\ ASIMD FP max/min, reduce, Q-form F16  \\ 3 6  6  1.33 V1UnitV[4]
# CHECK-NEXT:  2      4    4     2.00     -    FMAXNMVv4i32v                  V1UnitV[2],                                       fmaxnmv	s19, v6.4s             // FMAXNMV S<d>, <Vn>.4S  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
# CHECK-NEXT:  6      13   13    0.33     -    FMAXNMV_VPZ_H                  V1UnitV[6], V1UnitV01[6],                         fmaxnmv	h19, p7, z1.h          // FMAXNMV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
# CHECK-NEXT:  6      11   11    0.40     -    FMAXNMV_VPZ_S                  V1UnitV[6], V1UnitV01[5],                         fmaxnmv	s15, p2, z6.s          // FMAXNMV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
# CHECK-NEXT:  5      9    9     0.50     -    FMAXNMV_VPZ_D                  V1UnitV[5], V1UnitV01[4],                         fmaxnmv	d12, p3, z11.d         // FMAXNMV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
# CHECK-NEXT:  1      2    2     4.00     -    FMAXPv2i16p                    V1UnitV,                                          fmaxp	h18, v27.2h                    // FMAXP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXPv2i32p                    V1UnitV,                                          fmaxp	s9, v5.2s                      // FMAXP <V><d>, <Vn>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXPv2f64                     V1UnitV,                                          fmaxp	v15.2d, v21.2d, v10.2d         // FMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMAXPv2f64                     V1UnitV,                                          fmaxp	v19.2d, v17.2d, v16.2d         // FMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    FMAXVv4i16v                    V1UnitV[2],                                       fmaxv	h4, v18.4h                     // FMAXV H<d>, <Vn>.4H  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
# CHECK-NEXT:  3      6    6     1.33     -    FMAXVv8i16v                    V1UnitV[3],                                       fmaxv	h24, v23.8h                    // FMAXV H<d>, <Vn>.8H  \\ ASIMD FP max/min, reduce, Q-form F16  \\ 3 6  6  1.33 V1UnitV[4]
# CHECK-NEXT:  2      4    4     2.00     -    FMAXVv4i32v                    V1UnitV[2],                                       fmaxv	s6, v18.4s                     // FMAXV S<d>, <Vn>.4S  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
# CHECK-NEXT:  6      13   13    0.33     -    FMAXV_VPZ_H                    V1UnitV[6], V1UnitV01[6],                         fmaxv	h12, p4, z30.h                 // FMAXV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
# CHECK-NEXT:  6      11   11    0.40     -    FMAXV_VPZ_S                    V1UnitV[6], V1UnitV01[5],                         fmaxv	s21, p2, z8.s                  // FMAXV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
# CHECK-NEXT:  5      9    9     0.50     -    FMAXV_VPZ_D                    V1UnitV[5], V1UnitV01[4],                         fmaxv	d30, p0, z11.d                 // FMAXV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
# CHECK-NEXT:  1      2    2     2.00     -    FMIN_ZPmI_D                    V1UnitV, V1UnitV01,                               fmin	z29.d, p6/m, z29.d, #1.0       // FMIN <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FMINHrr                        V1UnitV,                                          fmin	h6, h31, h9                    // FMIN <Hd>, <Hn>, <Hm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINSrr                        V1UnitV,                                          fmin	s11, s31, s22                  // FMIN <Sd>, <Sn>, <Sm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINDrr                        V1UnitV,                                          fmin	d4, d27, d9                    // FMIN <Dd>, <Dn>, <Dm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINv2f32                      V1UnitV,                                          fmin	v11.2s, v28.2s, v11.2s         // FMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINv2f32                      V1UnitV,                                          fmin	v9.2s, v6.2s, v26.2s           // FMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FMIN_ZPmZ_D                    V1UnitV, V1UnitV01,                               fmin	z26.d, p0/m, z26.d, z0.d       // FMIN <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FMINNM_ZPmI_H                  V1UnitV, V1UnitV01,                               fminnm	z22.h, p7/m, z22.h, #0.0       // FMINNM <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FMINNMHrr                      V1UnitV,                                          fminnm	h12, h22, h8                   // FMINNM <Hd>, <Hn>, <Hm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINNMSrr                      V1UnitV,                                          fminnm	s10, s15, s20                  // FMINNM <Sd>, <Sn>, <Sm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINNMDrr                      V1UnitV,                                          fminnm	d1, d13, d6                    // FMINNM <Dd>, <Dn>, <Dm>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINNMv4f32                    V1UnitV,                                          fminnm	v12.4s, v19.4s, v20.4s         // FMINNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINNMv2f32                    V1UnitV,                                          fminnm	v24.2s, v12.2s, v23.2s         // FMINNM <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FMINNM_ZPmZ_D                  V1UnitV, V1UnitV01,                               fminnm	z31.d, p0/m, z31.d, z17.d      // FMINNM <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point min/max  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FMINNMPv2i16p                  V1UnitV,                                          fminnmp	h6, v27.2h             // FMINNMP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINNMPv2i32p                  V1UnitV,                                          fminnmp	s7, v7.2s              // FMINNMP <V><d>, <Vn>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINNMPv4f32                   V1UnitV,                                          fminnmp	v5.4s, v17.4s, v13.4s  // FMINNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINNMPv4f32                   V1UnitV,                                          fminnmp	v12.4s, v9.4s, v14.4s  // FMINNMP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    FMINNMVv4i16v                  V1UnitV[2],                                       fminnmv	h7, v7.4h              // FMINNMV H<d>, <Vn>.4H  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
# CHECK-NEXT:  3      6    6     1.33     -    FMINNMVv8i16v                  V1UnitV[3],                                       fminnmv	h27, v8.8h             // FMINNMV H<d>, <Vn>.8H  \\ ASIMD FP max/min, reduce, Q-form F16  \\ 3 6  6  1.33 V1UnitV[4]
# CHECK-NEXT:  2      4    4     2.00     -    FMINNMVv4i32v                  V1UnitV[2],                                       fminnmv	s17, v23.4s            // FMINNMV S<d>, <Vn>.4S  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
# CHECK-NEXT:  6      13   13    0.33     -    FMINNMV_VPZ_H                  V1UnitV[6], V1UnitV01[6],                         fminnmv	h5, p7, z3.h           // FMINNMV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
# CHECK-NEXT:  6      11   11    0.40     -    FMINNMV_VPZ_S                  V1UnitV[6], V1UnitV01[5],                         fminnmv	s18, p2, z24.s         // FMINNMV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
# CHECK-NEXT:  5      9    9     0.50     -    FMINNMV_VPZ_D                  V1UnitV[5], V1UnitV01[4],                         fminnmv	d24, p4, z23.d         // FMINNMV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
# CHECK-NEXT:  1      2    2     4.00     -    FMINPv2i16p                    V1UnitV,                                          fminp	h21, v24.2h                    // FMINP <Vh><d>, <Vn>.<Th>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINPv2i32p                    V1UnitV,                                          fminp	s24, v5.2s                     // FMINP <V><d>, <Vn>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINPv2f32                     V1UnitV,                                          fminp	v30.2s, v2.2s, v11.2s          // FMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMINPv2f32                     V1UnitV,                                          fminp	v24.2s, v12.2s, v31.2s         // FMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP max/min, pairwise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    FMINVv4i16v                    V1UnitV[2],                                       fminv	h1, v29.4h                     // FMINV H<d>, <Vn>.4H  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
# CHECK-NEXT:  3      6    6     1.33     -    FMINVv8i16v                    V1UnitV[3],                                       fminv	h17, v5.8h                     // FMINV H<d>, <Vn>.8H  \\ ASIMD FP max/min, reduce, Q-form F16  \\ 3 6  6  1.33 V1UnitV[4]
# CHECK-NEXT:  2      4    4     2.00     -    FMINVv4i32v                    V1UnitV[2],                                       fminv	s15, v10.4s                    // FMINV S<d>, <Vn>.4S  \\ ASIMD FP max/min, reduce, F32 and D-form F16  \\ 2 4  4  2.00 V1UnitV[2]
# CHECK-NEXT:  6      13   13    0.33     -    FMINV_VPZ_H                    V1UnitV[6], V1UnitV01[6],                         fminv	h11, p6, z0.h                  // FMINV H<d>, <Pg>, <Zn>.H  \\ Floating point reduction, F16  \\ 6 13  13  0.33 V1UnitV01[7]
# CHECK-NEXT:  6      11   11    0.40     -    FMINV_VPZ_S                    V1UnitV[6], V1UnitV01[5],                         fminv	s16, p1, z25.s                 // FMINV S<d>, <Pg>, <Zn>.S  \\ Floating point reduction, F32  \\ 6 11  11  0.40 V1UnitV01[6]
# CHECK-NEXT:  5      9    9     0.50     -    FMINV_VPZ_D                    V1UnitV[5], V1UnitV01[4],                         fminv	d28, p2, z13.d                 // FMINV D<d>, <Pg>, <Zn>.D  \\ Floating point reduction, F64  \\ 5 9  9  0.50 V1UnitV01[4]
# CHECK-NEXT:  1      4    2     4.00     -    FMLAv1i16_indexed              V1UnitV,                                          fmla	h29, h14, v1.h[3]              // FMLA <Hd>, <Hn>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLAv1i32_indexed              V1UnitV,                                          fmla	s28, s19, v8.s[1]              // FMLA S<d>, S<n>, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLAv1i64_indexed              V1UnitV,                                          fmla	d15, d3, v14.d[0]              // FMLA D<d>, D<n>, <Vm>.D[<indexd>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLAv4i16_indexed              V1UnitV,                                          fmla	v9.4h, v1.4h, v7.h[0]          // FMLA <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLAv2i32_indexed              V1UnitV,                                          fmla	v16.2s, v25.2s, v21.s[3]       // FMLA <Vd>.2S, <Vn>.2S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLAv4i32_indexed              V1UnitV,                                          fmla	v11.4s, v17.4s, v13.s[2]       // FMLA <Vd>.4S, <Vn>.4S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLAv2i64_indexed              V1UnitV,                                          fmla	v9.2d, v13.2d, v16.d[1]        // FMLA <Vd>.2D, <Vn>.2D, <Vm>.D[<indexd>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     2.00     -    FMLA_ZZZI_H                    V1UnitV, V1UnitV01,                               fmla	z7.h, z6.h, z4.h[2]            // FMLA <Zda>.H, <Zn>.H, <Zmhs>.H[<immh>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FMLA_ZZZI_S                    V1UnitV, V1UnitV01,                               fmla	z13.s, z20.s, z5.s[3]          // FMLA <Zda>.S, <Zn>.S, <Zmhs>.S[<imms>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FMLA_ZZZI_D                    V1UnitV, V1UnitV01,                               fmla	z22.d, z24.d, z9.d[0]          // FMLA <Zda>.D, <Zn>.D, <Zmd>.D[<immd>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     4.00     -    FMLAv2f64                      V1UnitV,                                          fmla	v5.2d, v2.2d, v7.2d            // FMLA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLAv2f32                      V1UnitV,                                          fmla	v26.2s, v29.2s, v14.2s         // FMLA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     2.00     -    FMLA_ZPmZZ_H                   V1UnitV, V1UnitV01,                               fmla	z17.h, p3/m, z9.h, z3.h        // FMLA <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     4.00     -    FMLSv1i16_indexed              V1UnitV,                                          fmls	h20, h24, v6.h[5]              // FMLS <Hd>, <Hn>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLSv1i32_indexed              V1UnitV,                                          fmls	s24, s0, v8.s[0]               // FMLS S<d>, S<n>, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLSv1i64_indexed              V1UnitV,                                          fmls	d20, d26, v31.d[0]             // FMLS D<d>, D<n>, <Vm>.D[<indexd>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLSv8i16_indexed              V1UnitV,                                          fmls	v13.8h, v0.8h, v8.h[1]         // FMLS <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLSv2i32_indexed              V1UnitV,                                          fmls	v8.2s, v13.2s, v8.s[1]         // FMLS <Vd>.2S, <Vn>.2S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLSv4i32_indexed              V1UnitV,                                          fmls	v13.4s, v16.4s, v20.s[3]       // FMLS <Vd>.4S, <Vn>.4S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLSv2i64_indexed              V1UnitV,                                          fmls	v21.2d, v27.2d, v1.d[0]        // FMLS <Vd>.2D, <Vn>.2D, <Vm>.D[<indexd>]  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     2.00     -    FMLS_ZZZI_H                    V1UnitV, V1UnitV01,                               fmls	z23.h, z13.h, z5.h[7]          // FMLS <Zda>.H, <Zn>.H, <Zmhs>.H[<immh>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FMLS_ZZZI_S                    V1UnitV, V1UnitV01,                               fmls	z29.s, z10.s, z5.s[2]          // FMLS <Zda>.S, <Zn>.S, <Zmhs>.S[<imms>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FMLS_ZZZI_D                    V1UnitV, V1UnitV01,                               fmls	z7.d, z19.d, z6.d[1]           // FMLS <Zda>.D, <Zn>.D, <Zmd>.D[<immd>]  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     4.00     -    FMLSv4f16                      V1UnitV,                                          fmls	v24.4h, v28.4h, v1.4h          // FMLS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMLSv4f32                      V1UnitV,                                          fmls	v2.4s, v5.4s, v29.4s           // FMLS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     2.00     -    FMLS_ZPmZZ_D                   V1UnitV, V1UnitV01,                               fmls	z9.d, p1/m, z1.d, z11.d        // FMLS <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    FMOVHWr                        V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          fmov	w25, h28                       // FMOV <Wd>, <Hn>  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    FMOVHXr                        V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          fmov	x15, h4                        // FMOV <Xd>, <Hn>  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      3    3     1.00     -    FMOVWHr                        V1UnitI, V1UnitM, V1UnitM0,                       fmov	h31, w25                       // FMOV <Hd>, <Wn>  \\ FP transfer, from gen to low half of vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    FMOVWSr                        V1UnitI, V1UnitM, V1UnitM0,                       fmov	s18, w20                       // FMOV <Sd>, <Wn>  \\ FP transfer, from gen to low half of vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    FMOVSWr                        V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          fmov	w2, s19                        // FMOV <Wd>, <Sn>  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      3    3     1.00     -    FMOVXHr                        V1UnitI, V1UnitM, V1UnitM0,                       fmov	h10, x4                        // FMOV <Hd>, <Xn>  \\ FP transfer, from gen to low half of vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    FMOVXDr                        V1UnitI, V1UnitM, V1UnitM0,                       fmov	d27, x9                        // FMOV <Dd>, <Xn>  \\ FP transfer, from gen to low half of vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  2      5    5     1.00     -    FMOVXDHighr                    V1UnitI, V1UnitM, V1UnitM0, V1UnitV,              fmov	v29.d[1], x9                   // FMOV <Vd>.D[1], <Xn>  \\ FP transfer, from gen to high half of vec reg  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    FMOVDXr                        V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          fmov	x23, d14                       // FMOV <Xd>, <Dn>  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    FMOVDXHighr                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          fmov	x20, v8.d[1]                   // FMOV <Xd>, <Vn>.D[1]  \\ FP transfer, from vec to gen reg  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     2.00     -    FCPY_ZPmI_D                    V1UnitV, V1UnitV01,                               fmov	z12.d, p6/m, #0.50000000       // FMOV <Zd>.<T>, <Pg>/M, #<const>  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FDUP_ZI_S                      V1UnitV, V1UnitV01,                               fmov	z27.s, #0.50000000             // FMOV <Zd>.<T>, #<const>  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FMOVHr                         V1UnitV,                                          fmov	h24, h21                       // FMOV <Hd>, <Hn>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMOVSr                         V1UnitV,                                          fmov	s9, s20                        // FMOV <Sd>, <Sn>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMOVDr                         V1UnitV,                                          fmov	d25, d30                       // FMOV <Dd>, <Dn>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMOVHi                         V1UnitV,                                          fmov	h31, #0.50000000               // FMOV <Hd>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMOVSi                         V1UnitV,                                          fmov	s26, #0.50000000               // FMOV <Sd>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMOVDi                         V1UnitV,                                          fmov	d7, #0.50000000                // FMOV <Dd>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMOVv2f64_ns                   V1UnitV,                                          fmov	v11.2d, #0.50000000            // FMOV <Vd>.<T>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMOVv2f64_ns                   V1UnitV,                                          fmov	v13.2d, #0.50000000            // FMOV <Vd>.<T>, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMOVv2f64_ns                   V1UnitV,                                          fmov	v6.2d, #0.50000000             // FMOV <Vd>.2D, #<imm>  \\ ASIMD move, FP immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPmI_H                     V1UnitV, V1UnitV01,                               mov	z13.h, p6/m, #0                // FMOV <Zd>.<T>, <Pg>/M, #0.0  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_S                       V1UnitV, V1UnitV01,                               mov	z1.s, #0                       // FMOV <Zd>.<T>, #0.0  \\ Floating point copy  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FMSB_ZPmZZ_S                   V1UnitV, V1UnitV01,                               fmsb	z20.s, p7/m, z30.s, z30.s      // FMSB <Zdn>.<T>, <Pg>/M, <Zm>.<T>, <Za>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     4.00     -    FMSUBHrrr                      V1UnitV,                                          fmsub	h16, h18, h20, h5              // FMSUB <Hd>, <Hn>, <Hm>, <Ha>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMSUBSrrr                      V1UnitV,                                          fmsub	s25, s16, s13, s19             // FMSUB <Sd>, <Sn>, <Sm>, <Sa>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FMSUBDrrr                      V1UnitV,                                          fmsub	d0, d7, d31, d26               // FMSUB <Dd>, <Dn>, <Dm>, <Da>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULv1i16_indexed              V1UnitV,                                          fmul	h3, h13, v9.h[5]               // FMUL <Hd>, <Hn>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULv1i32_indexed              V1UnitV,                                          fmul	s27, s11, v25.s[1]             // FMUL S<d>, S<n>, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULv1i64_indexed              V1UnitV,                                          fmul	d2, d7, v11.d[1]               // FMUL D<d>, D<n>, <Vm>.D[<indexd>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULv4i16_indexed              V1UnitV,                                          fmul	v1.4h, v5.4h, v13.h[5]         // FMUL <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULv2i32_indexed              V1UnitV,                                          fmul	v4.2s, v11.2s, v17.s[1]        // FMUL <Vd>.2S, <Vn>.2S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULv4i32_indexed              V1UnitV,                                          fmul	v24.4s, v27.4s, v19.s[1]       // FMUL <Vd>.4S, <Vn>.4S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULv2i64_indexed              V1UnitV,                                          fmul	v0.2d, v20.2d, v7.d[1]         // FMUL <Vd>.2D, <Vn>.2D, <Vm>.D[<indexd>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     2.00     -    FMUL_ZPmI_S                    V1UnitV, V1UnitV01,                               fmul	z16.s, p6/m, z16.s, #2.0       // FMUL <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FMUL_ZZZI_H                    V1UnitV, V1UnitV01,                               fmul	z21.h, z24.h, z3.h[7]          // FMUL <Zd>.H, <Zn>.H, <Zmhs>.H[<immh>]  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FMUL_ZZZI_S                    V1UnitV, V1UnitV01,                               fmul	z19.s, z20.s, z0.s[1]          // FMUL <Zd>.S, <Zn>.S, <Zmhs>.S[<imms>]  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FMUL_ZZZI_D                    V1UnitV, V1UnitV01,                               fmul	z20.d, z23.d, z0.d[1]          // FMUL <Zd>.D, <Zn>.D, <Zmd>.D[<immd>]  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     4.00     -    FMULHrr                        V1UnitV,                                          fmul	h25, h2, h8                    // FMUL <Hd>, <Hn>, <Hm>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULSrr                        V1UnitV,                                          fmul	s6, s8, s19                    // FMUL <Sd>, <Sn>, <Sm>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULDrr                        V1UnitV,                                          fmul	d4, d26, d23                   // FMUL <Dd>, <Dn>, <Dm>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULv2f32                      V1UnitV,                                          fmul	v21.2s, v6.2s, v25.2s          // FMUL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULv4f16                      V1UnitV,                                          fmul	v15.4h, v30.4h, v7.4h          // FMUL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     2.00     -    FMUL_ZPmZ_H                    V1UnitV, V1UnitV01,                               fmul	z3.h, p2/m, z3.h, z22.h        // FMUL <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FMUL_ZZZ_H                     V1UnitV, V1UnitV01,                               fmul	z19.h, z18.h, z0.h             // FMUL <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     4.00     -    FMULXv1i16_indexed             V1UnitV,                                          fmulx	h29, h6, v14.h[5]              // FMULX <Hd>, <Hn>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULXv1i32_indexed             V1UnitV,                                          fmulx	s5, s6, v25.s[3]               // FMULX S<d>, S<n>, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULXv1i64_indexed             V1UnitV,                                          fmulx	d17, d25, v16.d[1]             // FMULX D<d>, D<n>, <Vm>.D[<indexd>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULXv8i16_indexed             V1UnitV,                                          fmulx	v12.8h, v12.8h, v14.h[2]       // FMULX <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULXv2i32_indexed             V1UnitV,                                          fmulx	v7.2s, v31.2s, v4.s[1]         // FMULX <Vd>.2S, <Vn>.2S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULXv4i32_indexed             V1UnitV,                                          fmulx	v15.4s, v27.4s, v5.s[2]        // FMULX <Vd>.4S, <Vn>.4S, <Vm>.S[<indexs>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULXv2i64_indexed             V1UnitV,                                          fmulx	v23.2d, v13.2d, v20.d[1]       // FMULX <Vd>.2D, <Vn>.2D, <Vm>.D[<indexd>]  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMULX16                        V1UnitV,                                          fmulx	h23, h21, h6                   // FMULX <Hd>, <Hn>, <Hm>  \\ ASIMD FP multiply  \\ 1 2  2  4.00 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FMULX32                        V1UnitV,                                          fmulx	s9, s5, s7                     // FMULX <V><d>, <V><n>, <V><m>  \\ ASIMD FP multiply  \\ 1 2  2  4.00 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULXv2f32                     V1UnitV,                                          fmulx	v12.2s, v26.2s, v31.2s         // FMULX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FMULXv2f32                     V1UnitV,                                          fmulx	v0.2s, v31.2s, v21.2s          // FMULX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     2.00     -    FMULX_ZPmZ_H                   V1UnitV, V1UnitV01,                               fmulx	z3.h, p1/m, z3.h, z27.h        // FMULX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FNEGHr                         V1UnitV,                                          fneg	h21, h9                        // FNEG <Hd>, <Hn>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FNEGSr                         V1UnitV,                                          fneg	s16, s1                        // FNEG <Sd>, <Sn>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FNEGDr                         V1UnitV,                                          fneg	d22, d13                       // FNEG <Dd>, <Dn>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FNEGv4f32                      V1UnitV,                                          fneg	v13.4s, v19.4s                 // FNEG <Vd>.<T>, <Vn>.<T>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FNEGv2f32                      V1UnitV,                                          fneg	v0.2s, v15.2s                  // FNEG <Vd>.<T>, <Vn>.<T>  \\ ASIMD FP negate  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FNEG_ZPmZ_D                    V1UnitV, V1UnitV01,                               fneg	z2.d, p7/m, z3.d               // FNEG <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FNMAD_ZPmZZ_S                  V1UnitV, V1UnitV01,                               fnmad	z3.s, p4/m, z30.s, z27.s       // FNMAD <Zdn>.<T>, <Pg>/M, <Zm>.<T>, <Za>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     4.00     -    FNMADDHrrr                     V1UnitV,                                          fnmadd	h31, h20, h23, h16             // FNMADD <Hd>, <Hn>, <Hm>, <Ha>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FNMADDSrrr                     V1UnitV,                                          fnmadd	s14, s12, s29, s24             // FNMADD <Sd>, <Sn>, <Sm>, <Sa>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FNMADDDrrr                     V1UnitV,                                          fnmadd	d9, d22, d20, d17              // FNMADD <Dd>, <Dn>, <Dm>, <Da>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     2.00     -    FNMLA_ZPmZZ_S                  V1UnitV, V1UnitV01,                               fnmla	z16.s, p0/m, z14.s, z24.s      // FNMLA <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FNMLS_ZPmZZ_S                  V1UnitV, V1UnitV01,                               fnmls	z26.s, p6/m, z28.s, z31.s      // FNMLS <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FNMSB_ZPmZZ_H                  V1UnitV, V1UnitV01,                               fnmsb	z1.h, p4/m, z1.h, z4.h         // FNMSB <Zdn>.<T>, <Pg>/M, <Zm>.<T>, <Za>.<T>  \\ Floating point multiply accumulate  \\ 1 4 2 2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     4.00     -    FNMSUBHrrr                     V1UnitV,                                          fnmsub	h1, h4, h8, h15                // FNMSUB <Hd>, <Hn>, <Hm>, <Ha>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FNMSUBSrrr                     V1UnitV,                                          fnmsub	s11, s30, s7, s1               // FNMSUB <Sd>, <Sn>, <Sm>, <Sa>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      4    2     4.00     -    FNMSUBDrrr                     V1UnitV,                                          fnmsub	d7, d7, d21, d20               // FNMSUB <Dd>, <Dn>, <Dm>, <Da>  \\ FP multiply accumulate  \\ 1 4 2 4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FNMULHrr                       V1UnitV,                                          fnmul	h1, h20, h18                   // FNMUL <Hd>, <Hn>, <Hm>  \\ FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FNMULSrr                       V1UnitV,                                          fnmul	s30, s1, s12                   // FNMUL <Sd>, <Sn>, <Sm>  \\ FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      3    3     4.00     -    FNMULDrr                       V1UnitV,                                          fnmul	d31, d28, d20                  // FNMUL <Dd>, <Dn>, <Dm>  \\ FP multiply  \\ 1 3  3  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     2.00     -    FRECPEv1f16                    V1UnitV, V1UnitV02,                               frecpe	h8, h30                        // FRECPE <Hd>, <Hn>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1 4  4  2.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRECPEv1i32                    V1UnitV, V1UnitV02,                               frecpe	s30, s17                       // FRECPE S<d>, S<n>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRECPEv1i64                    V1UnitV, V1UnitV02,                               frecpe	d17, d3                        // FRECPE D<d>, D<n>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    FRECPEv4f16                    V1UnitV, V1UnitV02,                               frecpe	v13.4h, v26.4h                 // FRECPE <Vd>.4H, <Vn>.4H  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  2      6    6     1.00     -    FRECPEv8f16                    V1UnitV[2], V1UnitV02[2],                         frecpe	v18.8h, v4.8h                  // FRECPE <Vd>.8H, <Vn>.8H  \\ ASIMD reciprocal and square root estimate, Q-form F16  \\ 2 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FRECPEv2f32                    V1UnitV, V1UnitV02,                               frecpe	v29.2s, v3.2s                  // FRECPE <Vd>.2S, <Vn>.2S  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    FRECPEv4f32                    V1UnitV, V1UnitV02,                               frecpe	v2.4s, v30.4s                  // FRECPE <Vd>.4S, <Vn>.4S  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  1      4    4     2.00     -    FRECPEv2f64                    V1UnitV, V1UnitV02,                               frecpe	v27.2d, v1.2d                  // FRECPE <Vd>.2D, <Vn>.2D  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     0.25     -    FRECPE_ZZ_H                    V1UnitV[4], V1UnitV0[4], V1UnitV01[4], V1UnitV02[4],   frecpe	z30.h, z1.h            // FRECPE <Zd>.H, <Zn>.H  \\ Floating point reciprocal estimate, F16  \\ 4 6  6  0.25 V1UnitV0
# CHECK-NEXT:  2      4    4     0.50     -    FRECPE_ZZ_S                    V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   frecpe	z5.s, z28.s            // FRECPE <Zd>.S, <Zn>.S  \\ Floating point reciprocal estimate, F32  \\ 2 4  4  0.50 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FRECPE_ZZ_D                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frecpe	z10.d, z17.d                   // FRECPE <Zd>.D, <Zn>.D  \\ Floating point reciprocal estimate, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     4.00     -    FRECPS16                       V1UnitV,                                          frecps	h18, h0, h9                    // FRECPS <Hd>, <Hn>, <Hm>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     4.00     -    FRECPS64                       V1UnitV,                                          frecps	d14, d17, d12                  // FRECPS <V><d>, <V><n>, <V><m>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     4.00     -    FRECPSv8f16                    V1UnitV,                                          frecps	v20.8h, v9.8h, v7.8h           // FRECPS <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     4.00     -    FRECPSv4f32                    V1UnitV,                                          frecps	v15.4s, v0.4s, v30.4s          // FRECPS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     2.00     -    FRECPS_ZZZ_H                   V1UnitV, V1UnitV01,                               frecps	z13.h, z29.h, z5.h             // FRECPS <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point reciprocal step  \\ 1 4  4  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FRECPXv1f16                    V1UnitV, V1UnitV02,                               frecpx	h5, h10                        // FRECPX <Hd>, <Hn>  \\ ASIMD reciprocal exponent  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRECPXv1i32                    V1UnitV, V1UnitV02,                               frecpx	s10, s12                       // FRECPX <V><d>, <V><n>  \\ ASIMD reciprocal exponent  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     1.00     -    FRECPX_ZPmZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frecpx	z26.s, p2/m, z29.s             // FRECPX <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Floating point  reciprocal exponent  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      6    6     1.00     -    FRINTN_ZPmZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintn	z1.h, p2/m, z23.h              // FRINTN <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    FRINTN_ZPmZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintn	z26.s, p5/m, z2.s              // FRINTN <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FRINTN_ZPmZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintn	z11.d, p6/m, z31.d             // FRINTN <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      6    6     1.00     -    FRINTA_ZPmZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frinta	z6.h, p4/m, z31.h              // FRINTA <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    FRINTA_ZPmZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frinta	z21.s, p0/m, z14.s             // FRINTA <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FRINTA_ZPmZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frinta	z9.d, p3/m, z3.d               // FRINTA <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      6    6     1.00     -    FRINTM_ZPmZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintm	z5.h, p4/m, z12.h              // FRINTM <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    FRINTM_ZPmZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintm	z30.s, p4/m, z20.s             // FRINTM <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FRINTM_ZPmZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintm	z14.d, p5/m, z0.d              // FRINTM <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      6    6     1.00     -    FRINTP_ZPmZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintp	z25.h, p6/m, z1.h              // FRINTP <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    FRINTP_ZPmZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintp	z26.s, p0/m, z31.s             // FRINTP <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FRINTP_ZPmZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintp	z11.d, p4/m, z20.d             // FRINTP <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      6    6     1.00     -    FRINTZ_ZPmZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintz	z19.h, p4/m, z25.h             // FRINTZ <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    FRINTZ_ZPmZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintz	z16.s, p1/m, z9.s              // FRINTZ <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FRINTZ_ZPmZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintz	z24.d, p7/m, z2.d              // FRINTZ <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      6    6     1.00     -    FRINTI_ZPmZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frinti	z26.h, p4/m, z7.h              // FRINTI <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    FRINTI_ZPmZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frinti	z2.s, p3/m, z17.s              // FRINTI <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FRINTI_ZPmZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frinti	z19.d, p1/m, z9.d              // FRINTI <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      6    6     1.00     -    FRINTX_ZPmZ_H                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintx	z17.h, p0/m, z23.h             // FRINTX <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point round to integral, F16  \\ 1 6  6  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    FRINTX_ZPmZ_S                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintx	z10.s, p6/m, z24.s             // FRINTX <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point round to integral, F32  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FRINTX_ZPmZ_D                  V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frintx	z1.d, p4/m, z7.d               // FRINTX <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point round to integral, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     2.00     -    FRINTAHr                       V1UnitV, V1UnitV02,                               frinta	h1, h23                        // FRINTA <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTASr                       V1UnitV, V1UnitV02,                               frinta	s20, s16                       // FRINTA <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTADr                       V1UnitV, V1UnitV02,                               frinta	d16, d19                       // FRINTA <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTAv4f16                    V1UnitV[2], V1UnitV02[2],                         frinta	v20.4h, v0.4h                  // FRINTA <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FRINTAv8f16                    V1UnitV[2], V1UnitV02[2],                         frinta	v24.8h, v10.8h                 // FRINTA <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTAv2f32                    V1UnitV, V1UnitV02,                               frinta	v10.2s, v21.2s                 // FRINTA <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTAv4f32                    V1UnitV[2], V1UnitV02[2],                         frinta	v28.4s, v10.4s                 // FRINTA <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTAv2f64                    V1UnitV, V1UnitV02,                               frinta	v6.2d, v0.2d                   // FRINTA <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTIHr                       V1UnitV, V1UnitV02,                               frinti	h27, h6                        // FRINTI <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTISr                       V1UnitV, V1UnitV02,                               frinti	s3, s0                         // FRINTI <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTIDr                       V1UnitV, V1UnitV02,                               frinti	d4, d11                        // FRINTI <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTIv4f16                    V1UnitV[2], V1UnitV02[2],                         frinti	v16.4h, v28.4h                 // FRINTI <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FRINTIv8f16                    V1UnitV[2], V1UnitV02[2],                         frinti	v19.8h, v14.8h                 // FRINTI <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTIv2f32                    V1UnitV, V1UnitV02,                               frinti	v9.2s, v22.2s                  // FRINTI <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTIv4f32                    V1UnitV[2], V1UnitV02[2],                         frinti	v26.4s, v0.4s                  // FRINTI <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTIv2f64                    V1UnitV, V1UnitV02,                               frinti	v0.2d, v2.2d                   // FRINTI <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTMHr                       V1UnitV, V1UnitV02,                               frintm	h12, h21                       // FRINTM <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTMSr                       V1UnitV, V1UnitV02,                               frintm	s31, s20                       // FRINTM <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTMDr                       V1UnitV, V1UnitV02,                               frintm	d3, d31                        // FRINTM <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTMv4f16                    V1UnitV[2], V1UnitV02[2],                         frintm	v25.4h, v30.4h                 // FRINTM <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FRINTMv8f16                    V1UnitV[2], V1UnitV02[2],                         frintm	v0.8h, v9.8h                   // FRINTM <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTMv2f32                    V1UnitV, V1UnitV02,                               frintm	v9.2s, v9.2s                   // FRINTM <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTMv4f32                    V1UnitV[2], V1UnitV02[2],                         frintm	v17.4s, v28.4s                 // FRINTM <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTMv2f64                    V1UnitV, V1UnitV02,                               frintm	v7.2d, v31.2d                  // FRINTM <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTNHr                       V1UnitV, V1UnitV02,                               frintn	h18, h24                       // FRINTN <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTNSr                       V1UnitV, V1UnitV02,                               frintn	s27, s2                        // FRINTN <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTNDr                       V1UnitV, V1UnitV02,                               frintn	d16, d3                        // FRINTN <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTNv4f16                    V1UnitV[2], V1UnitV02[2],                         frintn	v12.4h, v21.4h                 // FRINTN <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FRINTNv8f16                    V1UnitV[2], V1UnitV02[2],                         frintn	v8.8h, v20.8h                  // FRINTN <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTNv2f32                    V1UnitV, V1UnitV02,                               frintn	v4.2s, v29.2s                  // FRINTN <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTNv4f32                    V1UnitV[2], V1UnitV02[2],                         frintn	v22.4s, v20.4s                 // FRINTN <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTNv2f64                    V1UnitV, V1UnitV02,                               frintn	v29.2d, v24.2d                 // FRINTN <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTPHr                       V1UnitV, V1UnitV02,                               frintp	h22, h2                        // FRINTP <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTPSr                       V1UnitV, V1UnitV02,                               frintp	s9, s24                        // FRINTP <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTPDr                       V1UnitV, V1UnitV02,                               frintp	d5, d24                        // FRINTP <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTPv4f16                    V1UnitV[2], V1UnitV02[2],                         frintp	v1.4h, v14.4h                  // FRINTP <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FRINTPv8f16                    V1UnitV[2], V1UnitV02[2],                         frintp	v29.8h, v31.8h                 // FRINTP <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTPv2f32                    V1UnitV, V1UnitV02,                               frintp	v27.2s, v31.2s                 // FRINTP <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTPv4f32                    V1UnitV[2], V1UnitV02[2],                         frintp	v13.4s, v19.4s                 // FRINTP <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTPv2f64                    V1UnitV, V1UnitV02,                               frintp	v13.2d, v27.2d                 // FRINTP <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTXHr                       V1UnitV, V1UnitV02,                               frintx	h21, h22                       // FRINTX <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTXSr                       V1UnitV, V1UnitV02,                               frintx	s28, s28                       // FRINTX <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTXDr                       V1UnitV, V1UnitV02,                               frintx	d21, d31                       // FRINTX <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTXv4f16                    V1UnitV[2], V1UnitV02[2],                         frintx	v16.4h, v14.4h                 // FRINTX <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FRINTXv8f16                    V1UnitV[2], V1UnitV02[2],                         frintx	v0.8h, v17.8h                  // FRINTX <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTXv2f32                    V1UnitV, V1UnitV02,                               frintx	v13.2s, v11.2s                 // FRINTX <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTXv4f32                    V1UnitV[2], V1UnitV02[2],                         frintx	v17.4s, v10.4s                 // FRINTX <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTXv2f64                    V1UnitV, V1UnitV02,                               frintx	v21.2d, v19.2d                 // FRINTX <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTZHr                       V1UnitV, V1UnitV02,                               frintz	h26, h22                       // FRINTZ <Hd>, <Hn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTZSr                       V1UnitV, V1UnitV02,                               frintz	s6, s3                         // FRINTZ <Sd>, <Sn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRINTZDr                       V1UnitV, V1UnitV02,                               frintz	d15, d8                        // FRINTZ <Dd>, <Dn>  \\ FP round to integral  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTZv4f16                    V1UnitV[2], V1UnitV02[2],                         frintz	v15.4h, v6.4h                  // FRINTZ <Vd>.4H, <Vn>.4H  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    FRINTZv8f16                    V1UnitV[2], V1UnitV02[2],                         frintz	v9.8h, v8.8h                   // FRINTZ <Vd>.8H, <Vn>.8H  \\ ASIMD FP round, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTZv2f32                    V1UnitV, V1UnitV02,                               frintz	v15.2s, v9.2s                  // FRINTZ <Vd>.2S, <Vn>.2S  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    FRINTZv4f32                    V1UnitV[2], V1UnitV02[2],                         frintz	v29.4s, v23.4s                 // FRINTZ <Vd>.4S, <Vn>.4S  \\ ASIMD FP round, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    FRINTZv2f64                    V1UnitV, V1UnitV02,                               frintz	v9.2d, v5.2d                   // FRINTZ <Vd>.2D, <Vn>.2D  \\ ASIMD FP round, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    FRSQRTEv1f16                   V1UnitV, V1UnitV02,                               frsqrte	h3, h21                // FRSQRTE <Hd>, <Hn>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1 4  4  2.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRSQRTEv1i32                   V1UnitV, V1UnitV02,                               frsqrte	s29, s23               // FRSQRTE S<d>, S<n>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    FRSQRTEv1i64                   V1UnitV, V1UnitV02,                               frsqrte	d11, d11               // FRSQRTE D<d>, D<n>  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    FRSQRTEv4f16                   V1UnitV, V1UnitV02,                               frsqrte	v27.4h, v25.4h         // FRSQRTE <Vd>.4H, <Vn>.4H  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  2      6    6     1.00     -    FRSQRTEv8f16                   V1UnitV[2], V1UnitV02[2],                         frsqrte	v0.8h, v7.8h           // FRSQRTE <Vd>.8H, <Vn>.8H  \\ ASIMD reciprocal and square root estimate, Q-form F16  \\ 2 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    FRSQRTEv2f32                   V1UnitV, V1UnitV02,                               frsqrte	v10.2s, v22.2s         // FRSQRTE <Vd>.2S, <Vn>.2S  \\ ASIMD reciprocal and square root estimate, D-form F32 and scalar forms  \\ 1  3   3  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    FRSQRTEv4f32                   V1UnitV, V1UnitV02,                               frsqrte	v21.4s, v17.4s         // FRSQRTE <Vd>.4S, <Vn>.4S  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  1      4    4     2.00     -    FRSQRTEv2f64                   V1UnitV, V1UnitV02,                               frsqrte	v25.2d, v21.2d         // FRSQRTE <Vd>.2D, <Vn>.2D  \\ ASIMD reciprocal and square root estimate, D-form F16 and Q-form F32  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     0.25     -    FRSQRTE_ZZ_H                   V1UnitV[4], V1UnitV0[4], V1UnitV01[4], V1UnitV02[4],   frsqrte	z16.h, z25.h           // FRSQRTE <Zd>.H, <Zn>.H  \\ Floating point reciprocal estimate, F16  \\ 4 6  6  0.25 V1UnitV0
# CHECK-NEXT:  2      4    4     0.50     -    FRSQRTE_ZZ_S                   V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   frsqrte	z0.s, z28.s            // FRSQRTE <Zd>.S, <Zn>.S  \\ Floating point reciprocal estimate, F32  \\ 2 4  4  0.50 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    FRSQRTE_ZZ_D                   V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          frsqrte	z22.d, z12.d           // FRSQRTE <Zd>.D, <Zn>.D  \\ Floating point reciprocal estimate, F64  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     4.00     -    FRSQRTS16                      V1UnitV,                                          frsqrts	h11, h7, h2            // FRSQRTS <Hd>, <Hn>, <Hm>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     4.00     -    FRSQRTS32                      V1UnitV,                                          frsqrts	s6, s21, s15           // FRSQRTS <V><d>, <V><n>, <V><m>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     4.00     -    FRSQRTSv8f16                   V1UnitV,                                          frsqrts	v9.8h, v8.8h, v15.8h   // FRSQRTS <Vd>.<Th>, <Vn>.<Th>, <Vm>.<Th>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     4.00     -    FRSQRTSv2f32                   V1UnitV,                                          frsqrts	v21.2s, v12.2s, v23.2s  // FRSQRTS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD reciprocal step  \\ 1  4   4  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     2.00     -    FRSQRTS_ZZZ_D                  V1UnitV, V1UnitV01,                               frsqrts	z0.d, z8.d, z10.d      // FRSQRTS <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point reciprocal step  \\ 1 4  4  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FSCALE_ZPmZ_D                  V1UnitV, V1UnitV01,                               fscale	z19.d, p2/m, z19.d, z23.d      // FSCALE <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point multiply  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      7    7     0.29     -    FSQRTHr                        V1UnitV[7], V1UnitV02[7],                         fsqrt	h11, h27                       // FSQRT <Hd>, <Hn>  \\ FP square root, H-form  \\ 1 7  7  0.29 V1UnitV02[2]
# CHECK-NEXT:  1      10   10    0.29     -    FSQRTSr                        V1UnitV[7], V1UnitV02[7],                         fsqrt	s5, s31                        // FSQRT <Sd>, <Sn>  \\ FP square root, S-form  \\ 1 10  10  0.29 V1UnitV02[2]
# CHECK-NEXT:  1      16   16    0.29     -    FSQRTDr                        V1UnitV[7], V1UnitV02[7],                         fsqrt	d25, d24                       // FSQRT <Dd>, <Dn>  \\ FP square root, D-form  \\ 1 16  16  0.29 V1UnitV02[8]
# CHECK-NEXT:  1      7    7     0.29     -    FSQRTv4f16                     V1UnitV[7], V1UnitV02[7],                         fsqrt	v6.4h, v30.4h                  // FSQRT <Vd>.4H, <Vn>.4H  \\ ASIMD FP square root, D-form, F16  \\ 1 7  7  0.29 V1UnitV02[7]
# CHECK-NEXT:  1      13   13    0.18     -    FSQRTv8f16                     V1UnitV[11], V1UnitV02[11],                       fsqrt	v12.8h, v24.8h                 // FSQRT <Vd>.8H, <Vn>.8H  \\ ASIMD FP square root, Q-form, F16  \\ 1 13  13  0.18 V1UnitV02[14]
# CHECK-NEXT:  1      10   10    0.29     -    FSQRTv2f32                     V1UnitV[7], V1UnitV02[7],                         fsqrt	v21.2s, v13.2s                 // FSQRT <Vd>.2S, <Vn>.2S  \\ ASIMD FP square root, D-form, F32  \\ 1 10  10  0.29 V1UnitV02[5]
# CHECK-NEXT:  1      10   10    0.29     -    FSQRTv4f32                     V1UnitV[7], V1UnitV02[7],                         fsqrt	v12.4s, v26.4s                 // FSQRT <Vd>.4S, <Vn>.4S  \\ ASIMD FP square root, Q-form, F32  \\ 1 10  10  0.29 V1UnitV02[10]
# CHECK-NEXT:  1      16   16    0.29     -    FSQRTv2f64                     V1UnitV[7], V1UnitV02[7],                         fsqrt	v28.2d, v30.2d                 // FSQRT <Vd>.2D, <Vn>.2D  \\ ASIMD FP square root, Q-form, F64  \\ 1 16  16  0.29 V1UnitV02[16]
# CHECK-NEXT:  1      13   13    0.10     -    FSQRT_ZPmZ_H                   V1UnitV[10], V1UnitV0[10], V1UnitV01[10], V1UnitV02[10],   fsqrt	z17.h, p1/m, z12.h     // FSQRT <Zd>.H, <Pg>/M, <Zn>.H  \\ Floating point square root, F16  \\ 1 13  13  0.10 V1UnitV0[13]
# CHECK-NEXT:  1      10   10    0.14     -    FSQRT_ZPmZ_S                   V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   fsqrt	z29.s, p6/m, z29.s     // FSQRT <Zd>.S, <Pg>/M, <Zn>.S  \\ Floating point square root, F32  \\ 1 10  10  0.14 V1UnitV0[10]
# CHECK-NEXT:  1      16   16    0.14     -    FSQRT_ZPmZ_D                   V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   fsqrt	z19.d, p7/m, z21.d     // FSQRT <Zd>.D, <Pg>/M, <Zn>.D  \\ Floating point square root F64  \\ 1 16  16  0.14 V1UnitV0[15]
# CHECK-NEXT:  1      2    2     2.00     -    FSUB_ZPmI_S                    V1UnitV, V1UnitV01,                               fsub	z6.s, p4/m, z6.s, #0.5         // FSUB <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    FSUBHrr                        V1UnitV,                                          fsub	h9, h25, h1                    // FSUB <Hd>, <Hn>, <Hm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FSUBSrr                        V1UnitV,                                          fsub	s4, s15, s6                    // FSUB <Sd>, <Sn>, <Sm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FSUBDrr                        V1UnitV,                                          fsub	d27, d27, d17                  // FSUB <Dd>, <Dn>, <Dm>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FSUBv4f32                      V1UnitV,                                          fsub	v11.4s, v6.4s, v30.4s          // FSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    FSUBv4f32                      V1UnitV,                                          fsub	v6.4s, v0.4s, v1.4s            // FSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD FP arith, normal  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    FSUB_ZPmZ_D                    V1UnitV, V1UnitV01,                               fsub	z5.d, p3/m, z5.d, z2.d         // FSUB <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FSUB_ZZZ_H                     V1UnitV, V1UnitV01,                               fsub	z5.h, z0.h, z8.h               // FSUB <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FSUBR_ZPmI_S                   V1UnitV, V1UnitV01,                               fsubr	z21.s, p3/m, z21.s, #0.5       // FSUBR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <const>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    FSUBR_ZPmZ_H                   V1UnitV, V1UnitV01,                               fsubr	z18.h, p1/m, z18.h, z26.h      // FSUBR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Floating point arithmetic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FTMAD_ZZI_D                    V1UnitV, V1UnitV01,                               ftmad	z4.d, z4.d, z23.d, #2          // FTMAD <Zdn>.<T>, <Zdn>.<T>, <Zm>.<T>, #<imm>  \\ Floating point trigonometric   \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FTSMUL_ZZZ_S                   V1UnitV, V1UnitV01,                               ftsmul	z18.s, z27.s, z13.s            // FTSMUL <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point trigonometric   \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    FTSSEL_ZZZ_H                   V1UnitV, V1UnitV01,                               ftssel	z23.h, z3.h, z16.h             // FTSSEL <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Floating point trigonometric   \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             yield                                // HINT #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   HLT                                                                              hlt	#0xe60f                        // HLT #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   HVC                                                                              hvc	#0x41fc                        // HVC #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   SYSxt                                                                            ic	ialluis                        // IC <ic_op> \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   SYSxt                                                                            ic	ivau, x30                      // IC <ic_op2>, <Xt>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     1.00     -    INCB_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       incb	x18                            // INCB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCB_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       incb	x28, vl2                       // INCB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCB_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       incb	x18, vl8                       // INCB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCD_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       incd	x7                             // INCD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCD_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       incd	x1, vl32                       // INCD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCD_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       incd	x6, all, mul #8                // INCD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCH_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       inch	x29                            // INCH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCH_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       inch	x10, vl256                     // INCH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCH_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       inch	x30, pow2, mul #8              // INCH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCW_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       incw	x3                             // INCW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCW_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       incw	x14, vl256                     // INCW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCW_XPiI                      V1UnitI, V1UnitM, V1UnitM0,                       incw	x4, vl2, mul #7                // INCW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    INCD_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          incd	z8.d                           // INCD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    INCD_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          incd	z8.d, vl4                      // INCD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    INCD_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          incd	z1.d, vl3, mul #7              // INCD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    INCH_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          inch	z4.h                           // INCH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    INCH_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          inch	z14.h, vl2                     // INCH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    INCH_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          inch	z13.h, vl2, mul #11            // INCH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    INCW_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          incw	z28.s                          // INCW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    INCW_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          incw	z12.s, vl1                     // INCW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    INCW_ZPiI                      V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          incw	z28.s, vl6, mul #4             // INCW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    INCP_XP_D                      V1UnitI, V1UnitM, V1UnitM0,                       incp	x20, p0.d                      // INCP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  3      7    7     0.50     -    INCP_ZP_S                      V1UnitI[2], V1UnitM[2], V1UnitM0[2], V1UnitV, V1UnitV01,   incp	z2.s, p1.s             // INCP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
# CHECK-NEXT:  2      7    7     1.00     -    INDEX_IR_B                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   index	z18.b, #15, w28  // INDEX <Zd>.B, #<imm>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
# CHECK-NEXT:  2      7    7     1.00     -    INDEX_IR_H                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   index	z7.h, #11, w17  // INDEX <Zd>.H, #<imm>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
# CHECK-NEXT:  2      7    7     1.00     -    INDEX_IR_S                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   index	z29.s, #2, w6  // INDEX <Zd>.S, #<imm>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
# CHECK-NEXT:  4      8    8     0.50     -    INDEX_IR_D                     V1UnitI[2], V1UnitM[2], V1UnitM0[2], V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   index	z19.d, #-8, x29  // INDEX <Zd>.D, #<imm>, X<m>  \\ Horizontal operations, D form, scalar, imm/ scalar/ imm, scalar  \\ 4 8  8  0.50 V1UnitM0[2],V1UnitV0[2]
# CHECK-NEXT:  1      4    4     1.00     -    INDEX_II_B                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          index	z2.b, #2, #1                   // INDEX <Zd>.B, #<imm1>, #<imm2>  \\ Horizontal operations, B, H, S form, imm, imm  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    INDEX_II_H                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          index	z1.h, #10, #0                  // INDEX <Zd>.H, #<imm1>, #<imm2>  \\ Horizontal operations, B, H, S form, imm, imm  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    INDEX_II_S                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          index	z8.s, #8, #2                   // INDEX <Zd>.S, #<imm1>, #<imm2>  \\ Horizontal operations, B, H, S form, imm, imm  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  2      5    5     0.50     -    INDEX_II_D                     V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   index	z25.d, #8, #0          // INDEX <Zd>.D, #<imm1>, #<imm2>  \\ Horizontal operations, D form, imm, imm  \\ 2 5  5  0.50 V1UnitV0[2]
# CHECK-NEXT:  2      7    7     1.00     -    INDEX_RI_B                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   index	z31.b, w9, #8  // INDEX <Zd>.B, W<n>, #<imm>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
# CHECK-NEXT:  2      7    7     1.00     -    INDEX_RI_H                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   index	z22.h, w10, #-8  // INDEX <Zd>.H, W<n>, #<imm>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
# CHECK-NEXT:  2      7    7     1.00     -    INDEX_RI_S                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   index	z1.s, w13, #14  // INDEX <Zd>.S, W<n>, #<imm>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
# CHECK-NEXT:  4      8    8     0.50     -    INDEX_RI_D                     V1UnitI[2], V1UnitM[2], V1UnitM0[2], V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   index	z0.d, x0, #10  // INDEX <Zd>.D, X<n>, #<imm>  \\ Horizontal operations, D form, scalar, imm/ scalar/ imm, scalar  \\ 4 8  8  0.50 V1UnitM0[2],V1UnitV0[2]
# CHECK-NEXT:  2      7    7     1.00     -    INDEX_RR_B                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   index	z14.b, w7, w0  // INDEX <Zd>.B, W<n>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
# CHECK-NEXT:  2      7    7     1.00     -    INDEX_RR_H                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   index	z22.h, w12, w28  // INDEX <Zd>.H, W<n>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
# CHECK-NEXT:  2      7    7     1.00     -    INDEX_RR_S                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   index	z12.s, w23, w15  // INDEX <Zd>.S, W<n>, W<m>  \\ Horizontal operations, B, H, S form, scalar, imm/ scalar/ imm, scalar  \\ 2 7  7  1.0 V1UnitM0,V1UnitV0
# CHECK-NEXT:  4      8    8     0.50     -    INDEX_RR_D                     V1UnitI[2], V1UnitM[2], V1UnitM0[2], V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   index	z5.d, x20, x8  // INDEX <Zd>.D, X<n>, X<m>  \\ Horizontal operations, D form, scalar, imm/ scalar/ imm, scalar  \\ 4 8  8  0.50 V1UnitM0[2],V1UnitV0[2]
# CHECK-NEXT:  1      2    2     4.00     -    INSvi8lane                     V1UnitV,                                          mov	v17.b[7], v4.b[4]              // INS <Vd>.B[<index1b>], <Vn>.B[<index2b>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    INSvi16lane                    V1UnitV,                                          mov	v10.h[4], v29.h[1]             // INS <Vd>.H[<index1h>], <Vn>.H[<index2h>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    INSvi32lane                    V1UnitV,                                          mov	v21.s[1], v24.s[2]             // INS <Vd>.S[<index1s>], <Vn>.S[<index2s>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    INSvi64lane                    V1UnitV,                                          mov	v10.d[0], v31.d[1]             // INS <Vd>.D[<index1d>], <Vn>.D[<index2d>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      5    5     1.00     -    INSvi8gpr                      V1UnitI, V1UnitM, V1UnitM0, V1UnitV,              mov	v29.b[7], w5                   // INS <Vd>.B[<indexb>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
# CHECK-NEXT:  2      5    5     1.00     -    INSvi16gpr                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV,              mov	v21.h[4], w4                   // INS <Vd>.H[<indexh>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
# CHECK-NEXT:  2      5    5     1.00     -    INSvi32gpr                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV,              mov	v18.s[2], w14                  // INS <Vd>.S[<indexs>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
# CHECK-NEXT:  2      5    5     1.00     -    INSvi64gpr                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV,              mov	v18.d[1], x30                  // INS <Vd>.D[<indexd>], X<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
# CHECK-NEXT:  1      3    3     1.00     -    INSR_ZV_B                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          insr	z12.b, b17                     // INSR <Zdn>.<T>, <V><m>  \\ Extract/insert operation, SIMD and FP scalar form  \\ 1 3  3  1.0 V1UnitV1
# CHECK-NEXT:  2      6    6     1.00     -    INSR_ZR_D                      V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   insr	z20.d, x6  // INSR <Zdn>.<T>, <R><m>  \\ Extract/insert operation, scalar  \\ 2 6  6  1.0 V1UnitV1,V1UnitM0
# CHECK-NEXT:  1      1    1     15.00    SE   ISB                                                                              isb                                  // ISB  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   ISB                                                                              isb                                  // ISB <option>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   ISB                                                                              isb	#12                            // ISB #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      3    3     1.00     -    LASTA_VPZ_D                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lasta	d16, p2, z22.d                 // LASTA <V><d>, <Pg>, <Zn>.<T>  \\ Extract/insert operation, SIMD and FP scalar form  \\ 1 3  3  1.0 V1UnitV1
# CHECK-NEXT:  2      6    6     1.00     -    LASTA_RPZ_B                    V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   lasta	w0, p6, z30.b  // LASTA <R><d>, <Pg>, <Zn>.<T>  \\ Extract/insert operation, scalar  \\ 2 6  6  1.0 V1UnitV1,V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    LASTB_VPZ_S                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lastb	s5, p2, z13.s                  // LASTB <V><d>, <Pg>, <Zn>.<T>  \\ Extract/insert operation, SIMD and FP scalar form  \\ 1 3  3  1.0 V1UnitV1
# CHECK-NEXT:  2      6    6     1.00     -    LASTB_RPZ_B                    V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,   lastb	w15, p0, z10.b  // LASTB <R><d>, <Pg>, <Zn>.<T>  \\ Extract/insert operation, scalar  \\ 2 6  6  1.0 V1UnitV1,V1UnitM0
# CHECK-NEXT:  1      6    6     3.00     -    LD1Onev8b                      V1UnitL,                                          ld1	{ v8.8b }, [x7]                // LD1 { <Vt>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev8b_POST                 V1UnitI, V1UnitL,                                 ld1	{ v31.8b }, [x28], #8          // LD1 { <Vt>.8B }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev8b_POST                 V1UnitI, V1UnitL,                                 ld1	{ v1.8b }, [x27], x22          // LD1 { <Vt>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      6    6     3.00     -    LD1Onev16b                     V1UnitL,                                          ld1	{ v24.16b }, [x2]              // LD1 { <Vt>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev16b_POST                V1UnitI, V1UnitL,                                 ld1	{ v17.16b }, [x6], #16         // LD1 { <Vt>.16B }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev16b_POST                V1UnitI, V1UnitL,                                 ld1	{ v13.16b }, [x14], x20        // LD1 { <Vt>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      6    6     3.00     -    LD1Onev4h                      V1UnitL,                                          ld1	{ v23.4h }, [x11]              // LD1 { <Vt>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev4h_POST                 V1UnitI, V1UnitL,                                 ld1	{ v24.4h }, [x1], #8           // LD1 { <Vt>.4H }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev4h_POST                 V1UnitI, V1UnitL,                                 ld1	{ v20.4h }, [x6], x5           // LD1 { <Vt>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      6    6     3.00     -    LD1Onev8h                      V1UnitL,                                          ld1	{ v18.8h }, [x24]              // LD1 { <Vt>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev8h_POST                 V1UnitI, V1UnitL,                                 ld1	{ v2.8h }, [x6], #16           // LD1 { <Vt>.8H }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev8h_POST                 V1UnitI, V1UnitL,                                 ld1	{ v31.8h }, [x23], x24         // LD1 { <Vt>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      6    6     3.00     -    LD1Onev2s                      V1UnitL,                                          ld1	{ v9.2s }, [x28]               // LD1 { <Vt>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev2s_POST                 V1UnitI, V1UnitL,                                 ld1	{ v0.2s }, [x11], #8           // LD1 { <Vt>.2S }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev2s_POST                 V1UnitI, V1UnitL,                                 ld1	{ v9.2s }, [x7], x18           // LD1 { <Vt>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      6    6     3.00     -    LD1Onev4s                      V1UnitL,                                          ld1	{ v4.4s }, [x27]               // LD1 { <Vt>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev4s_POST                 V1UnitI, V1UnitL,                                 ld1	{ v16.4s }, [x24], #16         // LD1 { <Vt>.4S }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev4s_POST                 V1UnitI, V1UnitL,                                 ld1	{ v18.4s }, [x29], x13         // LD1 { <Vt>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      6    6     3.00     -    LD1Onev1d                      V1UnitL,                                          ld1	{ v26.1d }, [x11]              // LD1 { <Vt>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev1d_POST                 V1UnitI, V1UnitL,                                 ld1	{ v25.1d }, [x3], #8           // LD1 { <Vt>.1D }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev1d_POST                 V1UnitI, V1UnitL,                                 ld1	{ v16.1d }, [x18], x17         // LD1 { <Vt>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, D-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      6    6     3.00     -    LD1Onev2d                      V1UnitL,                                          ld1	{ v7.2d }, [x15]               // LD1 { <Vt>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev2d_POST                 V1UnitI, V1UnitL,                                 ld1	{ v6.2d }, [x9], #16           // LD1 { <Vt>.2D }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LD1Onev2d_POST                 V1UnitI, V1UnitL,                                 ld1	{ v18.2d }, [x1], x9           // LD1 { <Vt>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 1 reg, Q-form  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Twov8b                      V1UnitL[2],                                       ld1	{ v5.8b, v6.8b }, [x27]        // LD1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov8b_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v19.8b, v20.8b }, [x22], #16  // LD1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov8b_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v11.8b, v12.8b }, [x9], x5   // LD1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Twov16b                     V1UnitL[2],                                       ld1	{ v13.16b, v14.16b }, [x21]    // LD1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov16b_POST                V1UnitI, V1UnitL[2],                              ld1	{ v0.16b, v1.16b }, [x4], #32  // LD1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov16b_POST                V1UnitI, V1UnitL[2],                              ld1	{ v5.16b, v6.16b }, [x0], x28  // LD1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Twov4h                      V1UnitL[2],                                       ld1	{ v16.4h, v17.4h }, [x18]      // LD1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov4h_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v11.4h, v12.4h }, [x27], #16  // LD1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov4h_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v25.4h, v26.4h }, [x26], x10  // LD1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Twov8h                      V1UnitL[2],                                       ld1	{ v14.8h, v15.8h }, [x24]      // LD1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov8h_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v25.8h, v26.8h }, [x10], #32  // LD1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov8h_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v17.8h, v18.8h }, [x9], x28  // LD1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Twov2s                      V1UnitL[2],                                       ld1	{ v9.2s, v10.2s }, [x12]       // LD1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov2s_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v3.2s, v4.2s }, [x12], #16   // LD1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov2s_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v23.2s, v24.2s }, [x26], x4  // LD1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Twov4s                      V1UnitL[2],                                       ld1	{ v19.4s, v20.4s }, [x8]       // LD1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov4s_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v8.4s, v9.4s }, [x6], #32    // LD1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov4s_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v1.4s, v2.4s }, [x28], x1    // LD1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Twov1d                      V1UnitL[2],                                       ld1	{ v13.1d, v14.1d }, [x24]      // LD1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov1d_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v3.1d, v4.1d }, [x12], #16   // LD1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], #16  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov1d_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v12.1d, v13.1d }, [x29], x26  // LD1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Twov2d                      V1UnitL[2],                                       ld1	{ v24.2d, v25.2d }, [x2]       // LD1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov2d_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v25.2d, v26.2d }, [x14], #32  // LD1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Twov2d_POST                 V1UnitI, V1UnitL[2],                              ld1	{ v10.2d, v11.2d }, [x18], x21  // LD1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 2 reg, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.00     -    LD1Threev8b                    V1UnitL[3],                                       ld1	{ v12.8b, v13.8b, v14.8b }, [x23]  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 3 6  6  1.00 V1UnitL[3]
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev8b_POST               V1UnitI, V1UnitL[3],                              ld1	{ v26.8b, v27.8b, v28.8b }, [x18], #24  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #24  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev8b_POST               V1UnitI, V1UnitL[3],                              ld1	{ v3.8b, v4.8b, v5.8b }, [x6], x12  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  3      6    6     1.00     -    LD1Threev16b                   V1UnitL[3],                                       ld1	{ v23.16b, v24.16b, v25.16b }, [x14]  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 3 6  6  1.00 V1UnitL[3]
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev16b_POST              V1UnitI, V1UnitL[3],                              ld1	{ v11.16b, v12.16b, v13.16b }, [x14], #48  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #48  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev16b_POST              V1UnitI, V1UnitL[3],                              ld1	{ v1.16b, v2.16b, v3.16b }, [x4], x27  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  3      6    6     1.00     -    LD1Threev4h                    V1UnitL[3],                                       ld1	{ v6.4h, v7.4h, v8.4h }, [x13]  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 3 6  6  1.00 V1UnitL[3]
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev4h_POST               V1UnitI, V1UnitL[3],                              ld1	{ v12.4h, v13.4h, v14.4h }, [x21], #24  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #24  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev4h_POST               V1UnitI, V1UnitL[3],                              ld1	{ v22.4h, v23.4h, v24.4h }, [x15], x30  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  3      6    6     1.00     -    LD1Threev8h                    V1UnitL[3],                                       ld1	{ v4.8h, v5.8h, v6.8h }, [x28]  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 3 6  6  1.00 V1UnitL[3]
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev8h_POST               V1UnitI, V1UnitL[3],                              ld1	{ v25.8h, v26.8h, v27.8h }, [x19], #48  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #48  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev8h_POST               V1UnitI, V1UnitL[3],                              ld1	{ v13.8h, v14.8h, v15.8h }, [x22], x30  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  3      6    6     1.00     -    LD1Threev2s                    V1UnitL[3],                                       ld1	{ v5.2s, v6.2s, v7.2s }, [x4]  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 3 6  6  1.00 V1UnitL[3]
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev2s_POST               V1UnitI, V1UnitL[3],                              ld1	{ v13.2s, v14.2s, v15.2s }, [x10], #24  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #24  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev2s_POST               V1UnitI, V1UnitL[3],                              ld1	{ v9.2s, v10.2s, v11.2s }, [x15], x0  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  3      6    6     1.00     -    LD1Threev4s                    V1UnitL[3],                                       ld1	{ v20.4s, v21.4s, v22.4s }, [x5]  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 3 6  6  1.00 V1UnitL[3]
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev4s_POST               V1UnitI, V1UnitL[3],                              ld1	{ v11.4s, v12.4s, v13.4s }, [x0], #48  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #48  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev4s_POST               V1UnitI, V1UnitL[3],                              ld1	{ v17.4s, v18.4s, v19.4s }, [x5], x6  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  3      6    6     1.00     -    LD1Threev1d                    V1UnitL[3],                                       ld1	{ v16.1d, v17.1d, v18.1d }, [x17]  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 3 6  6  1.00 V1UnitL[3]
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev1d_POST               V1UnitI, V1UnitL[3],                              ld1	{ v7.1d, v8.1d, v9.1d }, [x4], #24  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], #24  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev1d_POST               V1UnitI, V1UnitL[3],                              ld1	{ v24.1d, v25.1d, v26.1d }, [x8], x26  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, D-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  3      6    6     1.00     -    LD1Threev2d                    V1UnitL[3],                                       ld1	{ v16.2d, v17.2d, v18.2d }, [x6]  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 3 6  6  1.00 V1UnitL[3]
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev2d_POST               V1UnitI, V1UnitL[3],                              ld1	{ v12.2d, v13.2d, v14.2d }, [x8], #48  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #48  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  4      6    6     1.00     -    LD1Threev2d_POST               V1UnitI, V1UnitL[3],                              ld1	{ v10.2d, v11.2d, v12.2d }, [x10], x17  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 3 reg, Q-form  \\ 4 6  6  1.00 V1UnitL[3],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Fourv8b                     V1UnitL[2],                                       ld1	{ v15.8b, v16.8b, v17.8b, v18.8b }, [x23]  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Fourv8b_POST                V1UnitI, V1UnitL[2],                              ld1	{ v18.8b, v19.8b, v20.8b, v21.8b }, [x27], #32  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Fourv8b_POST                V1UnitI, V1UnitL[2],                              ld1	{ v10.8b, v11.8b, v12.8b, v13.8b }, [x25], x1  // LD1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  4      7    7     0.75     -    LD1Fourv16b                    V1UnitL[4],                                       ld1	{ v20.16b, v21.16b, v22.16b, v23.16b }, [x13]  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 4 7  7  0.75 V1UnitL[4]
# CHECK-NEXT:  5      7    7     0.75     -    LD1Fourv16b_POST               V1UnitI, V1UnitL[4],                              ld1	{ v18.16b, v19.16b, v20.16b, v21.16b }, [x5], #64  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #64  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
# CHECK-NEXT:  5      7    7     0.75     -    LD1Fourv16b_POST               V1UnitI, V1UnitL[4],                              ld1	{ v9.16b, v10.16b, v11.16b, v12.16b }, [x1], x30  // LD1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Fourv4h                     V1UnitL[2],                                       ld1	{ v11.4h, v12.4h, v13.4h, v14.4h }, [x22]  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Fourv4h_POST                V1UnitI, V1UnitL[2],                              ld1	{ v13.4h, v14.4h, v15.4h, v16.4h }, [x9], #32  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Fourv4h_POST                V1UnitI, V1UnitL[2],                              ld1	{ v0.4h, v1.4h, v2.4h, v3.4h }, [x6], x7  // LD1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  4      7    7     0.75     -    LD1Fourv8h                     V1UnitL[4],                                       ld1	{ v15.8h, v16.8h, v17.8h, v18.8h }, [x11]  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 4 7  7  0.75 V1UnitL[4]
# CHECK-NEXT:  5      7    7     0.75     -    LD1Fourv8h_POST                V1UnitI, V1UnitL[4],                              ld1	{ v16.8h, v17.8h, v18.8h, v19.8h }, [x5], #64  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #64  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
# CHECK-NEXT:  5      7    7     0.75     -    LD1Fourv8h_POST                V1UnitI, V1UnitL[4],                              ld1	{ v0.8h, v1.8h, v2.8h, v3.8h }, [x29], x27  // LD1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Fourv2s                     V1UnitL[2],                                       ld1	{ v27.2s, v28.2s, v29.2s, v30.2s }, [x23]  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Fourv2s_POST                V1UnitI, V1UnitL[2],                              ld1	{ v4.2s, v5.2s, v6.2s, v7.2s }, [x24], #32  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Fourv2s_POST                V1UnitI, V1UnitL[2],                              ld1	{ v25.2s, v26.2s, v27.2s, v28.2s }, [x28], x2  // LD1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  4      7    7     0.75     -    LD1Fourv4s                     V1UnitL[4],                                       ld1	{ v23.4s, v24.4s, v25.4s, v26.4s }, [x10]  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 4 7  7  0.75 V1UnitL[4]
# CHECK-NEXT:  5      7    7     0.75     -    LD1Fourv4s_POST                V1UnitI, V1UnitL[4],                              ld1	{ v15.4s, v16.4s, v17.4s, v18.4s }, [x23], #64  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #64  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
# CHECK-NEXT:  5      7    7     0.75     -    LD1Fourv4s_POST                V1UnitI, V1UnitL[4],                              ld1	{ v17.4s, v18.4s, v19.4s, v20.4s }, [x30], x2  // LD1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
# CHECK-NEXT:  2      6    6     1.50     -    LD1Fourv1d                     V1UnitL[2],                                       ld1	{ v20.1d, v21.1d, v22.1d, v23.1d }, [x13]  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  3      6    6     1.50     -    LD1Fourv1d_POST                V1UnitI, V1UnitL[2],                              ld1	{ v18.1d, v19.1d, v20.1d, v21.1d }, [x14], #32  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], #32  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  3      6    6     1.50     -    LD1Fourv1d_POST                V1UnitI, V1UnitL[2],                              ld1	{ v12.1d, v13.1d, v14.1d, v15.1d }, [x1], x28  // LD1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, D-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  4      7    7     0.75     -    LD1Fourv2d                     V1UnitL[4],                                       ld1	{ v17.2d, v18.2d, v19.2d, v20.2d }, [x10]  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 4 7  7  0.75 V1UnitL[4]
# CHECK-NEXT:  5      7    7     0.75     -    LD1Fourv2d_POST                V1UnitI, V1UnitL[4],                              ld1	{ v16.2d, v17.2d, v18.2d, v19.2d }, [x13], #64  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #64  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
# CHECK-NEXT:  5      7    7     0.75     -    LD1Fourv2d_POST                V1UnitI, V1UnitL[4],                              ld1	{ v15.2d, v16.2d, v17.2d, v18.2d }, [x21], x9  // LD1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, multiple, 4 reg, Q-form  \\ 5 7  7  0.75 V1UnitL[4],V1UnitI
# CHECK-NEXT:  2      8    8     3.00     -    LD1i8                          V1UnitL, V1UnitV,                                 ld1	{ v27.b }[5], [x10]            // LD1 { <Vt>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  2      8    8     3.00     -    LD1i16                         V1UnitL, V1UnitV,                                 ld1	{ v11.h }[0], [x16]            // LD1 { <Vt>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  2      8    8     3.00     -    LD1i32                         V1UnitL, V1UnitV,                                 ld1	{ v0.s }[0], [x30]             // LD1 { <Vt>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  2      8    8     3.00     -    LD1i64                         V1UnitL, V1UnitV,                                 ld1	{ v30.d }[0], [x28]            // LD1 { <Vt>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD load, 1 element, one lane, D  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  3      8    8     3.00     -    LD1i8_POST                     V1UnitI, V1UnitL, V1UnitV,                        ld1	{ v25.b }[2], [x29], #1        // LD1 { <Vt>.B }[<indexb>], [<Xn|SP>], #1  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1i8_POST                     V1UnitI, V1UnitL, V1UnitV,                        ld1	{ v28.b }[9], [x21], x30       // LD1 { <Vt>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1i16_POST                    V1UnitI, V1UnitL, V1UnitV,                        ld1	{ v9.h }[1], [x8], #2          // LD1 { <Vt>.H }[<indexh>], [<Xn|SP>], #2  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1i16_POST                    V1UnitI, V1UnitL, V1UnitV,                        ld1	{ v1.h }[7], [x26], x30        // LD1 { <Vt>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1i32_POST                    V1UnitI, V1UnitL, V1UnitV,                        ld1	{ v30.s }[0], [x26], #4        // LD1 { <Vt>.S }[<indexs>], [<Xn|SP>], #4  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1i32_POST                    V1UnitI, V1UnitL, V1UnitV,                        ld1	{ v6.s }[0], [x12], x18        // LD1 { <Vt>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, one lane, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1i64_POST                    V1UnitI, V1UnitL, V1UnitV,                        ld1	{ v14.d }[1], [x3], #8         // LD1 { <Vt>.D }[<indexd>], [<Xn|SP>], #8  \\ ASIMD load, 1 element, one lane, D  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1i64_POST                    V1UnitI, V1UnitL, V1UnitV,                        ld1	{ v19.d }[0], [x24], x28       // LD1 { <Vt>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, one lane, D  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_IMM                       V1UnitL, V1UnitL01,                               ld1b	{ z4.b }, p5/z, [x22]          // LD1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_IMM                       V1UnitL, V1UnitL01,                               ld1b	{ z3.b }, p4/z, [x18, #-3, mul vl]  // LD1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_H_IMM                     V1UnitL, V1UnitL01,                               ld1b	{ z12.h }, p2/z, [x8]          // LD1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_H_IMM                     V1UnitL, V1UnitL01,                               ld1b	{ z1.h }, p7/z, [x9, #-4, mul vl]  // LD1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_S_IMM                     V1UnitL, V1UnitL01,                               ld1b	{ z28.s }, p3/z, [x21]         // LD1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_S_IMM                     V1UnitL, V1UnitL01,                               ld1b	{ z17.s }, p4/z, [x0, #7, mul vl]  // LD1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_D_IMM                     V1UnitL, V1UnitL01,                               ld1b	{ z5.d }, p7/z, [x27]          // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_D_IMM                     V1UnitL, V1UnitL01,                               ld1b	{ z21.d }, p1/z, [x13, #-4, mul vl]  // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B                           V1UnitL, V1UnitL01,                               ld1b	{ z19.b }, p3/z, [x17, x4]     // LD1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_H                         V1UnitL, V1UnitL01,                               ld1b	{ z14.h }, p0/z, [x0, x2]      // LD1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_S                         V1UnitL, V1UnitL01,                               ld1b	{ z20.s }, p5/z, [x25, x21]    // LD1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1B_D                         V1UnitL, V1UnitL01,                               ld1b	{ z3.d }, p2/z, [x3, x11]      // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  4      9    9     1.50     -    GLD1B_D_UXTW                   V1UnitL[2], V1UnitV[2],                           ld1b	{ z26.d }, p7/z, [x24, z11.d, uxtw]  // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     -    GLD1B_S_UXTW                   V1UnitL, V1UnitV,                                 ld1b	{ z0.s }, p0/z, [x23, z7.s, uxtw]  // LD1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1B_D                        V1UnitL[2], V1UnitV[2],                           ld1b	{ z0.d }, p0/z, [x22, z16.d]   // LD1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     -    GLD1B_S_IMM                    V1UnitL, V1UnitV,                                 ld1b	{ z12.s }, p6/z, [z29.s, #10]  // LD1B { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1B_D_IMM                    V1UnitL[2], V1UnitV[2],                           ld1b	{ z0.d }, p1/z, [z28.d, #4]    // LD1B { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1D_UXTW_SCALED              V1UnitL[2], V1UnitV[2],                           ld1d	{ z31.d }, p4/z, [x1, z11.d, uxtw #3]  // LD1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #3]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1D_SXTW                     V1UnitL[2], V1UnitV[2],                           ld1d	{ z16.d }, p4/z, [x12, z17.d, sxtw]  // LD1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1D_SCALED                   V1UnitL[2], V1UnitV[2],                           ld1d	{ z12.d }, p3/z, [x1, z4.d, lsl #3]  // LD1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #3]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1D                          V1UnitL[2], V1UnitV[2],                           ld1d	{ z0.d }, p3/z, [x2, z30.d]    // LD1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1D_IMM                      V1UnitL[2], V1UnitV[2],                           ld1d	{ z3.d }, p6/z, [z2.d]         // LD1D { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1D_IMM                      V1UnitL[2], V1UnitV[2],                           ld1d	{ z23.d }, p3/z, [z29.d, #248]  // LD1D { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  1      6    6     2.00     -    LD1H_IMM                       V1UnitL, V1UnitL01,                               ld1h	{ z24.h }, p7/z, [x14]         // LD1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
# CHECK-NEXT:  1      6    6     2.00     -    LD1H_IMM                       V1UnitL, V1UnitL01,                               ld1h	{ z7.h }, p7/z, [x28, #6, mul vl]  // LD1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
# CHECK-NEXT:  1      6    6     2.00     -    LD1H_S_IMM                     V1UnitL, V1UnitL01,                               ld1h	{ z28.s }, p0/z, [x10]         // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
# CHECK-NEXT:  1      6    6     2.00     -    LD1H_S_IMM                     V1UnitL, V1UnitL01,                               ld1h	{ z20.s }, p7/z, [x7, #1, mul vl]  // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
# CHECK-NEXT:  1      6    6     2.00     -    LD1H_D_IMM                     V1UnitL, V1UnitL01,                               ld1h	{ z0.d }, p4/z, [x3]           // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
# CHECK-NEXT:  1      6    6     2.00     -    LD1H_D_IMM                     V1UnitL, V1UnitL01,                               ld1h	{ z3.d }, p0/z, [x8, #3, mul vl]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.00 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     -    LD1H                           V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ld1h	{ z22.h }, p4/z, [x19, x7, lsl #1]  // LD1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     -    LD1H_S                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ld1h	{ z3.s }, p3/z, [x24, x21, lsl #1]  // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     -    LD1H_D                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ld1h	{ z27.d }, p2/z, [x13, x16, lsl #1]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  4      11   11    1.50     -    GLD1H_S_UXTW_SCALED            V1UnitL[2], V1UnitV[2],                           ld1h	{ z8.s }, p3/z, [x9, z12.s, uxtw #1]  // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1H_D_UXTW_SCALED            V1UnitL[2], V1UnitV[2],                           ld1h	{ z5.d }, p3/z, [x1, z14.d, uxtw #1]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1H_D_SXTW                   V1UnitL[2], V1UnitV[2],                           ld1h	{ z9.d }, p6/z, [x28, z15.d, sxtw]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     -    GLD1H_S_SXTW                   V1UnitL, V1UnitV,                                 ld1h	{ z28.s }, p4/z, [x24, z7.s, sxtw]  // LD1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1H_D_SCALED                 V1UnitL[2], V1UnitV[2],                           ld1h	{ z24.d }, p4/z, [x14, z22.d, lsl #1]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1H_D                        V1UnitL[2], V1UnitV[2],                           ld1h	{ z12.d }, p5/z, [x21, z27.d]  // LD1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     -    GLD1H_S_IMM                    V1UnitL, V1UnitV,                                 ld1h	{ z13.s }, p1/z, [z10.s]       // LD1H { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  2      11   11    3.00     -    GLD1H_S_IMM                    V1UnitL, V1UnitV,                                 ld1h	{ z9.s }, p4/z, [z11.s, #30]   // LD1H { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1H_D_IMM                    V1UnitL[2], V1UnitV[2],                           ld1h	{ z19.d }, p4/z, [z22.d]       // LD1H { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1H_D_IMM                    V1UnitL[2], V1UnitV[2],                           ld1h	{ z27.d }, p4/z, [z21.d, #52]  // LD1H { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      8    8     3.00     -    LD1Rv8b                        V1UnitL, V1UnitV,                                 ld1r	{ v0.8b }, [x1]                // LD1R { <Vt>.8B }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv8b_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v7.8b }, [x25], #1           // LD1R { <Vt>.8B }, [<Xn|SP>], #1  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv8b_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v14.8b }, [x21], x12         // LD1R { <Vt>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  2      8    8     3.00     -    LD1Rv16b                       V1UnitL, V1UnitV,                                 ld1r	{ v25.16b }, [x20]             // LD1R { <Vt>.16B }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv16b_POST                  V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v5.16b }, [x10], #1          // LD1R { <Vt>.16B }, [<Xn|SP>], #1  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv16b_POST                  V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v2.16b }, [x6], x22          // LD1R { <Vt>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  2      8    8     3.00     -    LD1Rv4h                        V1UnitL, V1UnitV,                                 ld1r	{ v23.4h }, [x25]              // LD1R { <Vt>.4H }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv4h_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v30.4h }, [x10], #2          // LD1R { <Vt>.4H }, [<Xn|SP>], #2  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv4h_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v22.4h }, [x8], x3           // LD1R { <Vt>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  2      8    8     3.00     -    LD1Rv8h                        V1UnitL, V1UnitV,                                 ld1r	{ v24.8h }, [x10]              // LD1R { <Vt>.8H }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv8h_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v14.8h }, [x27], #2          // LD1R { <Vt>.8H }, [<Xn|SP>], #2  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv8h_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v27.8h }, [x6], x7           // LD1R { <Vt>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  2      8    8     3.00     -    LD1Rv2s                        V1UnitL, V1UnitV,                                 ld1r	{ v29.2s }, [x20]              // LD1R { <Vt>.2S }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv2s_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v13.2s }, [x29], #4          // LD1R { <Vt>.2S }, [<Xn|SP>], #4  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv2s_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v30.2s }, [x28], x12         // LD1R { <Vt>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, D-form, B/H/S  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  2      8    8     3.00     -    LD1Rv4s                        V1UnitL, V1UnitV,                                 ld1r	{ v0.4s }, [x25]               // LD1R { <Vt>.4S }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv4s_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v29.4s }, [x11], #4          // LD1R { <Vt>.4S }, [<Xn|SP>], #4  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv4s_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v13.4s }, [x27], x4          // LD1R { <Vt>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  2      8    8     3.00     -    LD1Rv1d                        V1UnitL, V1UnitV,                                 ld1r	{ v7.1d }, [x23]               // LD1R { <Vt>.1D }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, D-form, D  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv1d_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v31.1d }, [x8], #8           // LD1R { <Vt>.1D }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, all lanes, D-form, D  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv1d_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v22.1d }, [x16], x23         // LD1R { <Vt>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, D-form, D  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  2      8    8     3.00     -    LD1Rv2d                        V1UnitL, V1UnitV,                                 ld1r	{ v29.2d }, [x10]              // LD1R { <Vt>.2D }, [<Xn|SP>]  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 2 8  8  3.0 V1UnitL,V1UnitV
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv2d_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v5.2d }, [x20], #8           // LD1R { <Vt>.2D }, [<Xn|SP>], #8  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  3      8    8     3.00     -    LD1Rv2d_POST                   V1UnitI, V1UnitL, V1UnitV,                        ld1r	{ v29.2d }, [x24], x13         // LD1R { <Vt>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 1 element, all lanes, Q-form  \\ 3 8  8  3.0 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  1      6    6     2.00     -    LD1RB_IMM                      V1UnitL, V1UnitL01,                               ld1rb	{ z1.b }, p3/z, [x0]           // LD1RB { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RB_IMM                      V1UnitL, V1UnitL01,                               ld1rb	{ z10.b }, p7/z, [x22, #45]    // LD1RB { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RB_H_IMM                    V1UnitL, V1UnitL01,                               ld1rb	{ z31.h }, p7/z, [x19]         // LD1RB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RB_H_IMM                    V1UnitL, V1UnitL01,                               ld1rb	{ z15.h }, p4/z, [x12, #29]    // LD1RB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RB_S_IMM                    V1UnitL, V1UnitL01,                               ld1rb	{ z0.s }, p7/z, [x29]          // LD1RB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RB_S_IMM                    V1UnitL, V1UnitL01,                               ld1rb	{ z19.s }, p3/z, [x8, #23]     // LD1RB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RB_D_IMM                    V1UnitL, V1UnitL01,                               ld1rb	{ z8.d }, p2/z, [x18]          // LD1RB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RB_D_IMM                    V1UnitL, V1UnitL01,                               ld1rb	{ z21.d }, p4/z, [x12, #12]    // LD1RB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RD_IMM                      V1UnitL, V1UnitL01,                               ld1rd	{ z1.d }, p2/z, [x27]          // LD1RD { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RD_IMM                      V1UnitL, V1UnitL01,                               ld1rd	{ z19.d }, p6/z, [x29, #320]   // LD1RD { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RH_IMM                      V1UnitL, V1UnitL01,                               ld1rh	{ z13.h }, p4/z, [x23]         // LD1RH { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RH_IMM                      V1UnitL, V1UnitL01,                               ld1rh	{ z6.h }, p0/z, [x26, #10]     // LD1RH { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RH_S_IMM                    V1UnitL, V1UnitL01,                               ld1rh	{ z0.s }, p7/z, [x16]          // LD1RH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RH_S_IMM                    V1UnitL, V1UnitL01,                               ld1rh	{ z4.s }, p2/z, [x24, #28]     // LD1RH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RH_D_IMM                    V1UnitL, V1UnitL01,                               ld1rh	{ z6.d }, p7/z, [x6]           // LD1RH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RH_D_IMM                    V1UnitL, V1UnitL01,                               ld1rh	{ z28.d }, p0/z, [x25, #68]    // LD1RH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_B_IMM                    V1UnitL, V1UnitL01,                               ld1rqb	{ z27.b }, p3/z, [x16]         // LD1RQB { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_B_IMM                    V1UnitL, V1UnitL01,                               ld1rqb	{ z24.b }, p1/z, [x15, #-128]  // LD1RQB { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_B                        V1UnitL, V1UnitL01,                               ld1rqb	{ z1.b }, p3/z, [x13, x17]     // LD1RQB { <Zt>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load broadcast, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_D_IMM                    V1UnitL, V1UnitL01,                               ld1rqd	{ z4.d }, p4/z, [x4]           // LD1RQD { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_D_IMM                    V1UnitL, V1UnitL01,                               ld1rqd	{ z27.d }, p5/z, [x1, #32]     // LD1RQD { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_D                        V1UnitL, V1UnitL01,                               ld1rqd	{ z21.d }, p5/z, [x11, x24, lsl #3]  // LD1RQD { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous load broadcast, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_H_IMM                    V1UnitL, V1UnitL01,                               ld1rqh	{ z26.h }, p4/z, [x13]         // LD1RQH { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_H_IMM                    V1UnitL, V1UnitL01,                               ld1rqh	{ z30.h }, p1/z, [x3, #64]     // LD1RQH { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  2      7    7     2.00     -    LD1RQ_H                        V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ld1rqh	{ z16.h }, p6/z, [x4, x9, lsl #1]  // LD1RQH { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load broadcast, scalar + scalar + S \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_W_IMM                    V1UnitL, V1UnitL01,                               ld1rqw	{ z30.s }, p0/z, [x10]         // LD1RQW { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_W_IMM                    V1UnitL, V1UnitL01,                               ld1rqw	{ z3.s }, p7/z, [x1, #-16]     // LD1RQW { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RQ_W                        V1UnitL, V1UnitL01,                               ld1rqw	{ z5.s }, p1/z, [x24, x21, lsl #2]  // LD1RQW { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous load broadcast, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSB_H_IMM                   V1UnitL, V1UnitL01,                               ld1rsb	{ z12.h }, p7/z, [x13]         // LD1RSB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSB_H_IMM                   V1UnitL, V1UnitL01,                               ld1rsb	{ z13.h }, p1/z, [x26, #51]    // LD1RSB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSB_S_IMM                   V1UnitL, V1UnitL01,                               ld1rsb	{ z13.s }, p3/z, [x9]          // LD1RSB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSB_S_IMM                   V1UnitL, V1UnitL01,                               ld1rsb	{ z24.s }, p5/z, [x8, #45]     // LD1RSB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSB_D_IMM                   V1UnitL, V1UnitL01,                               ld1rsb	{ z6.d }, p5/z, [x10]          // LD1RSB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSB_D_IMM                   V1UnitL, V1UnitL01,                               ld1rsb	{ z13.d }, p5/z, [x9, #17]     // LD1RSB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSH_S_IMM                   V1UnitL, V1UnitL01,                               ld1rsh	{ z1.s }, p4/z, [x4]           // LD1RSH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSH_S_IMM                   V1UnitL, V1UnitL01,                               ld1rsh	{ z4.s }, p4/z, [x14, #18]     // LD1RSH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSH_D_IMM                   V1UnitL, V1UnitL01,                               ld1rsh	{ z11.d }, p4/z, [x4]          // LD1RSH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSH_D_IMM                   V1UnitL, V1UnitL01,                               ld1rsh	{ z10.d }, p0/z, [x3, #8]      // LD1RSH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSW_IMM                     V1UnitL, V1UnitL01,                               ld1rsw	{ z0.d }, p1/z, [x5]           // LD1RSW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RSW_IMM                     V1UnitL, V1UnitL01,                               ld1rsw	{ z22.d }, p0/z, [x17, #196]   // LD1RSW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RW_IMM                      V1UnitL, V1UnitL01,                               ld1rw	{ z2.s }, p3/z, [x25]          // LD1RW { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RW_IMM                      V1UnitL, V1UnitL01,                               ld1rw	{ z26.s }, p1/z, [x9, #16]     // LD1RW { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RW_D_IMM                    V1UnitL, V1UnitL01,                               ld1rw	{ z4.d }, p0/z, [x15]          // LD1RW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1RW_D_IMM                    V1UnitL, V1UnitL01,                               ld1rw	{ z16.d }, p7/z, [x21, #40]    // LD1RW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>]  \\ Contiguous load broadcast, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SB_H_IMM                    V1UnitL, V1UnitL01,                               ld1sb	{ z19.h }, p5/z, [x8]          // LD1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SB_H_IMM                    V1UnitL, V1UnitL01,                               ld1sb	{ z1.h }, p7/z, [x15, #4, mul vl]  // LD1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SB_S_IMM                    V1UnitL, V1UnitL01,                               ld1sb	{ z19.s }, p4/z, [x5]          // LD1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SB_S_IMM                    V1UnitL, V1UnitL01,                               ld1sb	{ z25.s }, p0/z, [x12, #6, mul vl]  // LD1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SB_D_IMM                    V1UnitL, V1UnitL01,                               ld1sb	{ z15.d }, p0/z, [x16]         // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SB_D_IMM                    V1UnitL, V1UnitL01,                               ld1sb	{ z15.d }, p7/z, [x23, #6, mul vl]  // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SB_H                        V1UnitL, V1UnitL01,                               ld1sb	{ z2.h }, p4/z, [x2, x19]      // LD1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SB_S                        V1UnitL, V1UnitL01,                               ld1sb	{ z24.s }, p4/z, [x0, x9]      // LD1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SB_D                        V1UnitL, V1UnitL01,                               ld1sb	{ z20.d }, p5/z, [x8, x12]     // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SB_D_UXTW                  V1UnitL[2], V1UnitV[2],                           ld1sb	{ z15.d }, p2/z, [x20, z25.d, uxtw]  // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     -    GLD1SB_S_UXTW                  V1UnitL, V1UnitV,                                 ld1sb	{ z25.s }, p1/z, [x3, z11.s, uxtw]  // LD1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SB_D                       V1UnitL[2], V1UnitV[2],                           ld1sb	{ z2.d }, p7/z, [x24, z4.d]    // LD1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     -    GLD1SB_S_IMM                   V1UnitL, V1UnitV,                                 ld1sb	{ z31.s }, p6/z, [z5.s, #21]   // LD1SB { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SB_D_IMM                   V1UnitL[2], V1UnitV[2],                           ld1sb	{ z15.d }, p6/z, [z22.d, #1]   // LD1SB { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  1      6    6     2.00     -    LD1SH_S_IMM                    V1UnitL, V1UnitL01,                               ld1sh	{ z0.s }, p7/z, [x26]          // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SH_S_IMM                    V1UnitL, V1UnitL01,                               ld1sh	{ z19.s }, p3/z, [x1, #-5, mul vl]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SH_D_IMM                    V1UnitL, V1UnitL01,                               ld1sh	{ z2.d }, p4/z, [x30]          // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SH_D_IMM                    V1UnitL, V1UnitL01,                               ld1sh	{ z14.d }, p5/z, [x11, #1, mul vl]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  2      7    7     2.00     -    LD1SH_S                        V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ld1sh	{ z10.s }, p2/z, [x8, x9, lsl #1]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     -    LD1SH_D                        V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ld1sh	{ z17.d }, p6/z, [x3, x16, lsl #1]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  4      11   11    1.50     -    GLD1SH_S_UXTW_SCALED           V1UnitL[2], V1UnitV[2],                           ld1sh	{ z12.s }, p6/z, [x25, z18.s, uxtw #1]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SH_D_SXTW_SCALED           V1UnitL[2], V1UnitV[2],                           ld1sh	{ z21.d }, p2/z, [x5, z20.d, sxtw #1]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SH_D_SXTW                  V1UnitL[2], V1UnitV[2],                           ld1sh	{ z14.d }, p4/z, [x9, z23.d, sxtw]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     -    GLD1SH_S_SXTW                  V1UnitL, V1UnitV,                                 ld1sh	{ z20.s }, p3/z, [x23, z3.s, sxtw]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SH_D_SCALED                V1UnitL[2], V1UnitV[2],                           ld1sh	{ z19.d }, p0/z, [x11, z31.d, lsl #1]  // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SH_D                       V1UnitL[2], V1UnitV[2],                           ld1sh	{ z31.d }, p1/z, [x1, z12.d]   // LD1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     -    GLD1SH_S_IMM                   V1UnitL, V1UnitV,                                 ld1sh	{ z18.s }, p2/z, [z30.s, #54]  // LD1SH { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SH_D_IMM                   V1UnitL[2], V1UnitV[2],                           ld1sh	{ z14.d }, p4/z, [z4.d, #14]   // LD1SH { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  1      6    6     2.00     -    LD1SW_D_IMM                    V1UnitL, V1UnitL01,                               ld1sw	{ z10.d }, p0/z, [x18]         // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SW_D_IMM                    V1UnitL, V1UnitL01,                               ld1sw	{ z20.d }, p1/z, [x8, #5, mul vl]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LD1SW_D                        V1UnitL, V1UnitL01,                               ld1sw	{ z26.d }, p5/z, [x27, x25, lsl #2]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous load, scalar + scalar  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SW_D_UXTW_SCALED           V1UnitL[2], V1UnitV[2],                           ld1sw	{ z7.d }, p4/z, [x9, z20.d, uxtw #2]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SW_D_SXTW                  V1UnitL[2], V1UnitV[2],                           ld1sw	{ z5.d }, p4/z, [x28, z12.d, sxtw]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SW_D_SCALED                V1UnitL[2], V1UnitV[2],                           ld1sw	{ z8.d }, p7/z, [x4, z6.d, lsl #2]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SW_D                       V1UnitL[2], V1UnitV[2],                           ld1sw	{ z27.d }, p5/z, [x30, z14.d]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SW_D_IMM                   V1UnitL[2], V1UnitV[2],                           ld1sw	{ z20.d }, p2/z, [z30.d]       // LD1SW { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1SW_D_IMM                   V1UnitL[2], V1UnitV[2],                           ld1sw	{ z14.d }, p2/z, [z17.d, #112]  // LD1SW { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      11   11    1.50     -    GLD1W_SXTW_SCALED              V1UnitL[2], V1UnitV[2],                           ld1w	{ z6.s }, p0/z, [x26, z11.s, sxtw #2]  // LD1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1W_D_UXTW_SCALED            V1UnitL[2], V1UnitV[2],                           ld1w	{ z31.d }, p1/z, [x3, z22.d, uxtw #2]  // LD1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1W_D_SXTW                   V1UnitL[2], V1UnitV[2],                           ld1w	{ z24.d }, p6/z, [x25, z17.d, sxtw]  // LD1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     -    GLD1W_UXTW                     V1UnitL, V1UnitV,                                 ld1w	{ z5.s }, p3/z, [x0, z16.s, uxtw]  // LD1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1W_D_SCALED                 V1UnitL[2], V1UnitV[2],                           ld1w	{ z18.d }, p4/z, [x25, z2.d, lsl #2]  // LD1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1W_D                        V1UnitL[2], V1UnitV[2],                           ld1w	{ z29.d }, p3/z, [x15, z11.d]  // LD1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     -    GLD1W_IMM                      V1UnitL, V1UnitV,                                 ld1w	{ z7.s }, p0/z, [z8.s]         // LD1W { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  2      11   11    3.00     -    GLD1W_IMM                      V1UnitL, V1UnitV,                                 ld1w	{ z29.s }, p3/z, [z2.s]        // LD1W { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1W_D_IMM                    V1UnitL[2], V1UnitV[2],                           ld1w	{ z17.d }, p6/z, [z3.d]        // LD1W { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     -    GLD1W_D_IMM                    V1UnitL[2], V1UnitV[2],                           ld1w	{ z4.d }, p0/z, [z8.d, #76]    // LD1W { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  3      8    8     2.00     -    LD2Twov8b                      V1UnitL, V1UnitV[2],                              ld2	{ v27.8b, v28.8b }, [x4]       // LD2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL,V1UnitV
# CHECK-NEXT:  4      8    8     2.00     -    LD2Twov8b_POST                 V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v16.8b, v17.8b }, [x17], #16  // LD2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Twov8b_POST                 V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v2.8b, v3.8b }, [x29], x0    // LD2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  4      8    8     1.50     -    LD2Twov16b                     V1UnitL[2], V1UnitV[2],                           ld2	{ v18.16b, v19.16b }, [x18]    // LD2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 4 8  8  1.50 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  5      8    8     1.50     -    LD2Twov16b_POST                V1UnitI, V1UnitL[2], V1UnitV[2],                  ld2	{ v0.16b, v1.16b }, [x8], #32  // LD2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #32  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  5      8    8     1.50     -    LD2Twov16b_POST                V1UnitI, V1UnitL[2], V1UnitV[2],                  ld2	{ v26.16b, v27.16b }, [x26], x28  // LD2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2Twov4h                      V1UnitL, V1UnitV[2],                              ld2	{ v15.4h, v16.4h }, [x5]       // LD2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL,V1UnitV
# CHECK-NEXT:  4      8    8     2.00     -    LD2Twov4h_POST                 V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v20.4h, v21.4h }, [x14], #16  // LD2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Twov4h_POST                 V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v1.4h, v2.4h }, [x21], x27   // LD2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  4      8    8     1.50     -    LD2Twov8h                      V1UnitL[2], V1UnitV[2],                           ld2	{ v12.8h, v13.8h }, [x29]      // LD2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 4 8  8  1.50 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  5      8    8     1.50     -    LD2Twov8h_POST                 V1UnitI, V1UnitL[2], V1UnitV[2],                  ld2	{ v17.8h, v18.8h }, [x10], #32  // LD2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #32  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  5      8    8     1.50     -    LD2Twov8h_POST                 V1UnitI, V1UnitL[2], V1UnitV[2],                  ld2	{ v19.8h, v20.8h }, [x18], x21  // LD2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2Twov2s                      V1UnitL, V1UnitV[2],                              ld2	{ v0.2s, v1.2s }, [x22]        // LD2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL,V1UnitV
# CHECK-NEXT:  4      8    8     2.00     -    LD2Twov2s_POST                 V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v11.2s, v12.2s }, [x21], #16  // LD2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Twov2s_POST                 V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v3.2s, v4.2s }, [x22], x27   // LD2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL,V1UnitV,V1UnitI
# CHECK-NEXT:  4      8    8     1.50     -    LD2Twov4s                      V1UnitL[2], V1UnitV[2],                           ld2	{ v2.4s, v3.4s }, [x13]        // LD2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 4 8  8  1.50 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  5      8    8     1.50     -    LD2Twov4s_POST                 V1UnitI, V1UnitL[2], V1UnitV[2],                  ld2	{ v12.4s, v13.4s }, [x20], #32  // LD2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #32  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  5      8    8     1.50     -    LD2Twov4s_POST                 V1UnitI, V1UnitL[2], V1UnitV[2],                  ld2	{ v16.4s, v17.4s }, [x16], x20  // LD2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, Q-form, B/H/S  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     1.50     -    LD2Twov2d                      V1UnitL[2], V1UnitV[2],                           ld2	{ v11.2d, v12.2d }, [x11]      // LD2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD load, 2 element, multiple, Q-form, D  \\ 4 8  8  1.50 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  5      8    8     1.50     -    LD2Twov2d_POST                 V1UnitI, V1UnitL[2], V1UnitV[2],                  ld2	{ v25.2d, v26.2d }, [x14], #32  // LD2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #32  \\ ASIMD load, 2 element, multiple, Q-form, D  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  5      8    8     1.50     -    LD2Twov2d_POST                 V1UnitI, V1UnitL[2], V1UnitV[2],                  ld2	{ v28.2d, v29.2d }, [x19], x10  // LD2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, multiple, Q-form, D  \\ 5 8  8  1.50 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2i8                          V1UnitL, V1UnitV[2],                              ld2	{ v23.b, v24.b }[3], [x26]     // LD2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD load, 2 element, one lane, B/H  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  3      8    8     2.00     -    LD2i16                         V1UnitL, V1UnitV[2],                              ld2	{ v10.h, v11.h }[5], [x14]     // LD2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD load, 2 element, one lane, B/H  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  3      8    8     2.00     -    LD2i32                         V1UnitL, V1UnitV[2],                              ld2	{ v10.s, v11.s }[1], [x17]     // LD2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD load, 2 element, one lane, S  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  3      8    8     2.00     -    LD2i64                         V1UnitL, V1UnitV[2],                              ld2	{ v15.d, v16.d }[1], [x29]     // LD2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD load, 2 element, one lane, D  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  4      8    8     2.00     -    LD2i8_POST                     V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v6.b, v7.b }[8], [x7], #2    // LD2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>], #2  \\ ASIMD load, 2 element, one lane, B/H  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2i8_POST                     V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v21.b, v22.b }[0], [x9], x5  // LD2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, one lane, B/H  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2i16_POST                    V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v6.h, v7.h }[2], [x29], #4   // LD2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>], #4  \\ ASIMD load, 2 element, one lane, B/H  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2i16_POST                    V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v4.h, v5.h }[2], [x23], x8   // LD2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, one lane, B/H  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2i32_POST                    V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v17.s, v18.s }[3], [x19], #8  // LD2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>], #8  \\ ASIMD load, 2 element, one lane, S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2i32_POST                    V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v3.s, v4.s }[0], [x7], x11   // LD2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, one lane, S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2i64_POST                    V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v20.d, v21.d }[1], [x5], #16  // LD2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>], #16  \\ ASIMD load, 2 element, one lane, D  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2i64_POST                    V1UnitI, V1UnitL, V1UnitV[2],                     ld2	{ v11.d, v12.d }[0], [x26], x24  // LD2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, one lane, D  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     1.00     -    LD2B_IMM                       V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2b	{ z9.b, z10.b }, p1/z, [x6]  // LD2B { <Zt1>.B, <Zt2>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      8    8     1.00     -    LD2B_IMM                       V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2b	{ z1.b, z2.b }, p6/z, [x7, #4, mul vl]  // LD2B { <Zt1>.B, <Zt2>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      9    9     1.00     -    LD2B                           V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2b	{ z23.b, z24.b }, p0/z, [x21, x24]  // LD2B { <Zt1>.B, <Zt2>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous Load two structures to two vectors, scalar + scalar  \\ 4 9  9  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      8    8     1.00     -    LD2D_IMM                       V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2d	{ z21.d, z22.d }, p5/z, [x12]  // LD2D { <Zt1>.D, <Zt2>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      8    8     1.00     -    LD2D_IMM                       V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2d	{ z29.d, z30.d }, p4/z, [x27, #2, mul vl]  // LD2D { <Zt1>.D, <Zt2>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      9    9     1.00     -    LD2D                           V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2d	{ z4.d, z5.d }, p4/z, [x9, x2, lsl #3]  // LD2D { <Zt1>.D, <Zt2>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous Load two structures to two vectors, scalar + scalar  \\ 4 9  9  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      8    8     1.00     -    LD2H_IMM                       V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2h	{ z23.h, z24.h }, p0/z, [x20]  // LD2H { <Zt1>.H, <Zt2>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      8    8     1.00     -    LD2H_IMM                       V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2h	{ z16.h, z17.h }, p3/z, [x26, #12, mul vl]  // LD2H { <Zt1>.H, <Zt2>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      10   10    1.00     -    LD2H                           V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2h	{ z30.h, z31.h }, p1/z, [x29, x8, lsl #1]  // LD2H { <Zt1>.H, <Zt2>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous Load two structures to two vectors, scalar + scalar  \\ 4 10  10  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitS[2]
# CHECK-NEXT:  3      8    8     2.00     -    LD2Rv8b                        V1UnitL, V1UnitV[2],                              ld2r	{ v10.8b, v11.8b }, [x10]      // LD2R { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv8b_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v25.8b, v26.8b }, [x27], #2  // LD2R { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #2  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv8b_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v8.8b, v9.8b }, [x25], x16   // LD2R { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2Rv16b                       V1UnitL, V1UnitV[2],                              ld2r	{ v8.16b, v9.16b }, [x19]      // LD2R { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv16b_POST                  V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v11.16b, v12.16b }, [x12], #2  // LD2R { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #2  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv16b_POST                  V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v15.16b, v16.16b }, [x1], x17  // LD2R { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2Rv4h                        V1UnitL, V1UnitV[2],                              ld2r	{ v19.4h, v20.4h }, [x25]      // LD2R { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv4h_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v10.4h, v11.4h }, [x20], #4  // LD2R { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #4  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv4h_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v6.4h, v7.4h }, [x27], x12   // LD2R { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2Rv8h                        V1UnitL, V1UnitV[2],                              ld2r	{ v4.8h, v5.8h }, [x10]        // LD2R { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv8h_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v26.8h, v27.8h }, [x28], #4  // LD2R { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #4  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv8h_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v10.8h, v11.8h }, [x9], x30  // LD2R { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2Rv2s                        V1UnitL, V1UnitV[2],                              ld2r	{ v21.2s, v22.2s }, [x15]      // LD2R { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv2s_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v14.2s, v15.2s }, [x15], #8  // LD2R { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #8  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv2s_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v9.2s, v10.2s }, [x29], x5   // LD2R { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, D-form, B/H/S  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2Rv4s                        V1UnitL, V1UnitV[2],                              ld2r	{ v25.4s, v26.4s }, [x13]      // LD2R { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv4s_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v20.4s, v21.4s }, [x6], #8   // LD2R { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #8  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv4s_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v11.4s, v12.4s }, [x4], x2   // LD2R { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2Rv1d                        V1UnitL, V1UnitV[2],                              ld2r	{ v13.1d, v14.1d }, [x11]      // LD2R { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, D-form, D  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv1d_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v22.1d, v23.1d }, [x27], #16  // LD2R { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, all lanes, D-form, D  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv1d_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v14.1d, v15.1d }, [x30], x25  // LD2R { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, D-form, D  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  3      8    8     2.00     -    LD2Rv2d                        V1UnitL, V1UnitV[2],                              ld2r	{ v13.2d, v14.2d }, [x12]      // LD2R { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 3 8  8  2.00 V1UnitL[2],V1UnitV[2]
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv2d_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v7.2d, v8.2d }, [x11], #16   // LD2R { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #16  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     2.00     -    LD2Rv2d_POST                   V1UnitI, V1UnitL, V1UnitV[2],                     ld2r	{ v10.2d, v11.2d }, [x5], x25  // LD2R { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 2 element, all lanes, Q-form  \\ 4 8  8  2.00 V1UnitL[2],V1UnitV[2],V1UnitI
# CHECK-NEXT:  4      8    8     1.00     -    LD2W_IMM                       V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2w	{ z14.s, z15.s }, p5/z, [x11]  // LD2W { <Zt1>.S, <Zt2>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      8    8     1.00     -    LD2W_IMM                       V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2w	{ z11.s, z12.s }, p0/z, [x3, #-4, mul vl]  // LD2W { <Zt1>.S, <Zt2>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load two structures to two vectors, scalar + imm  \\ 4 8  8  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      9    9     1.00     -    LD2W                           V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   ld2w	{ z2.s, z3.s }, p3/z, [x11, x3, lsl #2]  // LD2W { <Zt1>.S, <Zt2>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous Load two structures to two vectors, scalar + scalar  \\ 4 9  9  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  5      8    8     1.33     -    LD3Threev8b                    V1UnitL[2], V1UnitV[3],                           ld3	{ v7.8b, v8.8b, v9.8b }, [x26]  // LD3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Threev8b_POST               V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v2.8b, v3.8b, v4.8b }, [x2], #24  // LD3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Threev8b_POST               V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v12.8b, v13.8b, v14.8b }, [x1], x29  // LD3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.00     -    LD3Threev16b                   V1UnitL[3], V1UnitV[3],                           ld3	{ v6.16b, v7.16b, v8.16b }, [x5]  // LD3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 6 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  7      8    8     1.00     -    LD3Threev16b_POST              V1UnitI, V1UnitL[3], V1UnitV[3],                  ld3	{ v15.16b, v16.16b, v17.16b }, [x19], #48  // LD3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #48  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD3Threev16b_POST              V1UnitI, V1UnitL[3], V1UnitV[3],                  ld3	{ v17.16b, v18.16b, v19.16b }, [x13], x7  // LD3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3Threev4h                    V1UnitL[2], V1UnitV[3],                           ld3	{ v16.4h, v17.4h, v18.4h }, [x17]  // LD3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Threev4h_POST               V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v16.4h, v17.4h, v18.4h }, [x4], #24  // LD3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Threev4h_POST               V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v18.4h, v19.4h, v20.4h }, [x28], x0  // LD3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.00     -    LD3Threev8h                    V1UnitL[3], V1UnitV[3],                           ld3	{ v24.8h, v25.8h, v26.8h }, [x24]  // LD3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 6 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  7      8    8     1.00     -    LD3Threev8h_POST               V1UnitI, V1UnitL[3], V1UnitV[3],                  ld3	{ v18.8h, v19.8h, v20.8h }, [x2], #48  // LD3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #48  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD3Threev8h_POST               V1UnitI, V1UnitL[3], V1UnitV[3],                  ld3	{ v26.8h, v27.8h, v28.8h }, [x20], x6  // LD3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3Threev2s                    V1UnitL[2], V1UnitV[3],                           ld3	{ v14.2s, v15.2s, v16.2s }, [x2]  // LD3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Threev2s_POST               V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v26.2s, v27.2s, v28.2s }, [x19], #24  // LD3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Threev2s_POST               V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v23.2s, v24.2s, v25.2s }, [x27], x22  // LD3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.00     -    LD3Threev4s                    V1UnitL[3], V1UnitV[3],                           ld3	{ v20.4s, v21.4s, v22.4s }, [x4]  // LD3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 6 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  7      8    8     1.00     -    LD3Threev4s_POST               V1UnitI, V1UnitL[3], V1UnitV[3],                  ld3	{ v24.4s, v25.4s, v26.4s }, [x21], #48  // LD3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #48  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD3Threev4s_POST               V1UnitI, V1UnitL[3], V1UnitV[3],                  ld3	{ v11.4s, v12.4s, v13.4s }, [x5], x8  // LD3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.00     -    LD3Threev2d                    V1UnitL[3], V1UnitV[3],                           ld3	{ v11.2d, v12.2d, v13.2d }, [x11]  // LD3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD load, 3 element, multiple, Q-form, D  \\ 6 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  7      8    8     1.00     -    LD3Threev2d_POST               V1UnitI, V1UnitL[3], V1UnitV[3],                  ld3	{ v12.2d, v13.2d, v14.2d }, [x17], #48  // LD3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #48  \\ ASIMD load, 3 element, multiple, Q-form, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD3Threev2d_POST               V1UnitI, V1UnitL[3], V1UnitV[3],                  ld3	{ v2.2d, v3.2d, v4.2d }, [x11], x0  // LD3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, multiple, Q-form, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3i8                          V1UnitL[2], V1UnitV[3],                           ld3	{ v7.b, v8.b, v9.b }[3], [x23]  // LD3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD load, 3 element, one lane, B/H  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  5      8    8     1.33     -    LD3i16                         V1UnitL[2], V1UnitV[3],                           ld3	{ v9.h, v10.h, v11.h }[6], [x15]  // LD3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD load, 3 element, one lane, B/H  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  5      8    8     1.33     -    LD3i32                         V1UnitL[2], V1UnitV[3],                           ld3	{ v17.s, v18.s, v19.s }[0], [x0]  // LD3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD load, 3 element, one lane, S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  5      8    8     1.33     -    LD3i64                         V1UnitL[2], V1UnitV[3],                           ld3	{ v25.d, v26.d, v27.d }[0], [x14]  // LD3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD load, 3 element, one lane, D  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3i8_POST                     V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v21.b, v22.b, v23.b }[6], [x7], #3  // LD3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>], #3  \\ ASIMD load, 3 element, one lane, B/H  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3i8_POST                     V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v8.b, v9.b, v10.b }[15], [x9], x23  // LD3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, one lane, B/H  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3i16_POST                    V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v12.h, v13.h, v14.h }[0], [x17], #6  // LD3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>], #6  \\ ASIMD load, 3 element, one lane, B/H  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3i16_POST                    V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v25.h, v26.h, v27.h }[7], [x24], x30  // LD3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, one lane, B/H  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3i32_POST                    V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v13.s, v14.s, v15.s }[0], [x16], #12  // LD3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>], #12  \\ ASIMD load, 3 element, one lane, S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3i32_POST                    V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v7.s, v8.s, v9.s }[1], [x5], x28  // LD3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, one lane, S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3i64_POST                    V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v16.d, v17.d, v18.d }[1], [x1], #24  // LD3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>], #24  \\ ASIMD load, 3 element, one lane, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3i64_POST                    V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3	{ v28.d, v29.d, v30.d }[0], [x30], x20  // LD3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, one lane, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      11   11    0.67     -    LD3B_IMM                       V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   ld3b	{ z23.b - z25.b }, p7/z, [x16]  // LD3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  6      11   11    0.67     -    LD3B_IMM                       V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   ld3b	{ z11.b - z13.b }, p4/z, [x8, #12, mul vl]  // LD3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  7      8    8     0.67     -    LD3B                           V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitS, V1UnitV[3], V1UnitV01[3],   ld3b	{ z26.b - z28.b }, p7/z, [x10, x17]  // LD3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous Load three structures to three vectors, scalar + scalar  \\ 7 8  8  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitS[7]
# CHECK-NEXT:  6      11   11    0.67     -    LD3D_IMM                       V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   ld3d	{ z26.d - z28.d }, p4/z, [x16]  // LD3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  6      11   11    0.67     -    LD3D_IMM                       V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   ld3d	{ z21.d - z23.d }, p1/z, [x7, #-18, mul vl]  // LD3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  7      8    8     0.67     -    LD3D                           V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitS, V1UnitV[3], V1UnitV01[3],   ld3d	{ z24.d - z26.d }, p4/z, [x29, x9, lsl #3]  // LD3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous Load three structures to three vectors, scalar + scalar  \\ 7 8  8  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitS[7]
# CHECK-NEXT:  6      11   11    0.67     -    LD3H_IMM                       V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   ld3h	{ z26.h - z28.h }, p2/z, [x15]  // LD3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  6      11   11    0.67     -    LD3H_IMM                       V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   ld3h	{ z14.h - z16.h }, p0/z, [x24, #-6, mul vl]  // LD3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  7      8    8     0.67     -    LD3H                           V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitS, V1UnitV[3], V1UnitV01[3],   ld3h	{ z6.h - z8.h }, p2/z, [x10, x5, lsl #1]  // LD3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous Load three structures to three vectors, scalar + scalar  \\ 7 8  8  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitS[7]
# CHECK-NEXT:  5      8    8     1.33     -    LD3Rv8b                        V1UnitL[2], V1UnitV[3],                           ld3r	{ v1.8b, v2.8b, v3.8b }, [x23]  // LD3R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv8b_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v21.8b, v22.8b, v23.8b }, [x21], #3  // LD3R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #3  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv8b_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v12.8b, v13.8b, v14.8b }, [x14], x7  // LD3R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3Rv16b                       V1UnitL[2], V1UnitV[3],                           ld3r	{ v15.16b, v16.16b, v17.16b }, [x28]  // LD3R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv16b_POST                  V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v28.16b, v29.16b, v30.16b }, [x14], #3  // LD3R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #3  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv16b_POST                  V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v15.16b, v16.16b, v17.16b }, [x24], x8  // LD3R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3Rv4h                        V1UnitL[2], V1UnitV[3],                           ld3r	{ v17.4h, v18.4h, v19.4h }, [x6]  // LD3R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv4h_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v12.4h, v13.4h, v14.4h }, [x24], #6  // LD3R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #6  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv4h_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v12.4h, v13.4h, v14.4h }, [x19], x13  // LD3R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3Rv8h                        V1UnitL[2], V1UnitV[3],                           ld3r	{ v28.8h, v29.8h, v30.8h }, [x0]  // LD3R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv8h_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v15.8h, v16.8h, v17.8h }, [x13], #6  // LD3R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #6  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv8h_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v4.8h, v5.8h, v6.8h }, [x15], x7  // LD3R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3Rv2s                        V1UnitL[2], V1UnitV[3],                           ld3r	{ v19.2s, v20.2s, v21.2s }, [x23]  // LD3R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv2s_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v0.2s, v1.2s, v2.2s }, [x13], #12  // LD3R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #12  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv2s_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v13.2s, v14.2s, v15.2s }, [x7], x15  // LD3R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, D-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3Rv4s                        V1UnitL[2], V1UnitV[3],                           ld3r	{ v5.4s, v6.4s, v7.4s }, [x30]  // LD3R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv4s_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v19.4s, v20.4s, v21.4s }, [x2], #12  // LD3R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #12  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv4s_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v5.4s, v6.4s, v7.4s }, [x17], x1  // LD3R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, Q-form, B/H/S  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3Rv1d                        V1UnitL[2], V1UnitV[3],                           ld3r	{ v1.1d, v2.1d, v3.1d }, [x11]  // LD3R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, D-form, D  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv1d_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v7.1d, v8.1d, v9.1d }, [x3], #24  // LD3R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, all lanes, D-form, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv1d_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v13.1d, v14.1d, v15.1d }, [x8], x14  // LD3R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, D-form, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  5      8    8     1.33     -    LD3Rv2d                        V1UnitL[2], V1UnitV[3],                           ld3r	{ v15.2d, v16.2d, v17.2d }, [x3]  // LD3R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD load, 3 element, all lanes, Q-form, D  \\ 5 8  8  1.33 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv2d_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v16.2d, v17.2d, v18.2d }, [x17], #24  // LD3R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #24  \\ ASIMD load, 3 element, all lanes, Q-form, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      8    8     1.33     -    LD3Rv2d_POST                   V1UnitI, V1UnitL[2], V1UnitV[3],                  ld3r	{ v27.2d, v28.2d, v29.2d }, [x5], x17  // LD3R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 3 element, all lanes, Q-form, D  \\ 6 8  8  1.33 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  6      11   11    0.67     -    LD3W_IMM                       V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   ld3w	{ z6.s - z8.s }, p0/z, [x21]  // LD3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  6      11   11    0.67     -    LD3W_IMM                       V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   ld3w	{ z15.s - z17.s }, p4/z, [x29, #21, mul vl]  // LD3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load three structures to three vectors, scalar + imm  \\ 6 11  11  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  7      8    8     0.67     -    LD3W                           V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitS, V1UnitV[3], V1UnitV01[3],   ld3w	{ z28.s - z30.s }, p0/z, [x24, x14, lsl #2]  // LD3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous Load three structures to three vectors, scalar + scalar  \\ 7 8  8  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitS[7]
# CHECK-NEXT:  7      8    8     1.00     -    LD4Fourv8b                     V1UnitL[3], V1UnitV[4],                           ld4	{ v15.8b, v16.8b, v17.8b, v18.8b }, [x9]  // LD4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Fourv8b_POST                V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v13.8b, v14.8b, v15.8b, v16.8b }, [x11], #32  // LD4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Fourv8b_POST                V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v13.8b, v14.8b, v15.8b, v16.8b }, [x6], x28  // LD4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      9    9     0.75     -    LD4Fourv16b                    V1UnitL[4], V1UnitV[4],                           ld4	{ v21.16b, v22.16b, v23.16b, v24.16b }, [x29]  // LD4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 8 9  9  0.75 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  9      9    9     0.75     -    LD4Fourv16b_POST               V1UnitI, V1UnitL[4], V1UnitV[4],                  ld4	{ v23.16b, v24.16b, v25.16b, v26.16b }, [x25], #64  // LD4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #64  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
# CHECK-NEXT:  9      9    9     0.75     -    LD4Fourv16b_POST               V1UnitI, V1UnitL[4], V1UnitV[4],                  ld4	{ v24.16b, v25.16b, v26.16b, v27.16b }, [x21], x8  // LD4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4Fourv4h                     V1UnitL[3], V1UnitV[4],                           ld4	{ v4.4h, v5.4h, v6.4h, v7.4h }, [x11]  // LD4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Fourv4h_POST                V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v20.4h, v21.4h, v22.4h, v23.4h }, [x11], #32  // LD4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Fourv4h_POST                V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v3.4h, v4.4h, v5.4h, v6.4h }, [x27], x4  // LD4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      9    9     0.75     -    LD4Fourv8h                     V1UnitL[4], V1UnitV[4],                           ld4	{ v18.8h, v19.8h, v20.8h, v21.8h }, [x6]  // LD4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 8 9  9  0.75 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  9      9    9     0.75     -    LD4Fourv8h_POST                V1UnitI, V1UnitL[4], V1UnitV[4],                  ld4	{ v12.8h, v13.8h, v14.8h, v15.8h }, [x30], #64  // LD4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #64  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
# CHECK-NEXT:  9      9    9     0.75     -    LD4Fourv8h_POST                V1UnitI, V1UnitL[4], V1UnitV[4],                  ld4	{ v3.8h, v4.8h, v5.8h, v6.8h }, [x25], x11  // LD4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4Fourv2s                     V1UnitL[3], V1UnitV[4],                           ld4	{ v12.2s, v13.2s, v14.2s, v15.2s }, [x9]  // LD4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Fourv2s_POST                V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v26.2s, v27.2s, v28.2s, v29.2s }, [x0], #32  // LD4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Fourv2s_POST                V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v1.2s, v2.2s, v3.2s, v4.2s }, [x25], x10  // LD4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      9    9     0.75     -    LD4Fourv4s                     V1UnitL[4], V1UnitV[4],                           ld4	{ v22.4s, v23.4s, v24.4s, v25.4s }, [x28]  // LD4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 8 9  9  0.75 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  9      9    9     0.75     -    LD4Fourv4s_POST                V1UnitI, V1UnitL[4], V1UnitV[4],                  ld4	{ v5.4s, v6.4s, v7.4s, v8.4s }, [x23], #64  // LD4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #64  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
# CHECK-NEXT:  9      9    9     0.75     -    LD4Fourv4s_POST                V1UnitI, V1UnitL[4], V1UnitV[4],                  ld4	{ v7.4s, v8.4s, v9.4s, v10.4s }, [x22], x19  // LD4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, Q-form, B/H/S  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
# CHECK-NEXT:  8      9    9     0.75     -    LD4Fourv2d                     V1UnitL[4], V1UnitV[4],                           ld4	{ v2.2d, v3.2d, v4.2d, v5.2d }, [x13]  // LD4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD load, 4 element, multiple, Q-form, D  \\ 8 9  9  0.75 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  9      9    9     0.75     -    LD4Fourv2d_POST                V1UnitI, V1UnitL[4], V1UnitV[4],                  ld4	{ v8.2d, v9.2d, v10.2d, v11.2d }, [x11], #64  // LD4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #64  \\ ASIMD load, 4 element, multiple, Q-form, D  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
# CHECK-NEXT:  9      9    9     0.75     -    LD4Fourv2d_POST                V1UnitI, V1UnitL[4], V1UnitV[4],                  ld4	{ v8.2d, v9.2d, v10.2d, v11.2d }, [x19], x4  // LD4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, multiple, Q-form, D  \\ 9 9  9  0.75 V1UnitL[6],V1UnitV[6],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4i8                          V1UnitL[3], V1UnitV[4],                           ld4	{ v8.b, v9.b, v10.b, v11.b }[7], [x0]  // LD4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD load, 4 element, one lane, B/H  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  7      8    8     1.00     -    LD4i16                         V1UnitL[3], V1UnitV[4],                           ld4	{ v9.h, v10.h, v11.h, v12.h }[2], [x23]  // LD4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD load, 4 element, one lane, B/H  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  7      8    8     1.00     -    LD4i32                         V1UnitL[3], V1UnitV[4],                           ld4	{ v13.s, v14.s, v15.s, v16.s }[0], [x3]  // LD4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD load, 4 element, one lane, S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  7      8    8     1.00     -    LD4i64                         V1UnitL[3], V1UnitV[4],                           ld4	{ v18.d, v19.d, v20.d, v21.d }[0], [x29]  // LD4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD load, 4 element, one lane, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4i8_POST                     V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v14.b, v15.b, v16.b, v17.b }[4], [x26], #4  // LD4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>], #4  \\ ASIMD load, 4 element, one lane, B/H  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4i8_POST                     V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v13.b, v14.b, v15.b, v16.b }[12], [x4], x9  // LD4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, one lane, B/H  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4i16_POST                    V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v20.h, v21.h, v22.h, v23.h }[4], [x4], #8  // LD4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>], #8  \\ ASIMD load, 4 element, one lane, B/H  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4i16_POST                    V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v18.h, v19.h, v20.h, v21.h }[5], [x16], x10  // LD4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, one lane, B/H  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4i32_POST                    V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v16.s, v17.s, v18.s, v19.s }[2], [x13], #16  // LD4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>], #16  \\ ASIMD load, 4 element, one lane, S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4i32_POST                    V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v4.s, v5.s, v6.s, v7.s }[3], [x4], x20  // LD4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, one lane, S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4i64_POST                    V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v2.d, v3.d, v4.d, v5.d }[0], [x6], #32  // LD4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>], #32  \\ ASIMD load, 4 element, one lane, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4i64_POST                    V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4	{ v11.d, v12.d, v13.d, v14.d }[0], [x21], x30  // LD4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, one lane, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      12   12    0.50     -    LD4B_IMM                       V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   ld4b	{ z13.b - z16.b }, p2/z, [x13]  // LD4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
# CHECK-NEXT:  8      12   12    0.50     -    LD4B_IMM                       V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   ld4b	{ z23.b - z26.b }, p1/z, [x2, #-8, mul vl]  // LD4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
# CHECK-NEXT:  10     13   13    0.50     -    LD4B                           V1UnitI[2], V1UnitL[4], V1UnitL01[4], V1UnitS[2], V1UnitV[4], V1UnitV01[4],   ld4b	{ z22.b - z25.b }, p1/z, [x17, x1]  // LD4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous Load four structures to four vectors, scalar + scalar  \\ 10 13  13  0.50 V1UnitL01[8],V1UnitV01[8],V1UnitS[8]
# CHECK-NEXT:  8      12   12    0.50     -    LD4D_IMM                       V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   ld4d	{ z25.d - z28.d }, p5/z, [x26]  // LD4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
# CHECK-NEXT:  8      12   12    0.50     -    LD4D_IMM                       V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   ld4d	{ z1.d - z4.d }, p0/z, [x0, #-32, mul vl]  // LD4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
# CHECK-NEXT:  10     13   13    0.50     -    LD4D                           V1UnitI[2], V1UnitL[4], V1UnitL01[4], V1UnitS[2], V1UnitV[4], V1UnitV01[4],   ld4d	{ z10.d - z13.d }, p0/z, [x24, x18, lsl #3]  // LD4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous Load four structures to four vectors, scalar + scalar  \\ 10 13  13  0.50 V1UnitL01[8],V1UnitV01[8],V1UnitS[8]
# CHECK-NEXT:  8      12   12    0.50     -    LD4H_IMM                       V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   ld4h	{ z17.h - z20.h }, p7/z, [x29]  // LD4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
# CHECK-NEXT:  8      12   12    0.50     -    LD4H_IMM                       V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   ld4h	{ z20.h - z23.h }, p2/z, [x14, #-24, mul vl]  // LD4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
# CHECK-NEXT:  10     13   13    0.50     -    LD4H                           V1UnitI[2], V1UnitL[4], V1UnitL01[4], V1UnitS[2], V1UnitV[4], V1UnitV01[4],   ld4h	{ z3.h - z6.h }, p2/z, [x28, x2, lsl #1]  // LD4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous Load four structures to four vectors, scalar + scalar  \\ 10 13  13  0.50 V1UnitL01[8],V1UnitV01[8],V1UnitS[8]
# CHECK-NEXT:  7      8    8     1.00     -    LD4Rv8b                        V1UnitL[3], V1UnitV[4],                           ld4r	{ v9.8b, v10.8b, v11.8b, v12.8b }, [x22]  // LD4R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv8b_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v9.8b, v10.8b, v11.8b, v12.8b }, [x6], #4  // LD4R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #4  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv8b_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v12.8b, v13.8b, v14.8b, v15.8b }, [x13], x16  // LD4R { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4Rv16b                       V1UnitL[3], V1UnitV[4],                           ld4r	{ v19.16b, v20.16b, v21.16b, v22.16b }, [x2]  // LD4R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv16b_POST                  V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v22.16b, v23.16b, v24.16b, v25.16b }, [x5], #4  // LD4R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #4  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv16b_POST                  V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v0.16b, v1.16b, v2.16b, v3.16b }, [x15], x2  // LD4R { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4Rv4h                        V1UnitL[3], V1UnitV[4],                           ld4r	{ v18.4h, v19.4h, v20.4h, v21.4h }, [x14]  // LD4R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv4h_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v17.4h, v18.4h, v19.4h, v20.4h }, [x0], #8  // LD4R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #8  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv4h_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v21.4h, v22.4h, v23.4h, v24.4h }, [x7], x19  // LD4R { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4Rv8h                        V1UnitL[3], V1UnitV[4],                           ld4r	{ v6.8h, v7.8h, v8.8h, v9.8h }, [x0]  // LD4R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv8h_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v9.8h, v10.8h, v11.8h, v12.8h }, [x22], #8  // LD4R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #8  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv8h_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v2.8h, v3.8h, v4.8h, v5.8h }, [x8], x15  // LD4R { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4Rv2s                        V1UnitL[3], V1UnitV[4],                           ld4r	{ v14.2s, v15.2s, v16.2s, v17.2s }, [x26]  // LD4R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv2s_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v13.2s, v14.2s, v15.2s, v16.2s }, [x7], #16  // LD4R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #16  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv2s_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v21.2s, v22.2s, v23.2s, v24.2s }, [x27], x16  // LD4R { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, D-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4Rv4s                        V1UnitL[3], V1UnitV[4],                           ld4r	{ v16.4s, v17.4s, v18.4s, v19.4s }, [x29]  // LD4R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv4s_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v8.4s, v9.4s, v10.4s, v11.4s }, [x16], #16  // LD4R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #16  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv4s_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v5.4s, v6.4s, v7.4s, v8.4s }, [x20], x24  // LD4R { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, Q-form, B/H/S  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4Rv1d                        V1UnitL[3], V1UnitV[4],                           ld4r	{ v16.1d, v17.1d, v18.1d, v19.1d }, [x16]  // LD4R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, D-form, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv1d_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v21.1d, v22.1d, v23.1d, v24.1d }, [x0], #32  // LD4R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, all lanes, D-form, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv1d_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v18.1d, v19.1d, v20.1d, v21.1d }, [x19], x2  // LD4R { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, D-form, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  7      8    8     1.00     -    LD4Rv2d                        V1UnitL[3], V1UnitV[4],                           ld4r	{ v20.2d, v21.2d, v22.2d, v23.2d }, [x6]  // LD4R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD load, 4 element, all lanes, Q-form, D  \\ 7 8  8  1.00 V1UnitL[3],V1UnitV[3]
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv2d_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v27.2d, v28.2d, v29.2d, v30.2d }, [x24], #32  // LD4R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #32  \\ ASIMD load, 4 element, all lanes, Q-form, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      8    8     1.00     -    LD4Rv2d_POST                   V1UnitI, V1UnitL[3], V1UnitV[4],                  ld4r	{ v5.2d, v6.2d, v7.2d, v8.2d }, [x3], x22  // LD4R { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD load, 4 element, all lanes, Q-form, D  \\ 8 8  8  1.00 V1UnitL[3],V1UnitV[3],V1UnitI
# CHECK-NEXT:  8      12   12    0.50     -    LD4W_IMM                       V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   ld4w	{ z5.s - z8.s }, p3/z, [x27]  // LD4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
# CHECK-NEXT:  8      12   12    0.50     -    LD4W_IMM                       V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   ld4w	{ z24.s - z27.s }, p5/z, [x0, #-12, mul vl]  // LD4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous Load four structures to four vectors, scalar + imm  \\ 8 12  12  0.50 V1UnitV01[8],V1UnitL01[8]
# CHECK-NEXT:  10     13   13    0.50     -    LD4W                           V1UnitI[2], V1UnitL[4], V1UnitL01[4], V1UnitS[2], V1UnitV[4], V1UnitV01[4],   ld4w	{ z3.s - z6.s }, p6/z, [x21, x8, lsl #2]  // LD4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous Load four structures to four vectors, scalar + scalar  \\ 10 13  13  0.50 V1UnitL01[8],V1UnitV01[8],V1UnitS[8]
# CHECK-NEXT:  2      1    1     2.00     -    LDAPURi                        V1UnitD, V1UnitL, V1UnitL01,                      ldapur	w29, [x30]                     // LDAPUR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    LDAPURi                        V1UnitD, V1UnitL, V1UnitL01,                      ldapur	w13, [x20, #52]                // LDAPUR <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    LDAPURXi                       V1UnitD, V1UnitL, V1UnitL01,                      ldapur	x18, [x30]                     // LDAPUR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    LDAPURXi                       V1UnitD, V1UnitL, V1UnitL01,                      ldapur	x30, [x12]                     // LDAPUR <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    LDAPURBi                       V1UnitD, V1UnitL, V1UnitL01,                      ldapurb	w17, [x15]             // LDAPURB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    LDAPURBi                       V1UnitD, V1UnitL, V1UnitL01,                      ldapurb	w0, [x8, #154]         // LDAPURB <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    LDAPURHi                       V1UnitD, V1UnitL, V1UnitL01,                      ldapurh	w12, [x30]             // LDAPURH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    LDAPURHi                       V1UnitD, V1UnitL, V1UnitL01,                      ldapurh	w12, [x12, #-116]      // LDAPURH <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSBWi                     V1UnitD, V1UnitL, V1UnitL01,                      ldapursb	w2, [x16]              // LDAPURSB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSBWi                     V1UnitD, V1UnitL, V1UnitL01,                      ldapursb	w10, [x2, #64]         // LDAPURSB <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSBXi                     V1UnitD, V1UnitL, V1UnitL01,                      ldapursb	x8, [x11]              // LDAPURSB <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSBXi                     V1UnitD, V1UnitL, V1UnitL01,                      ldapursb	x20, [x26, #185]       // LDAPURSB <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSHWi                     V1UnitD, V1UnitL, V1UnitL01,                      ldapursh	w22, [x1]              // LDAPURSH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSHWi                     V1UnitD, V1UnitL, V1UnitL01,                      ldapursh	w1, [x9, #46]          // LDAPURSH <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSHXi                     V1UnitD, V1UnitL, V1UnitL01,                      ldapursh	x28, [x5]              // LDAPURSH <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSHXi                     V1UnitD, V1UnitL, V1UnitL01,                      ldapursh	x16, [x30, #-255]      // LDAPURSH <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSWi                      V1UnitD, V1UnitL, V1UnitL01,                      ldapursw	x0, [x26]              // LDAPURSW <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   LDAPURSWi                      V1UnitD, V1UnitL, V1UnitL01,                      ldapursw	x20, [x3, #232]        // LDAPURSW <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDARW                          V1UnitL,                                          ldar	w21, [x9]                      // LDAR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDARW                          V1UnitL,                                          ldar	w20, [x11]                     // LDAR <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDARX                          V1UnitL,                                          ldar	x29, [x18]                     // LDAR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDARX                          V1UnitL,                                          ldar	x29, [x8]                      // LDAR <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDARB                          V1UnitL,                                          ldarb	w19, [x6]                      // LDARB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDARB                          V1UnitL,                                          ldarb	w29, [x10]                     // LDARB <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDARH                          V1UnitL,                                          ldarh	w7, [x27]                      // LDARH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDARH                          V1UnitL,                                          ldarh	w13, [x29]                     // LDARH <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      4    4     1.50     SE   LDAXPW                         V1UnitL[2],                                       ldaxp	w9, w16, [x13]                 // LDAXP <Wt1>, <Wt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      4    4     1.50     SE   LDAXPW                         V1UnitL[2],                                       ldaxp	w25, w26, [x18]                // LDAXP <Wt1>, <Wt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      4    4     1.50     SE   LDAXPX                         V1UnitL[2],                                       ldaxp	x24, x22, [x18]                // LDAXP <Xt1>, <Xt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      4    4     1.50     SE   LDAXPX                         V1UnitL[2],                                       ldaxp	x18, x28, [x5]                 // LDAXP <Xt1>, <Xt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDAXRW                         V1UnitL,                                          ldaxr	w19, [x0]                      // LDAXR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDAXRW                         V1UnitL,                                          ldaxr	w4, [x0]                       // LDAXR <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDAXRX                         V1UnitL,                                          ldaxr	x13, [x16]                     // LDAXR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDAXRX                         V1UnitL,                                          ldaxr	x22, [x22]                     // LDAXR <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDAXRB                         V1UnitL,                                          ldaxrb	w11, [x3]                      // LDAXRB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDAXRB                         V1UnitL,                                          ldaxrb	w19, [x18]                     // LDAXRB <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDAXRH                         V1UnitL,                                          ldaxrh	w30, [x20]                     // LDAXRH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDAXRH                         V1UnitL,                                          ldaxrh	w30, [x3]                      // LDAXRH <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1B                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1b	{ z19.b }, p1/z, [x10]         // LDFF1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1B                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1b	{ z20.b }, p6/z, [x9, x17]     // LDFF1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1B_H                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1b	{ z13.h }, p7/z, [x7]          // LDFF1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1B_H                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1b	{ z28.h }, p7/z, [x26, x0]     // LDFF1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1B_S                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1b	{ z20.s }, p2/z, [x16]         // LDFF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1B_S                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1b	{ z0.s }, p6/z, [x8, x15]      // LDFF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1B_D                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1b	{ z8.d }, p1/z, [x0]           // LDFF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1B_D                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1b	{ z28.d }, p4/z, [x19, x20]    // LDFF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1B_D_SXTW                 V1UnitL[2], V1UnitV[2],                           ldff1b	{ z12.d }, p1/z, [x23, z7.d, sxtw]  // LDFF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     SE   GLDFF1B_S_UXTW                 V1UnitL, V1UnitV,                                 ldff1b	{ z0.s }, p1/z, [x12, z12.s, uxtw]  // LDFF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1B_D                      V1UnitL[2], V1UnitV[2],                           ldff1b	{ z16.d }, p1/z, [x9, z14.d]   // LDFF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1B_S_IMM                  V1UnitL, V1UnitV,                                 ldff1b	{ z31.s }, p0/z, [z25.s]       // LDFF1B { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1B_S_IMM                  V1UnitL, V1UnitV,                                 ldff1b	{ z2.s }, p7/z, [z19.s, #4]    // LDFF1B { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1B_D_IMM                  V1UnitL[2], V1UnitV[2],                           ldff1b	{ z18.d }, p6/z, [z18.d]       // LDFF1B { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1B_D_IMM                  V1UnitL[2], V1UnitV[2],                           ldff1b	{ z17.d }, p3/z, [z18.d]       // LDFF1B { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1D                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1d	{ z26.d }, p3/z, [x27]         // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1D                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1d	{ z13.d }, p2/z, [x30, x16, lsl #3]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1D_SXTW_SCALED            V1UnitL[2], V1UnitV[2],                           ldff1d	{ z9.d }, p6/z, [x2, z28.d, sxtw #3]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #3]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1D_SXTW                   V1UnitL[2], V1UnitV[2],                           ldff1d	{ z30.d }, p4/z, [x7, z23.d, sxtw]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1D_SCALED                 V1UnitL[2], V1UnitV[2],                           ldff1d	{ z0.d }, p2/z, [x28, z8.d, lsl #3]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #3]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1D                        V1UnitL[2], V1UnitV[2],                           ldff1d	{ z28.d }, p2/z, [x29, z24.d]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1D_IMM                    V1UnitL[2], V1UnitV[2],                           ldff1d	{ z4.d }, p2/z, [z28.d]        // LDFF1D { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1D_IMM                    V1UnitL[2], V1UnitV[2],                           ldff1d	{ z20.d }, p5/z, [z17.d, #40]  // LDFF1D { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1H                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1h	{ z0.h }, p6/z, [x14]          // LDFF1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1H                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1h	{ z14.h }, p2/z, [x1, x5, lsl #1]  // LDFF1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1H_S                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1h	{ z12.s }, p5/z, [x19]         // LDFF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1H_S                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1h	{ z15.s }, p1/z, [x2, x28, lsl #1]  // LDFF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1H_D                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1h	{ z2.d }, p5/z, [x5]           // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1H_D                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1h	{ z19.d }, p1/z, [x11, x18, lsl #1]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  4      11   11    1.50     SE   GLDFF1H_S_SXTW_SCALED          V1UnitL[2], V1UnitV[2],                           ldff1h	{ z27.s }, p7/z, [x13, z9.s, sxtw #1]  // LDFF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1H_D_SXTW_SCALED          V1UnitL[2], V1UnitV[2],                           ldff1h	{ z27.d }, p4/z, [x22, z26.d, sxtw #1]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1H_D_UXTW                 V1UnitL[2], V1UnitV[2],                           ldff1h	{ z0.d }, p4/z, [x9, z15.d, uxtw]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     SE   GLDFF1H_S_UXTW                 V1UnitL, V1UnitV,                                 ldff1h	{ z14.s }, p1/z, [x0, z2.s, uxtw]  // LDFF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1H_D_SCALED               V1UnitL[2], V1UnitV[2],                           ldff1h	{ z21.d }, p5/z, [x13, z29.d, lsl #1]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1H_D                      V1UnitL[2], V1UnitV[2],                           ldff1h	{ z21.d }, p5/z, [x16, z20.d]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1H_S_IMM                  V1UnitL, V1UnitV,                                 ldff1h	{ z30.s }, p4/z, [z28.s]       // LDFF1H { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1H_S_IMM                  V1UnitL, V1UnitV,                                 ldff1h	{ z9.s }, p6/z, [z13.s, #24]   // LDFF1H { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1H_D_IMM                  V1UnitL[2], V1UnitV[2],                           ldff1h	{ z27.d }, p2/z, [z5.d]        // LDFF1H { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1H_D_IMM                  V1UnitL[2], V1UnitV[2],                           ldff1h	{ z19.d }, p2/z, [z13.d, #14]  // LDFF1H { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1SB_H                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sb	{ z8.h }, p6/z, [x4]   // LDFF1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1SB_H                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sb	{ z9.h }, p6/z, [x6, x18]  // LDFF1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1SB_S                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sb	{ z29.s }, p2/z, [x6]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1SB_S                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sb	{ z25.s }, p6/z, [x29, x2]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1SB_D                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sb	{ z12.d }, p5/z, [x14]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1SB_D                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sb	{ z11.d }, p5/z, [x15, x5]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SB_D_SXTW                V1UnitL[2], V1UnitV[2],                           ldff1sb	{ z16.d }, p4/z, [x29, z8.d, sxtw]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     SE   GLDFF1SB_S_UXTW                V1UnitL, V1UnitV,                                 ldff1sb	{ z22.s }, p3/z, [x27, z24.s, uxtw]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SB_D                     V1UnitL[2], V1UnitV[2],                           ldff1sb	{ z7.d }, p0/z, [x11, z11.d]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1SB_S_IMM                 V1UnitL, V1UnitV,                                 ldff1sb	{ z18.s }, p6/z, [z28.s]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1SB_S_IMM                 V1UnitL, V1UnitV,                                 ldff1sb	{ z20.s }, p0/z, [z2.s, #16]  // LDFF1SB { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SB_D_IMM                 V1UnitL[2], V1UnitV[2],                           ldff1sb	{ z22.d }, p1/z, [z16.d]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SB_D_IMM                 V1UnitL[2], V1UnitV[2],                           ldff1sb	{ z25.d }, p6/z, [z9.d, #3]  // LDFF1SB { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1SH_S                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sh	{ z24.s }, p2/z, [x11]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1SH_S                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sh	{ z28.s }, p3/z, [x0, x26, lsl #1]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1SH_D                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sh	{ z31.d }, p7/z, [x13]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      7    7     2.00     SE   LDFF1SH_D                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sh	{ z6.d }, p4/z, [x11, x1, lsl #1]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous first faulting load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  4      11   11    1.50     SE   GLDFF1SH_S_UXTW_SCALED         V1UnitL[2], V1UnitV[2],                           ldff1sh	{ z1.s }, p1/z, [x26, z16.s, uxtw #1]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SH_D_SXTW_SCALED         V1UnitL[2], V1UnitV[2],                           ldff1sh	{ z28.d }, p4/z, [x13, z26.d, sxtw #1]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SH_D_UXTW                V1UnitL[2], V1UnitV[2],                           ldff1sh	{ z8.d }, p1/z, [x18, z17.d, uxtw]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     SE   GLDFF1SH_S_SXTW                V1UnitL, V1UnitV,                                 ldff1sh	{ z8.s }, p6/z, [x15, z1.s, sxtw]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SH_D_SCALED              V1UnitL[2], V1UnitV[2],                           ldff1sh	{ z22.d }, p1/z, [x9, z12.d, lsl #1]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SH_D                     V1UnitL[2], V1UnitV[2],                           ldff1sh	{ z29.d }, p3/z, [x19, z9.d]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1SH_S_IMM                 V1UnitL, V1UnitV,                                 ldff1sh	{ z13.s }, p3/z, [z5.s]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1SH_S_IMM                 V1UnitL, V1UnitV,                                 ldff1sh	{ z18.s }, p4/z, [z18.s, #22]  // LDFF1SH { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SH_D_IMM                 V1UnitL[2], V1UnitV[2],                           ldff1sh	{ z24.d }, p3/z, [z24.d]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SH_D_IMM                 V1UnitL[2], V1UnitV[2],                           ldff1sh	{ z31.d }, p3/z, [z9.d, #14]  // LDFF1SH { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1SW_D                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sw	{ z7.d }, p5/z, [x25]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1SW_D                      V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1sw	{ z17.d }, p1/z, [x16, x24, lsl #2]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SW_D_UXTW_SCALED         V1UnitL[2], V1UnitV[2],                           ldff1sw	{ z3.d }, p2/z, [x18, z5.d, uxtw #2]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SW_D_UXTW                V1UnitL[2], V1UnitV[2],                           ldff1sw	{ z9.d }, p3/z, [x27, z25.d, uxtw]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SW_D_SCALED              V1UnitL[2], V1UnitV[2],                           ldff1sw	{ z2.d }, p2/z, [x11, z9.d, lsl #2]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SW_D                     V1UnitL[2], V1UnitV[2],                           ldff1sw	{ z19.d }, p2/z, [x19, z21.d]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SW_D_IMM                 V1UnitL[2], V1UnitV[2],                           ldff1sw	{ z5.d }, p6/z, [z11.d]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1SW_D_IMM                 V1UnitL[2], V1UnitV[2],                           ldff1sw	{ z28.d }, p0/z, [z22.d, #76]  // LDFF1SW { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1W                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1w	{ z25.s }, p5/z, [x3]          // LDFF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1W                         V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1w	{ z27.s }, p7/z, [x0, x1, lsl #2]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1W_D                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1w	{ z20.d }, p3/z, [x2]          // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     2.00     SE   LDFF1W_D                       V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldff1w	{ z18.d }, p3/z, [x7, x21, lsl #2]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous first faulting load, scalar + scalar   \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  4      11   11    1.50     SE   GLDFF1W_UXTW_SCALED            V1UnitL[2], V1UnitV[2],                           ldff1w	{ z6.s }, p7/z, [x7, z8.s, uxtw #2]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 11  11  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1W_D_SXTW_SCALED          V1UnitL[2], V1UnitV[2],                           ldff1w	{ z20.d }, p0/z, [x9, z31.d, sxtw #2]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1W_D_SXTW                 V1UnitL[2], V1UnitV[2],                           ldff1w	{ z12.d }, p1/z, [x16, z31.d, sxtw]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      9    9     3.00     SE   GLDFF1W_SXTW                   V1UnitL, V1UnitV,                                 ldff1w	{ z6.s }, p4/z, [x11, z20.s, sxtw]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Zm>.S, <mod>]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 2 9  9  3.00 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1W_D_SCALED               V1UnitL[2], V1UnitV[2],                           ldff1w	{ z26.d }, p5/z, [x27, z27.d, lsl #2]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Gather load, 32-bit scaled offset  \\ 4 9  9  1.50 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1W_D                      V1UnitL[2], V1UnitV[2],                           ldff1w	{ z13.d }, p7/z, [x11, z23.d]  // LDFF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Zm>.D]  \\ Gather load, 32-bit unpacked unscaled offset  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1W_IMM                    V1UnitL, V1UnitV,                                 ldff1w	{ z0.s }, p5/z, [z18.s]        // LDFF1W { <Zt>.S }, <Pg>/Z, [<Zn>.S]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  2      11   11    3.00     SE   GLDFF1W_IMM                    V1UnitL, V1UnitV,                                 ldff1w	{ z28.s }, p4/z, [z10.s, #56]  // LDFF1W { <Zt>.S }, <Pg>/Z, [<Zn>.S, #<imm>]  \\ Gather load, vector + imm, 32-bit element size  \\ 2 11  11  3.00 V1UnitL[12],V1UnitV[12]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1W_D_IMM                  V1UnitL[2], V1UnitV[2],                           ldff1w	{ z6.d }, p7/z, [z31.d]        // LDFF1W { <Zt>.D }, <Pg>/Z, [<Zn>.D]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  4      9    9     1.50     SE   GLDFF1W_D_IMM                  V1UnitL[2], V1UnitV[2],                           ldff1w	{ z4.d }, p7/z, [z25.d, #40]   // LDFF1W { <Zt>.D }, <Pg>/Z, [<Zn>.D, #<imm>]  \\ Gather load, vector + imm, 64-bit element size  \\ 4 9  9  1.50 V1UnitL[6],V1UnitV[6]
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1B_IMM                     V1UnitL, V1UnitL01,                               ldnf1b	{ z12.b }, p4/z, [x10]         // LDNF1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1B_IMM                     V1UnitL, V1UnitL01,                               ldnf1b	{ z28.b }, p7/z, [x19, #1, mul vl]  // LDNF1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1B_H_IMM                   V1UnitL, V1UnitL01,                               ldnf1b	{ z6.h }, p4/z, [x5]           // LDNF1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1B_H_IMM                   V1UnitL, V1UnitL01,                               ldnf1b	{ z20.h }, p4/z, [x4, #2, mul vl]  // LDNF1B { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1B_S_IMM                   V1UnitL, V1UnitL01,                               ldnf1b	{ z22.s }, p1/z, [x0]          // LDNF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1B_S_IMM                   V1UnitL, V1UnitL01,                               ldnf1b	{ z18.s }, p4/z, [x11, #-3, mul vl]  // LDNF1B { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1B_D_IMM                   V1UnitL, V1UnitL01,                               ldnf1b	{ z25.d }, p4/z, [x20]         // LDNF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1B_D_IMM                   V1UnitL, V1UnitL01,                               ldnf1b	{ z16.d }, p4/z, [x6, #7, mul vl]  // LDNF1B { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1D_IMM                     V1UnitL, V1UnitL01,                               ldnf1d	{ z0.d }, p1/z, [x11]          // LDNF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1D_IMM                     V1UnitL, V1UnitL01,                               ldnf1d	{ z8.d }, p2/z, [x5]           // LDNF1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1H_IMM                     V1UnitL, V1UnitL01,                               ldnf1h	{ z31.h }, p3/z, [x22]         // LDNF1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1H_IMM                     V1UnitL, V1UnitL01,                               ldnf1h	{ z26.h }, p6/z, [x16, #-8, mul vl]  // LDNF1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1H_S_IMM                   V1UnitL, V1UnitL01,                               ldnf1h	{ z21.s }, p0/z, [x8]          // LDNF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1H_S_IMM                   V1UnitL, V1UnitL01,                               ldnf1h	{ z17.s }, p5/z, [x9, #-5, mul vl]  // LDNF1H { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1H_D_IMM                   V1UnitL, V1UnitL01,                               ldnf1h	{ z15.d }, p0/z, [x16]         // LDNF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1H_D_IMM                   V1UnitL, V1UnitL01,                               ldnf1h	{ z22.d }, p5/z, [x15, #-8, mul vl]  // LDNF1H { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SB_H_IMM                  V1UnitL, V1UnitL01,                               ldnf1sb	{ z21.h }, p7/z, [x0]  // LDNF1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SB_H_IMM                  V1UnitL, V1UnitL01,                               ldnf1sb	{ z17.h }, p6/z, [x11, #-5, mul vl]  // LDNF1SB { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SB_S_IMM                  V1UnitL, V1UnitL01,                               ldnf1sb	{ z14.s }, p6/z, [x26]  // LDNF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SB_S_IMM                  V1UnitL, V1UnitL01,                               ldnf1sb	{ z1.s }, p6/z, [x18, #-3, mul vl]  // LDNF1SB { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SB_D_IMM                  V1UnitL, V1UnitL01,                               ldnf1sb	{ z12.d }, p7/z, [x15]  // LDNF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SB_D_IMM                  V1UnitL, V1UnitL01,                               ldnf1sb	{ z30.d }, p4/z, [x23, #1, mul vl]  // LDNF1SB { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SH_S_IMM                  V1UnitL, V1UnitL01,                               ldnf1sh	{ z7.s }, p1/z, [x20]  // LDNF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SH_S_IMM                  V1UnitL, V1UnitL01,                               ldnf1sh	{ z26.s }, p4/z, [x15, #6, mul vl]  // LDNF1SH { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SH_D_IMM                  V1UnitL, V1UnitL01,                               ldnf1sh	{ z28.d }, p0/z, [x12]  // LDNF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SH_D_IMM                  V1UnitL, V1UnitL01,                               ldnf1sh	{ z21.d }, p2/z, [x13, #2, mul vl]  // LDNF1SH { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SW_D_IMM                  V1UnitL, V1UnitL01,                               ldnf1sw	{ z30.d }, p2/z, [x1]  // LDNF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1SW_D_IMM                  V1UnitL, V1UnitL01,                               ldnf1sw	{ z21.d }, p0/z, [x8, #-1, mul vl]  // LDNF1SW { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1W_IMM                     V1UnitL, V1UnitL01,                               ldnf1w	{ z26.s }, p0/z, [x8]          // LDNF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1W_IMM                     V1UnitL, V1UnitL01,                               ldnf1w	{ z2.s }, p2/z, [x1]           // LDNF1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1W_D_IMM                   V1UnitL, V1UnitL01,                               ldnf1w	{ z17.d }, p2/z, [x28]         // LDNF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     SE   LDNF1W_D_IMM                   V1UnitL, V1UnitL01,                               ldnf1w	{ z31.d }, p3/z, [x17, #-5, mul vl]  // LDNF1W { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous non faulting load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     3.00     -    LDNPSi                         V1UnitL,                                          ldnp	s21, s24, [x25]                // LDNP <St1>, <St2>, [<Xn|SP>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDNPSi                         V1UnitL,                                          ldnp	s16, s10, [x24, #-176]         // LDNP <St1>, <St2>, [<Xn|SP>, #<imm32>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDNPDi                         V1UnitL,                                          ldnp	d5, d27, [x16]                 // LDNP <Dt1>, <Dt2>, [<Xn|SP>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDNPDi                         V1UnitL,                                          ldnp	d31, d11, [x11, #-176]         // LDNP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     1.50     -    LDNPQi                         V1UnitL[2],                                       ldnp	q11, q25, [x2]                 // LDNP <Qt1>, <Qt2>, [<Xn|SP>]  \\ Load vector pair, immed offset, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  2      6    6     1.50     -    LDNPQi                         V1UnitL[2],                                       ldnp	q0, q8, [x12, #992]            // LDNP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]  \\ Load vector pair, immed offset, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  1      4    4     3.00     -    LDNPWi                         V1UnitL,                                          ldnp	w19, w9, [x25]                 // LDNP <Wt1>, <Wt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, normal, W-form  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDNPWi                         V1UnitL,                                          ldnp	w11, w28, [x20, #-4]           // LDNP <Wt1>, <Wt2>, [<Xn|SP>, #<imm32>]  \\ Load pair, signed immed offset, normal, W-form  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  2      4    4     1.50     -    LDNPXi                         V1UnitL[2],                                       ldnp	x20, x27, [x7]                 // LDNP <Xt1>, <Xt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, normal, X-form  \\ 2 4  4  1.50 V1UnitL[3]
# CHECK-NEXT:  2      4    4     1.50     -    LDNPXi                         V1UnitL[2],                                       ldnp	x20, x7, [x0, #-128]           // LDNP <Xt1>, <Xt2>, [<Xn|SP>, #<imm64>]  \\ Load pair, signed immed offset, normal, X-form  \\ 2 4  4  1.50 V1UnitL[3]
# CHECK-NEXT:  1      6    6     2.00     -    LDNT1B_ZRI                     V1UnitL, V1UnitL01,                               ldnt1b	{ z23.b }, p4/z, [x26]         // LDNT1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LDNT1B_ZRI                     V1UnitL, V1UnitL01,                               ldnt1b	{ z17.b }, p6/z, [x4, #-6, mul vl]  // LDNT1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  2      6    6     2.00     -    LDNT1B_ZRR                     V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldnt1b	{ z12.b }, p6/z, [x22, x7]     // LDNT1B { <Zt>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]  \\ Non temporal load, scalar + scalar  \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  1      6    6     2.00     -    LDNT1D_ZRI                     V1UnitL, V1UnitL01,                               ldnt1d	{ z11.d }, p6/z, [x8]          // LDNT1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LDNT1D_ZRI                     V1UnitL, V1UnitL01,                               ldnt1d	{ z17.d }, p6/z, [x10, #1, mul vl]  // LDNT1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  2      6    6     2.00     -    LDNT1D_ZRR                     V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldnt1d	{ z17.d }, p6/z, [x11, x1, lsl #3]  // LDNT1D { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #3]  \\ Non temporal load, scalar + scalar  \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  1      6    6     2.00     -    LDNT1H_ZRI                     V1UnitL, V1UnitL01,                               ldnt1h	{ z19.h }, p7/z, [x4]          // LDNT1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LDNT1H_ZRI                     V1UnitL, V1UnitL01,                               ldnt1h	{ z0.h }, p5/z, [x19, #-5, mul vl]  // LDNT1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  2      7    7     2.00     -    LDNT1H_ZRR                     V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldnt1h	{ z26.h }, p5/z, [x29, x25, lsl #1]  // LDNT1H { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #1]  \\ Non temporal load, scalar + scalar  \\ 2 7  7  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  1      6    6     2.00     -    LDNT1W_ZRI                     V1UnitL, V1UnitL01,                               ldnt1w	{ z3.s }, p0/z, [x3]           // LDNT1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LDNT1W_ZRI                     V1UnitL, V1UnitL01,                               ldnt1w	{ z20.s }, p0/z, [x29, #-6, mul vl]  // LDNT1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal load, scalar + imm  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  2      6    6     2.00     -    LDNT1W_ZRR                     V1UnitI, V1UnitL, V1UnitL01, V1UnitS,             ldnt1w	{ z22.s }, p2/z, [x18, x30, lsl #2]  // LDNT1W { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>, LSL #2]  \\ Non temporal load, scalar + scalar  \\ 2 6  6  2.0 V1UnitL01,V1UnitS
# CHECK-NEXT:  2      6    6     3.00     -    LDPSpost                       V1UnitI, V1UnitL,                                 ldp	s31, s21, [x19], #172          // LDP <St1>, <St2>, [<Xn|SP>], #<imm32>  \\ Load vector pair, immed post-index, S/D-form  \\ 2 6  6  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LDPDpost                       V1UnitI, V1UnitL,                                 ldp	d26, d19, [x17], #-264         // LDP <Dt1>, <Dt2>, [<Xn|SP>], #<imm64>  \\ Load vector pair, immed post-index, S/D-form  \\ 2 6  6  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  3      6    6     1.50     -    LDPQpost                       V1UnitI, V1UnitL[2],                              ldp	q27, q30, [x16], #96           // LDP <Qt1>, <Qt2>, [<Xn|SP>], #<imm128>  \\ Load vector pair, immed post-index, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDPSpre                        V1UnitI, V1UnitL,                                 ldp	s5, s25, [x29, #184]!          // LDP <St1>, <St2>, [<Xn|SP>, #<imm32>]!  \\ Load vector pair, immed pre-index, S/D-form  \\ 2 6  6  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LDPDpre                        V1UnitI, V1UnitL,                                 ldp	d18, d17, [x11, #440]!         // LDP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]!  \\ Load vector pair, immed pre-index, S/D-form  \\ 2 6  6  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  3      6    6     1.50     -    LDPQpre                        V1UnitI, V1UnitL[2],                              ldp	q27, q30, [x23, #448]!         // LDP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]!  \\ Load vector pair, immed pre-index, Q-form  \\ 3 6  6  1.50 V1UnitL[2],V1UnitI
# CHECK-NEXT:  1      6    6     3.00     -    LDPSi                          V1UnitL,                                          ldp	s16, s26, [x21, #-240]         // LDP <St1>, <St2>, [<Xn|SP>, #<imm32>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDPDi                          V1UnitL,                                          ldp	d16, d23, [x15, #-40]          // LDP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]  \\ Load vector pair, immed offset, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     1.50     -    LDPQi                          V1UnitL[2],                                       ldp	q1, q19, [x13]                 // LDP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]  \\ Load vector pair, immed offset, Q-form  \\ 2 6  6  1.50 V1UnitL[2]
# CHECK-NEXT:  2      4    4     3.00     -    LDPWpost                       V1UnitI, V1UnitL,                                 ldp	w19, w7, [x13], #-52           // LDP <Wt1>, <Wt2>, [<Xn|SP>], #<imm32>  \\ Load pair, immed post-index or immed pre-index, normal, W-form  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  3      4    4     1.50     -    LDPXpost                       V1UnitI, V1UnitL[2],                              ldp	x18, x14, [x9], #-56           // LDP <Xt1>, <Xt2>, [<Xn|SP>], #<imm64>  \\ Load pair, immed post-index or immed pre-index, normal, X-form  \\ 3 4  4  1.50 V1UnitL[3],V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDPWpre                        V1UnitI, V1UnitL,                                 ldp	w15, w13, [x1, #156]!          // LDP <Wt1>, <Wt2>, [<Xn|SP>, #<imm32>]!  \\ Load pair, immed post-index or immed pre-index, normal, W-form  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  3      4    4     1.50     -    LDPXpre                        V1UnitI, V1UnitL[2],                              ldp	x0, x23, [x4, #16]!            // LDP <Xt1>, <Xt2>, [<Xn|SP>, #<imm64>]!  \\ Load pair, immed post-index or immed pre-index, normal, X-form  \\ 3 4  4  1.50 V1UnitL[3],V1UnitI
# CHECK-NEXT:  1      4    4     3.00     -    LDPWi                          V1UnitL,                                          ldp	w13, w0, [x30]                 // LDP <Wt1>, <Wt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, normal, W-form  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDPWi                          V1UnitL,                                          ldp	w13, w30, [x16, #-144]         // LDP <Wt1>, <Wt2>, [<Xn|SP>, #<imm32>]  \\ Load pair, signed immed offset, normal, W-form  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  2      4    4     1.50     -    LDPXi                          V1UnitL[2],                                       ldp	x17, x15, [x26]                // LDP <Xt1>, <Xt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, normal, X-form  \\ 2 4  4  1.50 V1UnitL[3]
# CHECK-NEXT:  2      4    4     1.50     -    LDPXi                          V1UnitL[2],                                       ldp	x19, x26, [x30, #-272]         // LDP <Xt1>, <Xt2>, [<Xn|SP>, #<imm64>]  \\ Load pair, signed immed offset, normal, X-form  \\ 2 4  4  1.50 V1UnitL[3]
# CHECK-NEXT:  3      5    5     2.00     -    LDPSWpost                      V1UnitI[2], V1UnitL,                              ldpsw	x25, x16, [x12], #56           // LDPSW <Xt1>, <Xt2>, [<Xn|SP>], #<imm>  \\ Load pair, signed immed offset, signed words  \\ 3 5  5  2.00 V1UnitI,V1UnitL[3]
# CHECK-NEXT:  3      5    5     2.00     -    LDPSWpre                       V1UnitI[2], V1UnitL,                              ldpsw	x10, x1, [x3, #-112]!          // LDPSW <Xt1>, <Xt2>, [<Xn|SP>, #<imm>]!  \\ Load pair, signed immed offset, signed words  \\ 3 5  5  2.00 V1UnitI,V1UnitL[3]
# CHECK-NEXT:  2      5    5     3.00     -    LDPSWi                         V1UnitI, V1UnitL,                                 ldpsw	x13, x7, [x23]                 // LDPSW <Xt1>, <Xt2>, [<Xn|SP>]  \\ Load pair, signed immed offset, signed words  \\ 2 5  5  3.00 V1UnitI,V1UnitL[3]
# CHECK-NEXT:  2      5    5     3.00     -    LDPSWi                         V1UnitI, V1UnitL,                                 ldpsw	x28, x27, [x4, #72]            // LDPSW <Xt1>, <Xt2>, [<Xn|SP>, #<imm>]  \\ Load pair, signed immed offset, signed words  \\ 2 5  5  3.00 V1UnitI,V1UnitL[3]
# CHECK-NEXT:  2      4    4     3.00     -    LDRWpost                       V1UnitI, V1UnitL,                                 ldr	w24, [x30], #-64               // LDR <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRXpost                       V1UnitI, V1UnitL,                                 ldr	x8, [x2], #123                 // LDR <Xt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRWpre                        V1UnitI, V1UnitL,                                 ldr	w2, [x0, #39]!                 // LDR <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRXpre                        V1UnitI, V1UnitL,                                 ldr	x27, [x11, #173]!              // LDR <Xt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      4    4     3.00     -    LDRWui                         V1UnitL,                                          ldr	w20, [x27, #12924]             // LDR <Wt>, [<Xn|SP>, #<pimm32>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXui                         V1UnitL,                                          ldr	x28, [x27, #1296]              // LDR <Xt>, [<Xn|SP>, #<pimm64>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     3.00     -    LDRBpost                       V1UnitI, V1UnitL,                                 ldr	b21, [x20], #-30               // LDR <Bt>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDRHpost                       V1UnitI, V1UnitL,                                 ldr	h9, [x26], #132                // LDR <Ht>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDRSpost                       V1UnitI, V1UnitL,                                 ldr	s23, [x30], #-209              // LDR <St>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDRDpost                       V1UnitI, V1UnitL,                                 ldr	d12, [x12], #-248              // LDR <Dt>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDRQpost                       V1UnitI, V1UnitL,                                 ldr	q16, [x4], #-10                // LDR <Qt>, [<Xn|SP>], #<simm>  \\ Load vector reg, immed post-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDRBpre                        V1UnitI, V1UnitL,                                 ldr	b16, [x10, #-174]!             // LDR <Bt>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDRHpre                        V1UnitI, V1UnitL,                                 ldr	h29, [x19, #-60]!              // LDR <Ht>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDRSpre                        V1UnitI, V1UnitL,                                 ldr	s6, [x27, #-215]!              // LDR <St>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDRDpre                        V1UnitI, V1UnitL,                                 ldr	d9, [x6, #-175]!               // LDR <Dt>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      6    6     3.00     -    LDRQpre                        V1UnitI, V1UnitL,                                 ldr	q11, [x21, #62]!               // LDR <Qt>, [<Xn|SP>, #<simm>]!  \\ Load vector reg, immed pre-index  \\ 2 6  6  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      6    6     3.00     -    LDRBui                         V1UnitL,                                          ldr	b25, [x20, #2868]              // LDR <Bt>, [<Xn|SP>, #<pimmb>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRHui                         V1UnitL,                                          ldr	h12, [x18, #2440]              // LDR <Ht>, [<Xn|SP>, #<pimmh>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSui                         V1UnitL,                                          ldr	s20, [x27, #1372]              // LDR <St>, [<Xn|SP>, #<pimms>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDui                         V1UnitL,                                          ldr	d25, [x15, #3120]              // LDR <Dt>, [<Xn|SP>, #<pimmd>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRQui                         V1UnitL,                                          ldr	q7, [x7, #9936]                // LDR <Qt>, [<Xn|SP>, #<pimmq>]  \\ Load vector reg, unsigned immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRWl                          V1UnitL,                                          ldr	w17, test                      // LDR <Wt>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXl                          V1UnitL,                                          ldr	x4, test                       // LDR <Xt>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSl                          V1UnitL,                                          ldr	s19, test                      // LDR <St>, <label>  \\ Load vector reg, literal, S/D/Q forms  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDl                          V1UnitL,                                          ldr	d7, test                       // LDR <Dt>, <label>  \\ Load vector reg, literal, S/D/Q forms  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRQl                          V1UnitL,                                          ldr	q10, test                      // LDR <Qt>, <label>  \\ Load vector reg, literal, S/D/Q forms  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      6    6     2.00     -    LDR_PXI                        V1UnitI, V1UnitL, V1UnitM,                        ldr	p3, [x5]                       // LDR <Pt>, [<Xn|SP>]  \\ Load predicate  \\ 2 6  6  2.0 V1UnitL,V1UnitM
# CHECK-NEXT:  2      6    6     2.00     -    LDR_PXI                        V1UnitI, V1UnitL, V1UnitM,                        ldr	p1, [x1, #147, mul vl]         // LDR <Pt>, [<Xn|SP>, #<imm>, MUL VL]  \\ Load predicate  \\ 2 6  6  2.0 V1UnitL,V1UnitM
# CHECK-NEXT:  1      4    4     3.00     -    LDRWroX                        V1UnitL,                                          ldr	w9, [x17, x20]                 // LDR <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXroX                        V1UnitL,                                          ldr	x16, [x11, x21]                // LDR <Xt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRWroW                        V1UnitL,                                          ldr	w10, [x0, w12, uxtw]           // LDR <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXroW                        V1UnitL,                                          ldr	x14, [x23, w3, uxtw]           // LDR <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRWroW                        V1UnitL,                                          ldr	w14, [x27, w7, uxtw #2]        // LDR <Wt>, [<Xn|SP>, <Wm>, UXTW #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXroW                        V1UnitL,                                          ldr	x6, [x8, w16, uxtw #3]         // LDR <Xt>, [<Xn|SP>, <Wm>, UXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRWroW                        V1UnitL,                                          ldr	w15, [x10, w30, sxtw]          // LDR <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXroW                        V1UnitL,                                          ldr	x20, [x6, w23, sxtw]           // LDR <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRWroW                        V1UnitL,                                          ldr	w11, [x25, w29, sxtw #2]       // LDR <Wt>, [<Xn|SP>, <Wm>, SXTW #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXroW                        V1UnitL,                                          ldr	x3, [x14, w8, sxtw #3]         // LDR <Xt>, [<Xn|SP>, <Wm>, SXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRWroX                        V1UnitL,                                          ldr	w11, [x13, x4, sxtx]           // LDR <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXroX                        V1UnitL,                                          ldr	x9, [x18, x17, sxtx]           // LDR <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRWroX                        V1UnitL,                                          ldr	w18, [x23, x19, sxtx #2]       // LDR <Wt>, [<Xn|SP>, <Xm>, SXTX #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXroX                        V1UnitL,                                          ldr	x28, [x11, x22, sxtx #3]       // LDR <Xt>, [<Xn|SP>, <Xm>, SXTX #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRWroX                        V1UnitL,                                          ldr	w17, [x22, x17, lsl #2]        // LDR <Wt>, [<Xn|SP>, <Xm>, LSL #2]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRXroX                        V1UnitL,                                          ldr	x3, [x18, x27, lsl #3]         // LDR <Xt>, [<Xn|SP>, <Xm>, LSL #3]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRBroX                        V1UnitL,                                          ldr	b24, [x22, x1]                 // LDR <Bt>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRBroW                        V1UnitL,                                          ldr	b10, [x2, w4, uxtw]            // LDR <Bt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRBroW                        V1UnitL,                                          ldr	b22, [x29, w23, sxtw]          // LDR <Bt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRBroX                        V1UnitL,                                          ldr	b10, [x5, x27, sxtx]           // LDR <Bt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRHroX                        V1UnitI, V1UnitL,                                 ldr	h29, [x20, x30]                // LDR <Ht>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 2 7  7  3.00 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRHroW                        V1UnitI, V1UnitL,                                 ldr	h21, [x5, w1, uxtw]            // LDR <Ht>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRHroW                        V1UnitI, V1UnitL,                                 ldr	h3, [x10, w30, sxtw]           // LDR <Ht>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRHroX                        V1UnitI, V1UnitL,                                 ldr	h5, [x22, x29, sxtx]           // LDR <Ht>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRHroW                        V1UnitI, V1UnitL,                                 ldr	h20, [x27, w1, uxtw #1]        // LDR <Ht>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRHroW                        V1UnitI, V1UnitL,                                 ldr	h22, [x15, w1, sxtw #1]        // LDR <Ht>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRHroX                        V1UnitI, V1UnitL,                                 ldr	h29, [x2, x13, sxtx #1]        // LDR <Ht>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRHroX                        V1UnitI, V1UnitL,                                 ldr	h8, [x25, x21, lsl #1]         // LDR <Ht>, [<Xn|SP>, <Xm>, LSL #1]  \\ Load vector reg, register offset, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSroX                        V1UnitL,                                          ldr	s11, [x2, x11]                 // LDR <St>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSroW                        V1UnitL,                                          ldr	s6, [x2, w20, uxtw]            // LDR <St>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSroW                        V1UnitL,                                          ldr	s5, [x6, w3, sxtw]             // LDR <St>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSroX                        V1UnitL,                                          ldr	s1, [x30, x21, sxtx]           // LDR <St>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSroW                        V1UnitL,                                          ldr	s9, [x25, w3, uxtw #2]         // LDR <St>, [<Xn|SP>, <Wm>, UXTW #2]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSroW                        V1UnitL,                                          ldr	s0, [x27, w28, sxtw #2]        // LDR <St>, [<Xn|SP>, <Wm>, SXTW #2]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSroX                        V1UnitL,                                          ldr	s20, [x17, x9, sxtx #2]        // LDR <St>, [<Xn|SP>, <Xm>, SXTX #2]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRSroX                        V1UnitL,                                          ldr	s14, [x19, x10, lsl #2]        // LDR <St>, [<Xn|SP>, <Xm>, LSL #2]  \\ Load vector reg, register offset, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDroX                        V1UnitL,                                          ldr	d15, [x6, x17]                 // LDR <Dt>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDroW                        V1UnitL,                                          ldr	d3, [x25, w19, uxtw]           // LDR <Dt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDroW                        V1UnitL,                                          ldr	d21, [x17, w21, sxtw]          // LDR <Dt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDroX                        V1UnitL,                                          ldr	d11, [x26, x0, sxtx]           // LDR <Dt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDroW                        V1UnitL,                                          ldr	d27, [x10, w20, uxtw #3]       // LDR <Dt>, [<Xn|SP>, <Wm>, UXTW #3]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDroW                        V1UnitL,                                          ldr	d24, [x15, w13, sxtw #3]       // LDR <Dt>, [<Xn|SP>, <Wm>, SXTW #3]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDroX                        V1UnitL,                                          ldr	d18, [x16, x9, sxtx #3]        // LDR <Dt>, [<Xn|SP>, <Xm>, SXTX #3]  \\ Load vector reg, register offset, extend, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDRDroX                        V1UnitL,                                          ldr	d23, [x19, x15, lsl #3]        // LDR <Dt>, [<Xn|SP>, <Xm>, LSL #3]  \\ Load vector reg, register offset, scale, S/D-form  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRQroX                        V1UnitI, V1UnitL,                                 ldr	q31, [x21, x24]                // LDR <Qt>, [<Xn|SP>, <Xm>]  \\ Load vector reg, register offset, basic  \\ 2 7  7  3.00 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRQroW                        V1UnitI, V1UnitL,                                 ldr	q11, [x20, w0, uxtw]           // LDR <Qt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRQroW                        V1UnitI, V1UnitL,                                 ldr	q27, [x23, w9, sxtw]           // LDR <Qt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRQroX                        V1UnitI, V1UnitL,                                 ldr	q3, [x18, x27, sxtx]           // LDR <Qt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load vector reg, register offset, extend  \\ 2 7  7  3.00 V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRQroW                        V1UnitI, V1UnitL,                                 ldr	q26, [x6, w27, uxtw #4]        // LDR <Qt>, [<Xn|SP>, <Wm>, UXTW #4]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRQroW                        V1UnitI, V1UnitL,                                 ldr	q31, [x19, w9, sxtw #4]        // LDR <Qt>, [<Xn|SP>, <Wm>, SXTW #4]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRQroX                        V1UnitI, V1UnitL,                                 ldr	q23, [x9, x16, sxtx #4]        // LDR <Qt>, [<Xn|SP>, <Xm>, SXTX #4]  \\ Load vector reg, register offset, extend, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  2      7    7     3.00     -    LDRQroX                        V1UnitI, V1UnitL,                                 ldr	q11, [x21, x2, lsl #4]         // LDR <Qt>, [<Xn|SP>, <Xm>, LSL #4]  \\ Load vector reg, register offset, scale, H/Q-form  \\ 2 7  7  3.0 V1UnitI,V1UnitL
# CHECK-NEXT:  1      6    6     2.00     -    LDR_ZXI                        V1UnitL, V1UnitL01,                               ldr	z18, [x27]                     // LDR <Zt>, [<Xn|SP>]  \\ Load vector  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  1      6    6     2.00     -    LDR_ZXI                        V1UnitL, V1UnitL01,                               ldr	z20, [x17, #-88, mul vl]       // LDR <Zt>, [<Xn|SP>, #<imm>, MUL VL]  \\ Load vector  \\ 1 6  6  2.0 V1UnitL01
# CHECK-NEXT:  2      4    4     3.00     -    LDRBBpost                      V1UnitI, V1UnitL,                                 ldrb	w21, [x15], #-173              // LDRB <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRBBpre                       V1UnitI, V1UnitL,                                 ldrb	w26, [x21, #-25]!              // LDRB <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      4    4     3.00     -    LDRBBui                        V1UnitL,                                          ldrb	w0, [x6]                       // LDRB <Wt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRBBui                        V1UnitL,                                          ldrb	w24, [x26, #4049]              // LDRB <Wt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRBBroX                       V1UnitL,                                          ldrb	w19, [x28, x24]                // LDRB <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRBBroW                       V1UnitL,                                          ldrb	w27, [x5, w28, uxtw]           // LDRB <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRBBroW                       V1UnitL,                                          ldrb	w19, [x19, w20, sxtw]          // LDRB <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRBBroX                       V1UnitL,                                          ldrb	w15, [x19, x3, sxtx]           // LDRB <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  2      4    4     3.00     -    LDRHHpost                      V1UnitI, V1UnitL,                                 ldrh	w19, [x11], #-92               // LDRH <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRHHpre                       V1UnitI, V1UnitL,                                 ldrh	w17, [x25, #132]!              // LDRH <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHui                        V1UnitL,                                          ldrh	w15, [x17]                     // LDRH <Wt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHui                        V1UnitL,                                          ldrh	w29, [x22, #3006]              // LDRH <Wt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHroX                       V1UnitL,                                          ldrh	w10, [x15, x19]                // LDRH <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHroW                       V1UnitL,                                          ldrh	w24, [x7, w28, uxtw]           // LDRH <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHroW                       V1UnitL,                                          ldrh	w23, [x20, w12, sxtw]          // LDRH <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHroX                       V1UnitL,                                          ldrh	w29, [x5, x6, sxtx]            // LDRH <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHroW                       V1UnitL,                                          ldrh	w14, [x26, w18, uxtw #1]       // LDRH <Wt>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHroW                       V1UnitL,                                          ldrh	w26, [x12, w11, sxtw #1]       // LDRH <Wt>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHroX                       V1UnitL,                                          ldrh	w15, [x12, x21, sxtx #1]       // LDRH <Wt>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRHHroX                       V1UnitL,                                          ldrh	w4, [x22, x16, lsl #1]         // LDRH <Wt>, [<Xn|SP>, <Xm>, LSL #1]  \\ Load register, register offset, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  2      4    4     3.00     -    LDRSBWpost                     V1UnitI, V1UnitL,                                 ldrsb	w7, [x26], #89                 // LDRSB <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRSBXpost                     V1UnitI, V1UnitL,                                 ldrsb	x30, [x22], #-66               // LDRSB <Xt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRSBWpre                      V1UnitI, V1UnitL,                                 ldrsb	w0, [x14, #-134]!              // LDRSB <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRSBXpre                      V1UnitI, V1UnitL,                                 ldrsb	x23, [x8, #-156]!              // LDRSB <Xt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBWui                       V1UnitL,                                          ldrsb	w10, [x7]                      // LDRSB <Wt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBWui                       V1UnitL,                                          ldrsb	w26, [x24, #1989]              // LDRSB <Wt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBXui                       V1UnitL,                                          ldrsb	x3, [x22]                      // LDRSB <Xt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBXui                       V1UnitL,                                          ldrsb	x17, [x1, #3772]               // LDRSB <Xt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBWroX                      V1UnitL,                                          ldrsb	w2, [x11, x20]                 // LDRSB <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBWroW                      V1UnitL,                                          ldrsb	w25, [x27, w17, uxtw]          // LDRSB <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBWroW                      V1UnitL,                                          ldrsb	w18, [x21, w7, sxtw]           // LDRSB <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBWroX                      V1UnitL,                                          ldrsb	w19, [x1, x12, sxtx]           // LDRSB <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBXroX                      V1UnitL,                                          ldrsb	x29, [x17, x10]                // LDRSB <Xt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBXroW                      V1UnitL,                                          ldrsb	x3, [x20, w22, uxtw]           // LDRSB <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBXroW                      V1UnitL,                                          ldrsb	x27, [x27, w2, sxtw]           // LDRSB <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSBXroX                      V1UnitL,                                          ldrsb	x10, [x8, x29, sxtx]           // LDRSB <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  2      4    4     3.00     -    LDRSHWpost                     V1UnitI, V1UnitL,                                 ldrsh	w22, [x0], #106                // LDRSH <Wt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRSHXpost                     V1UnitI, V1UnitL,                                 ldrsh	x8, [x6], #-154                // LDRSH <Xt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRSHWpre                      V1UnitI, V1UnitL,                                 ldrsh	w12, [x9, #58]!                // LDRSH <Wt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRSHXpre                      V1UnitI, V1UnitL,                                 ldrsh	x25, [x6, #104]!               // LDRSH <Xt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWui                       V1UnitL,                                          ldrsh	w2, [x20]                      // LDRSH <Wt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWui                       V1UnitL,                                          ldrsh	w24, [x16, #7878]              // LDRSH <Wt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXui                       V1UnitL,                                          ldrsh	x12, [x11]                     // LDRSH <Xt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXui                       V1UnitL,                                          ldrsh	x0, [x24, #7962]               // LDRSH <Xt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWroX                      V1UnitL,                                          ldrsh	w27, [x16, x30]                // LDRSH <Wt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWroW                      V1UnitL,                                          ldrsh	w7, [x29, w21, uxtw]           // LDRSH <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWroW                      V1UnitL,                                          ldrsh	w6, [x9, w22, sxtw]            // LDRSH <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWroX                      V1UnitL,                                          ldrsh	w10, [x21, x0, sxtx]           // LDRSH <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWroW                      V1UnitL,                                          ldrsh	w19, [x23, w22, uxtw #1]       // LDRSH <Wt>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWroW                      V1UnitL,                                          ldrsh	w3, [x20, w2, sxtw #1]         // LDRSH <Wt>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWroX                      V1UnitL,                                          ldrsh	w25, [x15, x14, sxtx #1]       // LDRSH <Wt>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHWroX                      V1UnitL,                                          ldrsh	w12, [x26, x5, lsl #1]         // LDRSH <Wt>, [<Xn|SP>, <Xm>, LSL #1]  \\ Load register, register offset, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXroX                      V1UnitL,                                          ldrsh	x10, [x27, x15]                // LDRSH <Xt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXroW                      V1UnitL,                                          ldrsh	x6, [x18, w28, uxtw]           // LDRSH <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXroW                      V1UnitL,                                          ldrsh	x0, [x5, w23, sxtw]            // LDRSH <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXroX                      V1UnitL,                                          ldrsh	x16, [x29, x17, sxtx]          // LDRSH <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXroW                      V1UnitL,                                          ldrsh	x28, [x25, w10, uxtw #1]       // LDRSH <Xt>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXroW                      V1UnitL,                                          ldrsh	x9, [x24, w24, sxtw #1]        // LDRSH <Xt>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXroX                      V1UnitL,                                          ldrsh	x6, [x23, x1, sxtx #1]         // LDRSH <Xt>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Load register, register offset, extend, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSHXroX                      V1UnitL,                                          ldrsh	x27, [x23, x6, lsl #1]         // LDRSH <Xt>, [<Xn|SP>, <Xm>, LSL #1]  \\ Load register, register offset, scale by 2  \\ 1 4  4  3.00 V1UnitI,V1UnitL
# CHECK-NEXT:  2      4    4     3.00     -    LDRSWpost                      V1UnitI, V1UnitL,                                 ldrsw	x17, [x28], #132               // LDRSW <Xt>, [<Xn|SP>], #<simm>  \\ Load register, immed post-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  2      4    4     3.00     -    LDRSWpre                       V1UnitI, V1UnitL,                                 ldrsw	x28, [x8, #-244]!              // LDRSW <Xt>, [<Xn|SP>, #<simm>]!  \\ Load register, immed pre-index  \\ 2 4  4  3.0 V1UnitL,V1UnitI
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWui                        V1UnitL,                                          ldrsw	x4, [x18]                      // LDRSW <Xt>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWui                        V1UnitL,                                          ldrsw	x9, [x17, #4308]               // LDRSW <Xt>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWl                         V1UnitL,                                          ldrsw	x6, test                       // LDRSW <Xt>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWroX                       V1UnitL,                                          ldrsw	x0, [x0, x5]                   // LDRSW <Xt>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWroW                       V1UnitL,                                          ldrsw	x20, [x24, w20, uxtw]          // LDRSW <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWroW                       V1UnitL,                                          ldrsw	x20, [x14, w20, sxtw]          // LDRSW <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWroX                       V1UnitL,                                          ldrsw	x30, [x3, x12, sxtx]           // LDRSW <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWroW                       V1UnitL,                                          ldrsw	x17, [x18, w16, uxtw #2]       // LDRSW <Xt>, [<Xn|SP>, <Wm>, UXTW #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWroW                       V1UnitL,                                          ldrsw	x17, [x14, w11, sxtw #2]       // LDRSW <Xt>, [<Xn|SP>, <Wm>, SXTW #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWroX                       V1UnitL,                                          ldrsw	x18, [x1, x29, sxtx #2]        // LDRSW <Xt>, [<Xn|SP>, <Xm>, SXTX #2]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDRSWroX                       V1UnitL,                                          ldrsw	x11, [x16, x1, lsl #2]         // LDRSW <Xt>, [<Xn|SP>, <Xm>, LSL #2]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRWi                         V1UnitL,                                          ldtr	w5, [x29]                      // LDTR <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRWi                         V1UnitL,                                          ldtr	w24, [x16, #41]                // LDTR <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRXi                         V1UnitL,                                          ldtr	x24, [x10]                     // LDTR <Xt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRXi                         V1UnitL,                                          ldtr	x30, [x6, #232]                // LDTR <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRBi                         V1UnitL,                                          ldtrb	w10, [x1]                      // LDTRB <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRBi                         V1UnitL,                                          ldtrb	w19, [x19, #-79]               // LDTRB <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRHi                         V1UnitL,                                          ldtrh	w20, [x30]                     // LDTRH <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRHi                         V1UnitL,                                          ldtrh	w28, [x1, #-22]                // LDTRH <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSBWi                       V1UnitL,                                          ldtrsb	w2, [x25]                      // LDTRSB <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSBWi                       V1UnitL,                                          ldtrsb	w20, [x16, #251]               // LDTRSB <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSBXi                       V1UnitL,                                          ldtrsb	x7, [x5]                       // LDTRSB <Xt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSBXi                       V1UnitL,                                          ldtrsb	x20, [x22, #-29]               // LDTRSB <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSHWi                       V1UnitL,                                          ldtrsh	w1, [x7]                       // LDTRSH <Wt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSHWi                       V1UnitL,                                          ldtrsh	w8, [x30, #-106]               // LDTRSH <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSHXi                       V1UnitL,                                          ldtrsh	x21, [x14]                     // LDTRSH <Xt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSHXi                       V1UnitL,                                          ldtrsh	x26, [x27, #50]                // LDTRSH <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSWi                        V1UnitL,                                          ldtrsw	x14, [x20]                     // LDTRSW <Xt>, [<Xn|SP>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDTRSWi                        V1UnitL,                                          ldtrsw	x20, [x30, #-233]              // LDTRSW <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, immed unprivileged  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURBi                         V1UnitL,                                          ldur	b21, [x30]                     // LDUR <Bt>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURBi                         V1UnitL,                                          ldur	b29, [x27, #-149]              // LDUR <Bt>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURHi                         V1UnitL,                                          ldur	h14, [x27]                     // LDUR <Ht>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURHi                         V1UnitL,                                          ldur	h7, [x6, #4]                   // LDUR <Ht>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURSi                         V1UnitL,                                          ldur	s23, [x24]                     // LDUR <St>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURSi                         V1UnitL,                                          ldur	s9, [x3, #-251]                // LDUR <St>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURDi                         V1UnitL,                                          ldur	d6, [x3]                       // LDUR <Dt>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURDi                         V1UnitL,                                          ldur	d0, [x3, #-191]                // LDUR <Dt>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURQi                         V1UnitL,                                          ldur	q19, [x23]                     // LDUR <Qt>, [<Xn|SP>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      6    6     3.00     -    LDURQi                         V1UnitL,                                          ldur	q9, [x13, #179]                // LDUR <Qt>, [<Xn|SP>, #<simm>]  \\ Load vector reg, unscaled immed  \\ 1 6  6  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURWi                         V1UnitL,                                          ldur	w27, [x5]                      // LDUR <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURWi                         V1UnitL,                                          ldur	w3, [x29, #233]                // LDUR <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURXi                         V1UnitL,                                          ldur	x2, [x28]                      // LDUR <Xt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURXi                         V1UnitL,                                          ldur	x21, [x1, #147]                // LDUR <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURBBi                        V1UnitL,                                          ldurb	w20, [x21]                     // LDURB <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURBBi                        V1UnitL,                                          ldurb	w26, [x0, #-71]                // LDURB <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURHHi                        V1UnitL,                                          ldurh	w9, [x4]                       // LDURH <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURHHi                        V1UnitL,                                          ldurh	w7, [x1, #-173]                // LDURH <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSBWi                       V1UnitL,                                          ldursb	w8, [x18]                      // LDURSB <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSBWi                       V1UnitL,                                          ldursb	w9, [x19, #-21]                // LDURSB <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSBXi                       V1UnitL,                                          ldursb	x2, [x24]                      // LDURSB <Xt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSBXi                       V1UnitL,                                          ldursb	x26, [x14, #-38]               // LDURSB <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSHWi                       V1UnitL,                                          ldursh	w27, [x11]                     // LDURSH <Wt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSHWi                       V1UnitL,                                          ldursh	w3, [x22, #239]                // LDURSH <Wt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSHXi                       V1UnitL,                                          ldursh	x26, [x15]                     // LDURSH <Xt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSHXi                       V1UnitL,                                          ldursh	x15, [x3, #-210]               // LDURSH <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSWi                        V1UnitL,                                          ldursw	x8, [x12]                      // LDURSW <Xt>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     -    LDURSWi                        V1UnitL,                                          ldursw	x11, [x11, #199]               // LDURSW <Xt>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  2      4    4     1.50     SE   LDXPW                          V1UnitL[2],                                       ldxp	w17, w0, [x21]                 // LDXP <Wt1>, <Wt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      4    4     1.50     SE   LDXPW                          V1UnitL[2],                                       ldxp	w21, w15, [x9]                 // LDXP <Wt1>, <Wt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      4    4     1.50     SE   LDXPX                          V1UnitL[2],                                       ldxp	x28, x27, [x27]                // LDXP <Xt1>, <Xt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      4    4     1.50     SE   LDXPX                          V1UnitL[2],                                       ldxp	x30, x18, [x14]                // LDXP <Xt1>, <Xt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDXRW                          V1UnitL,                                          ldxr	w27, [x12]                     // LDXR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDXRW                          V1UnitL,                                          ldxr	w28, [x14]                     // LDXR <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDXRX                          V1UnitL,                                          ldxr	x25, [x27]                     // LDXR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDXRX                          V1UnitL,                                          ldxr	x23, [x0]                      // LDXR <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDXRB                          V1UnitL,                                          ldxrb	w10, [x5]                      // LDXRB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDXRB                          V1UnitL,                                          ldxrb	w0, [x0]                       // LDXRB <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDXRH                          V1UnitL,                                          ldxrh	w14, [x6]                      // LDXRH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   LDXRH                          V1UnitL,                                          ldxrh	w1, [x3]                       // LDXRH <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    UBFMWri                        V1UnitI,                                          lsl	w18, w2, #26                   // LSL <Wd>, <Wn>, #<shifts>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    UBFMXri                        V1UnitI,                                          lsl	x2, x23, #15                   // LSL <Xd>, <Xn>, #<shiftd>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZPmI_B                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z0.b, p1/m, z0.b, #2           // LSL <Zdn>.B, <Pg>/M, <Zdn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZPmI_H                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z17.h, p5/m, z17.h, #5         // LSL <Zdn>.H, <Pg>/M, <Zdn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZPmI_S                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z23.s, p1/m, z23.s, #5         // LSL <Zdn>.S, <Pg>/M, <Zdn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZPmI_D                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z10.d, p2/m, z10.d, #18        // LSL <Zdn>.D, <Pg>/M, <Zdn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZZI_B                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z29.b, z27.b, #2               // LSL <Zd>.B, <Zn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZZI_H                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z31.h, z8.h, #5                // LSL <Zd>.H, <Zn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZZI_S                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z29.s, z19.s, #7               // LSL <Zd>.S, <Zn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZZI_D                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z4.d, z23.d, #26               // LSL <Zd>.D, <Zn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      1    1     4.00     -    LSLVWr                         V1UnitI,                                          lsl	w24, w1, w29                   // LSL <Wd>, <Wn>, <Wm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    LSLVXr                         V1UnitI,                                          lsl	x7, x21, x6                    // LSL <Xd>, <Xn>, <Xm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZPmZ_D                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z29.d, p3/m, z29.d, z7.d       // LSL <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSL_ZPmZ_D                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z2.d, p2/m, z2.d, z3.d         // LSL <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSL_WIDE_ZZZ_S                 V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsl	z11.s, z17.s, z2.d             // LSL <Zd>.<T>, <Zn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSLR_ZPmZ_D                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lslr	z7.d, p5/m, z7.d, z9.d         // LSLR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      1    1     4.00     -    LSLVWr                         V1UnitI,                                          lsl	w7, w18, w22                   // LSLV <Wd>, <Wn>, <Wm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    LSLVXr                         V1UnitI,                                          lsl	x14, x26, x7                   // LSLV <Xd>, <Xn>, <Xm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    UBFMWri                        V1UnitI,                                          lsr	w19, w8, #24                   // LSR <Wd>, <Wn>, #<shifts>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    UBFMXri                        V1UnitI,                                          lsr	x18, x29, #57                  // LSR <Xd>, <Xn>, #<shiftd>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     1.00     -    LSR_ZPmI_B                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z5.b, p7/m, z5.b, #3           // LSR <Zdn>.B, <Pg>/M, <Zdn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSR_ZPmI_H                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z16.h, p2/m, z16.h, #2         // LSR <Zdn>.H, <Pg>/M, <Zdn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSR_ZPmI_S                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z27.s, p4/m, z27.s, #13        // LSR <Zdn>.S, <Pg>/M, <Zdn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSR_ZPmI_D                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z23.d, p2/m, z23.d, #20        // LSR <Zdn>.D, <Pg>/M, <Zdn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSR_ZZI_B                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z2.b, z5.b, #1                 // LSR <Zd>.B, <Zn>.B, #<constb>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSR_ZZI_H                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z15.h, z14.h, #7               // LSR <Zd>.H, <Zn>.H, #<consth>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSR_ZZI_S                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z0.s, z21.s, #2                // LSR <Zd>.S, <Zn>.S, #<consts>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSR_ZZI_D                      V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z23.d, z26.d, #24              // LSR <Zd>.D, <Zn>.D, #<constd>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      1    1     4.00     -    LSRVWr                         V1UnitI,                                          lsr	w13, w30, w12                  // LSR <Wd>, <Wn>, <Wm>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    LSRVXr                         V1UnitI,                                          lsr	x20, x24, x1                   // LSR <Xd>, <Xn>, <Xm>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     1.00     -    LSR_ZPmZ_B                     V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z10.b, p6/m, z10.b, z2.b       // LSR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSR_WIDE_ZPmZ_B                V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z12.b, p3/m, z12.b, z29.d      // LSR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSR_WIDE_ZZZ_B                 V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsr	z3.b, z24.b, z17.d             // LSR <Zd>.<T>, <Zn>.<T>, <Zm>.D  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    LSRR_ZPmZ_H                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          lsrr	z28.h, p5/m, z28.h, z29.h      // LSRR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, shift  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      1    1     4.00     -    LSRVWr                         V1UnitI,                                          lsr	w8, w29, w13                   // LSRV <Wd>, <Wn>, <Wm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    LSRVXr                         V1UnitI,                                          lsr	x23, x3, x19                   // LSRV <Xd>, <Xn>, <Xm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      4    4     1.00     -    MAD_ZPmZZ_B                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mad	z10.b, p5/m, z27.b, z0.b       // MAD <Zdn>.B, <Pg>/M, <Zm>.B, <Za>.B  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MAD_ZPmZZ_H                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mad	z4.h, p3/m, z10.h, z12.h       // MAD <Zdn>.H, <Pg>/M, <Zm>.H, <Za>.H  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MAD_ZPmZZ_S                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mad	z10.s, p4/m, z28.s, z12.s      // MAD <Zdn>.S, <Pg>/M, <Zm>.S, <Za>.S  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  2      5    2     0.50     -    MAD_ZPmZZ_D                    V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   mad	z22.d, p5/m, z2.d, z25.d  // MAD <Zdn>.D, <Pg>/M, <Zm>.D, <Za>.D  \\ Multiply accumulate, D element size  \\ 2 5  2  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      2    1     1.00     -    MADDWrrr                       V1UnitI, V1UnitM, V1UnitM0,                       madd	w8, w5, w26, w12               // MADD <Wd>, <Wn>, <Wm>, <Wa>  \\ Multiply accumulate, X-form  \\ 1 2 1 1.0 V1UnitM0
# CHECK-NEXT:  1      2    1     1.00     -    MADDXrrr                       V1UnitI, V1UnitM, V1UnitM0,                       madd	x17, x8, x16, x0               // MADD <Xd>, <Xn>, <Xm>, <Xa>  \\ Multiply accumulate, X-form  \\ 1 2 1 1.0 V1UnitM0
# CHECK-NEXT:  1      4    1     2.00     -    MLAv4i16_indexed               V1UnitV, V1UnitV02,                               mla	v12.4h, v30.4h, v7.h[2]        // MLA <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    MLAv4i32_indexed               V1UnitV, V1UnitV02,                               mla	v7.4s, v9.4s, v5.s[3]          // MLA <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    MLAv4i32                       V1UnitV, V1UnitV02,                               mla	v28.4s, v27.4s, v30.4s         // MLA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     1.00     -    MLA_ZPmZZ_B                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mla	z3.b, p0/m, z1.b, z17.b        // MLA <Zda>.B, <Pg>/M, <Zn>.B, <Zm>.B  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MLA_ZPmZZ_H                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mla	z16.h, p3/m, z5.h, z9.h        // MLA <Zda>.H, <Pg>/M, <Zn>.H, <Zm>.H  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MLA_ZPmZZ_S                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mla	z13.s, p7/m, z29.s, z27.s      // MLA <Zda>.S, <Pg>/M, <Zn>.S, <Zm>.S  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  2      5    2     0.50     -    MLA_ZPmZZ_D                    V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   mla	z19.d, p6/m, z29.d, z1.d  // MLA <Zda>.D, <Pg>/M, <Zn>.D, <Zm>.D  \\ Multiply accumulate, D element size  \\ 2 5  2  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      4    1     2.00     -    MLSv4i16_indexed               V1UnitV, V1UnitV02,                               mls	v3.4h, v10.4h, v6.h[4]         // MLS <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    MLSv2i32_indexed               V1UnitV, V1UnitV02,                               mls	v29.2s, v26.2s, v5.s[1]        // MLS <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    MLSv8i8                        V1UnitV, V1UnitV02,                               mls	v6.8b, v7.8b, v29.8b           // MLS <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply accumulate  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     1.00     -    MLS_ZPmZZ_B                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mls	z14.b, p6/m, z1.b, z6.b        // MLS <Zda>.B, <Pg>/M, <Zn>.B, <Zm>.B  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MLS_ZPmZZ_H                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mls	z10.h, p7/m, z21.h, z5.h       // MLS <Zda>.H, <Pg>/M, <Zn>.H, <Zm>.H  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MLS_ZPmZZ_S                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mls	z13.s, p4/m, z27.s, z31.s      // MLS <Zda>.S, <Pg>/M, <Zn>.S, <Zm>.S  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  2      5    2     0.50     -    MLS_ZPmZZ_D                    V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   mls	z6.d, p0/m, z12.d, z8.d  // MLS <Zda>.D, <Pg>/M, <Zn>.D, <Zm>.D  \\ Multiply accumulate, D element size  \\ 2 5  2  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      2    2     2.00     -    MSUBWrrr                       V1UnitI, V1UnitM,                                 mneg	w11, w18, w0                   // MNEG <Wd>, <Wn>, <Wm>  \\ Multiply  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    MSUBXrrr                       V1UnitI, V1UnitM,                                 mneg	x27, x8, x5                    // MNEG <Xd>, <Xn>, <Xm>  \\ Multiply  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPmV_H                     V1UnitV, V1UnitV01,                               mov	z15.h, p2/m, h18               // MOV <Zd>.<T>, <Pg>/M, <V><n>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZZI_B                      V1UnitV, V1UnitV01,                               mov	z27.b, z19.b[63]               // MOV <Zd>.B, <Zn>.B[<immb>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZZI_H                      V1UnitV, V1UnitV01,                               mov	z23.h, z30.h[5]                // MOV <Zd>.H, <Zn>.H[<immh>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZZI_S                      V1UnitV, V1UnitV01,                               mov	z13.s, z5.s[14]                // MOV <Zd>.S, <Zn>.S[<imms>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZZI_D                      V1UnitV, V1UnitV01,                               mov	z24.d, z11.d[3]                // MOV <Zd>.D, <Zn>.D[<immd>]  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZZI_H                      V1UnitV, V1UnitV01,                               mov	z17.h, h9                      // MOV <Zd>.<T>, <V><n>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    ORRWri                         V1UnitI,                                          orr	wsp, wzr, #0xe00               // MOV <Wd|WSP>, #<imms>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVZXi                         V1UnitI,                                          mov	x26, #7680                     // MOV <Xd|SP>, #<immd>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    INSvi8lane                     V1UnitV,                                          mov	v3.b[14], v21.b[7]             // MOV <Vd>.B[<index1b>], <Vn>.B[<index2b>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    INSvi16lane                    V1UnitV,                                          mov	v2.h[5], v31.h[5]              // MOV <Vd>.H[<index1h>], <Vn>.H[<index2h>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    INSvi32lane                    V1UnitV,                                          mov	v18.s[1], v16.s[2]             // MOV <Vd>.S[<index1s>], <Vn>.S[<index2s>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    INSvi64lane                    V1UnitV,                                          mov	v26.d[0], v1.d[1]              // MOV <Vd>.D[<index1d>], <Vn>.D[<index2d>]  \\ ASIMD insert, element to element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      5    5     1.00     -    INSvi8gpr                      V1UnitI, V1UnitM, V1UnitM0, V1UnitV,              mov	v5.b[15], w21                  // MOV <Vd>.B[<indexb>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
# CHECK-NEXT:  2      5    5     1.00     -    INSvi16gpr                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV,              mov	v28.h[0], w26                  // MOV <Vd>.H[<indexh>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
# CHECK-NEXT:  2      5    5     1.00     -    INSvi32gpr                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV,              mov	v22.s[1], w1                   // MOV <Vd>.S[<indexs>], W<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
# CHECK-NEXT:  2      5    5     1.00     -    INSvi64gpr                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV,              mov	v17.d[0], x6                   // MOV <Vd>.D[<indexd>], X<n>  \\ ASIMD transfer, gen reg to element  \\ 2 5  5  1.0 V1UnitM0,V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPmI_B                     V1UnitV, V1UnitV01,                               mov	z24.b, p2/m, #-55              // MOV <Zd>.B, <Pg>/M, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPmI_S                     V1UnitV, V1UnitV01,                               mov	z29.s, p5/m, #27               // MOV <Zd>.<T>, <Pg>/M, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPmI_D                     V1UnitV, V1UnitV01,                               mov	z27.d, p6/m, #22784            // MOV <Zd>.<T>, <Pg>/M, #<imm>, <shift>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPzI_B                     V1UnitV, V1UnitV01,                               mov	z13.b, p5/z, #48               // MOV <Zd>.B, <Pg>/Z, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPzI_H                     V1UnitV, V1UnitV01,                               mov	z22.h, p1/z, #-25              // MOV <Zd>.<T>, <Pg>/Z, #<imm>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    CPY_ZPzI_D                     V1UnitV, V1UnitV01,                               mov	z6.d, p6/z, #-20736            // MOV <Zd>.<T>, <Pg>/Z, #<imm>, <shift>  \\ Copy, scalar SIMD&FP or imm  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_B                       V1UnitV, V1UnitV01,                               mov	z9.b, #-68                     // MOV <Zd>.B, #<imm>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_H                       V1UnitV, V1UnitV01,                               mov	z19.h, #-101                   // MOV <Zd>.<T>, #<imm>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_S                       V1UnitV, V1UnitV01,                               mov	z29.s, #2                      // MOV <Zd>.<T>, #<imm>, <shift>  \\ Duplicate, immediate and indexed form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    MOVZWi                         V1UnitI,                                          mov	w22, #3584                     // MOV <Wd>, #<imms>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVZXi                         V1UnitI,                                          mov	x3, #3584                      // MOV <Xd>, #<immd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     1.00     -    SEL_PPPP                       V1UnitI, V1UnitM, V1UnitM0,                       mov	p7.b, p1/m, p0.b               // MOV <Pd>.B, <Pg>/M, <Pn>.B  \\ Predicate select  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     1.00     -    AND_PPzPP                      V1UnitI, V1UnitM, V1UnitM0,                       mov	p0.b, p1/z, p5.b               // MOV <Pd>.B, <Pg>/Z, <Pn>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     4.00     -    ORRWrs                         V1UnitI,                                          mov	w15, w1                        // MOV <Wd>, <Wm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORRXrs                         V1UnitI,                                          mov	x30, x25                       // MOV <Xd>, <Xm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    DUPi8                          V1UnitV,                                          mov	b15, v3.b[12]                  // MOV B<d>, <Vn>.B[<indexb>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPi16                         V1UnitV,                                          mov	h30, v28.h[0]                  // MOV H<d>, <Vn>.H[<indexh>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPi32                         V1UnitV,                                          mov	s7, v10.s[0]                   // MOV S<d>, <Vn>.S[<indexs>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    DUPi64                         V1UnitV,                                          mov	d4, v5.d[1]                    // MOV D<d>, <Vn>.D[<indexd>]  \\ ASIMD duplicate, element  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      5    5     1.00     -    CPY_ZPmR_B                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV01,   mov	z20.b, p4/m, w19               // MOV <Zd>.<T>, <Pg>/M, <R><n>  \\ Copy, scalar  \\ 2 5  5  1.0 V1UnitM0,V1UnitV01
# CHECK-NEXT:  2      5    5     1.00     -    CPY_ZPmR_D                     V1UnitI, V1UnitM, V1UnitM0, V1UnitV, V1UnitV01,   mov	z27.d, p4/m, sp                // MOV <Zd>.<T>, <Pg>/M, <R2>SP  \\ Copy, scalar  \\ 2 5  5  1.0 V1UnitM0,V1UnitV01
# CHECK-NEXT:  1      3    3     1.00     -    DUP_ZR_S                       V1UnitI, V1UnitM, V1UnitM0,                       mov	z4.s, w26                      // MOV <Zd>.<T>, <R><n>  \\ Duplicate, scalar form  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    DUP_ZR_D                       V1UnitI, V1UnitM, V1UnitM0,                       mov	z1.d, sp                       // MOV <Zd>.<T>, <R2>SP  \\ Duplicate, scalar form  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi32                       V1UnitV,                                          mov	w6, v2.s[1]                    // MOV <Wd>, <Vn>.S[<indexs>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi64                       V1UnitV,                                          mov	x5, v8.d[1]                    // MOV <Xd>, <Vn>.D[<indexd>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      1    1     4.00     -    ADDWri                         V1UnitI,                                          mov	wsp, wsp                       // MOV <Wd|WSP>, <Wn|WSP>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORRXrs                         V1UnitI,                                          mov	x1, x18                        // MOV <Xd|SP>, <Xn|SP>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    ORRv8i8                        V1UnitV,                                          mov	v26.8b, v10.8b                 // MOV <Vd>.<T>, <Vn>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    SEL_ZPZZ_D                     V1UnitV, V1UnitV01,                               mov	z5.d, p6/m, z16.d              // MOV <Zd>.<T>, <Pv>/M, <Zn>.<T>  \\ Select, vector form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZZZ                        V1UnitV, V1UnitV01,                               mov	z12.d, z0.d                    // MOV <Zd>.D, <Zn>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    MOVZWi                         V1UnitI,                                          mov	w6, #3584                      // MOV <Wd>, #<imms>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVZXi                         V1UnitI,                                          mov	x13, #3584                     // MOV <Xd>, #<immd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_B                       V1UnitV, V1UnitV01,                               mov	z5.b, #112                     // MOV <Zd>.B, #<constb>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_H                       V1UnitV, V1UnitV01,                               mov	z10.h, #96                     // MOV <Zd>.H, #<consth>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_S                       V1UnitV, V1UnitV01,                               mov	z27.s, #2                      // MOV <Zd>.S, #<consts>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    DUP_ZI_D                       V1UnitV, V1UnitV01,                               mov	z6.d, #4                       // MOV <Zd>.D, #<constd>  \\ Broadcast logical bitmask immediate to vector   \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     1.00     -    ORR_PPzPP                      V1UnitI, V1UnitM, V1UnitM0,                       mov	p3.b, p0.b                     // MOV <Pd>.B, <Pn>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     4.00     -    MOVIv16b_ns                    V1UnitV,                                          movi	v20.16b, #56                   // MOVI <Vd>.<Tb>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MOVIv4i16                      V1UnitV,                                          movi	v22.4h, #175                   // MOVI <Vd>.<Th>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MOVIv4i16                      V1UnitV,                                          movi	v15.4h, #6                     // MOVI <Vd>.<Th>, #<imm8>, LSL #<amounth>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MOVIv2i32                      V1UnitV,                                          movi	v13.2s, #71                    // MOVI <Vd>.<Ts>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MOVIv2i32                      V1UnitV,                                          movi	v30.2s, #127                   // MOVI <Vd>.<Ts>, #<imm8>, LSL #<amounts>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MOVIv2s_msl                    V1UnitV,                                          movi	v12.2s, #160, msl #8           // MOVI <Vd>.<Ts>, #<imm8>, MSL #<amountones>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MOVID                          V1UnitV,                                          movi	d9, #0xff00ff00ff00ff00        // MOVI <Dd>, #<imm>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MOVIv2d_ns                     V1UnitV,                                          movi	v7.2d, #0xff00ff00ff00ff00     // MOVI <Vd>.2D, #<imm>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    MOVKWi                         V1UnitI,                                          movk	w6, #42183                     // MOVK <Wd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVKWi                         V1UnitI,                                          movk	w21, #47898, lsl #16           // MOVK <Wd>, #<imm>, LSL #<shifts>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVKXi                         V1UnitI,                                          movk	x28, #15391                    // MOVK <Xd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVKXi                         V1UnitI,                                          movk	x9, #56384                     // MOVK <Xd>, #<imm>, LSL #<shiftd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVNWi                         V1UnitI,                                          mov	w23, #-5765                    // MOVN <Wd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVNWi                         V1UnitI,                                          mov	w16, #-60086                   // MOVN <Wd>, #<imm>, LSL #<shifts>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVNXi                         V1UnitI,                                          mov	x26, #-36709                   // MOVN <Xd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVNXi                         V1UnitI,                                          mov	x3, #-4265082881               // MOVN <Xd>, #<imm>, LSL #<shiftd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    MOVPRFX_ZPzZ_D                 V1UnitV, V1UnitV01,                               movprfx	z16.d, p5/z, z18.d     // MOVPRFX <Zd>.<T>, <Pg>/<ZM>, <Zn>.<T>  \\ Move prefix  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  2      5    2     0.50     -    MLA_ZPmZZ_D                    V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   mla	z16.d, p5/m, z12.d, z11.d  // Ignore
# CHECK-NEXT:  1      2    2     2.00     -    MOVPRFX_ZZ                     V1UnitV, V1UnitV01,                               movprfx	z25, z15               // MOVPRFX <Zd>, <Zn>  \\ Move prefix  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      4    2     2.00     -    FMLA_ZPmZZ_D                   V1UnitV, V1UnitV01,                               fmla	z25.d, p0/m, z30.d, z16.d      // Ignore
# CHECK-NEXT:  2      2    2     0.50     -    ANDS_PPzPP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              movs	p4.b, p6/z, p5.b               // MOVS <Pd>.B, <Pg>/Z, <Pn>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  2      2    2     0.50     -    ORRS_PPzPP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              movs	p3.b, p1.b                     // MOVS <Pd>.B, <Pn>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      1    1     4.00     -    MOVZWi                         V1UnitI,                                          mov	w8, #6897                      // MOVZ <Wd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVZWi                         V1UnitI,                                          mov	w12, #1014431744               // MOVZ <Wd>, #<imm>, LSL #<shifts>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVZXi                         V1UnitI,                                          mov	x2, #1969                      // MOVZ <Xd>, #<imm>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    MOVZXi                         V1UnitI,                                          mov	x0, #-8117456853358608384      // MOVZ <Xd>, #<imm>, LSL #<shiftd>  \\ Move immed  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     15.00    SE   MRS                                                                              mrs	x3, ACTLR_EL2                  // MRS <Xt>, <systemreg>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   MRS                                                                              mrs	x7, S3_6_C9_C5_6               // MRS <Xt>, S<op0>_<op1>_<Cn>_<Cm>_<op2>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     1.00     -    MSB_ZPmZZ_B                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          msb	z10.b, p2/m, z20.b, z18.b      // MSB <Zdn>.B, <Pg>/M, <Zm>.B, <Za>.B  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MSB_ZPmZZ_H                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          msb	z7.h, p6/m, z5.h, z2.h         // MSB <Zdn>.H, <Pg>/M, <Zm>.H, <Za>.H  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MSB_ZPmZZ_S                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          msb	z6.s, p4/m, z28.s, z21.s       // MSB <Zdn>.S, <Pg>/M, <Zm>.S, <Za>.S  \\ Multiply accumulate, B, H, S element size  \\ 1 4  4  1.00 V1UnitV0
# CHECK-NEXT:  2      5    2     0.50     -    MSB_ZPmZZ_D                    V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   msb	z1.d, p3/m, z25.d, z22.d  // MSB <Zdn>.D, <Pg>/M, <Zm>.D, <Za>.D  \\ Multiply accumulate, D element size  \\ 2 5  2  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      1    1     15.00    SE   MSRpstateImm4                                                                    msr	DAIFClr, #9                    // MSR <pstatefield1>, #<imm1>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   MSRpstateImm4                                                                    msr	SPSel, #0                      // MSR <pstatefield2>, #<imm2>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   MSR                                                                              msr	ACTLR_EL1, x20                 // MSR <systemreg>, <Xt>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   MSR                                                                              msr	S3_3_C14_C3_6, x6              // MSR S<op0>_<op1>_<Cn>_<Cm>_<op2>, <Xt>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    1     1.00     -    MSUBWrrr                       V1UnitI, V1UnitM, V1UnitM0,                       msub	w7, w19, w29, w23              // MSUB <Wd>, <Wn>, <Wm>, <Wa>  \\ Multiply accumulate, X-form  \\ 1 2 1 1.0 V1UnitM0
# CHECK-NEXT:  1      2    1     1.00     -    MSUBXrrr                       V1UnitI, V1UnitM, V1UnitM0,                       msub	x16, x4, x5, x4                // MSUB <Xd>, <Xn>, <Xm>, <Xa>  \\ Multiply accumulate, X-form  \\ 1 2 1 1.0 V1UnitM0
# CHECK-NEXT:  1      4    4     2.00     -    MULv4i16_indexed               V1UnitV, V1UnitV02,                               mul	v21.4h, v7.4h, v9.h[5]         // MUL <Vd>.4H, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    MULv8i16_indexed               V1UnitV, V1UnitV02,                               mul	v1.8h, v1.8h, v14.h[3]         // MUL <Vd>.8H, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    MULv2i32_indexed               V1UnitV, V1UnitV02,                               mul	v15.2s, v30.2s, v6.s[3]        // MUL <Vd>.2S, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    MULv4i32_indexed               V1UnitV, V1UnitV02,                               mul	v22.4s, v29.4s, v7.s[3]        // MUL <Vd>.4S, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     1.00     -    MUL_ZI_B                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mul	z27.b, z27.b, #61              // MUL <Zdn>.B, <Zdn>.B, #<imm>  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MUL_ZI_H                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mul	z17.h, z17.h, #27              // MUL <Zdn>.H, <Zdn>.H, #<imm>  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MUL_ZI_S                       V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mul	z22.s, z22.s, #41              // MUL <Zdn>.S, <Zdn>.S, #<imm>  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  2      5    5     0.50     -    MUL_ZI_D                       V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   mul	z19.d, z19.d, #87      // MUL <Zdn>.D, <Zdn>.D, #<imm>  \\ Multiply, D element size  \\ 2 5  5  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      4    4     2.00     -    MULv16i8                       V1UnitV, V1UnitV02,                               mul	v18.16b, v4.16b, v16.16b       // MUL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     1.00     -    MUL_ZPmZ_B                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mul	z9.b, p4/m, z9.b, z18.b        // MUL <Zdn>.B, <Pg>/M, <Zdn>.B, <Zm>.B  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MUL_ZPmZ_H                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mul	z7.h, p1/m, z7.h, z3.h         // MUL <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    MUL_ZPmZ_S                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          mul	z3.s, p7/m, z3.s, z1.s         // MUL <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  2      5    5     0.50     -    MUL_ZPmZ_D                     V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   mul	z4.d, p6/m, z4.d, z28.d  // MUL <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Multiply, D element size  \\ 2 5  5  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      2    2     2.00     -    MADDWrrr                       V1UnitI, V1UnitM,                                 mul	w9, w25, w3                    // MUL <Wd>, <Wn>, <Wm>  \\ Multiply  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    MADDXrrr                       V1UnitI, V1UnitM,                                 mul	x18, x4, x2                    // MUL <Xd>, <Xn>, <Xm>  \\ Multiply  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     4.00     -    ORNWrs                         V1UnitI,                                          mvn	w7, w13                        // MVN <Wd>, <Wm>  \\ Move, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORNWrs                         V1UnitI,                                          mvn	w2, w22, lsr #26               // MVN <Wd>, <Wm>, <shift> #<wamount>  \\ Move, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORNXrs                         V1UnitI,                                          mvn	x0, x8                         // MVN <Xd>, <Xm>  \\ Move, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORNXrs                         V1UnitI,                                          mvn	x25, x30, lsr #42              // MVN <Xd>, <Xm>, <shift> #<amount>  \\ Move, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    NOTv16i8                       V1UnitV,                                          mvn	v24.16b, v14.16b               // MVN <Vd>.<T>, <Vn>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MVNIv4i16                      V1UnitV,                                          mvni	v0.4h, #66                     // MVNI <Vd>.<Th>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MVNIv8i16                      V1UnitV,                                          mvni	v29.8h, #212                   // MVNI <Vd>.<Th>, #<imm8>, LSL #<amounth>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MVNIv2i32                      V1UnitV,                                          mvni	v23.2s, #242                   // MVNI <Vd>.<Ts>, #<imm8>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MVNIv2i32                      V1UnitV,                                          mvni	v2.2s, #238, lsl #8            // MVNI <Vd>.<Ts>, #<imm8>, LSL #<amounts>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    MVNIv2s_msl                    V1UnitV,                                          mvni	v13.2s, #223, msl #8           // MVNI <Vd>.<Ts>, #<imm8>, MSL #<amountones>  \\ ASIMD move, integer immed  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     1.00     -    NAND_PPzPP                     V1UnitI, V1UnitM, V1UnitM0,                       nand	p5.b, p2/z, p0.b, p7.b         // NAND <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  2      2    2     0.50     -    NANDS_PPzPP                    V1UnitI[2], V1UnitM[2], V1UnitM0[2],              nands	p4.b, p1/z, p7.b, p1.b         // NANDS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      1    1     4.00     -    SUBWrs                         V1UnitI,                                          neg	w8, w30, lsl #1                // NEG <Wd>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, no flagset   \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUBWrs                         V1UnitI, V1UnitM,                                 neg	w12, w28, lsl #25              // NEG <Wd>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBWrs                         V1UnitI, V1UnitM,                                 neg	w15, w10, lsr #26              // NEG <Wd>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     4.00     -    SUBXrs                         V1UnitI,                                          neg	x26, x30, lsl #3               // NEG <Xd>, <Xm>, LSL #<amountl>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUBXrs                         V1UnitI, V1UnitM,                                 neg	x20, x6, lsl #13               // NEG <Xd>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBXrs                         V1UnitI, V1UnitM,                                 neg	x9, x10, asr #62               // NEG <Xd>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     4.00     -    NEGv1i64                       V1UnitV,                                          neg	d11, d23                       // NEG <V><d>, <V><n>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    NEGv8i16                       V1UnitV,                                          neg	v3.8h, v5.8h                   // NEG <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    NEG_ZPmZ_H                     V1UnitV, V1UnitV01,                               neg	z28.h, p5/m, z27.h             // NEG <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     3.00     -    SUBSWrs                        V1UnitFlg, V1UnitI,                               negs	w5, w24, lsl #2                // NEGS <Wd>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      negs	w12, w13, lsl #15              // NEGS <Wd>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      negs	w19, w30, lsr #2               // NEGS <Wd>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrs                        V1UnitFlg, V1UnitI,                               negs	x16, x6, lsl #2                // NEGS <Xd>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      negs	x14, x30, lsl #36              // NEGS <Xd>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      negs	x0, x6, lsr #26                // NEGS <Xd>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     4.00     -    SBCWr                          V1UnitI,                                          ngc	w10, w8                        // NGC <Wd>, <Wm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SBCXr                          V1UnitI,                                          ngc	x13, x15                       // NGC <Xd>, <Xm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     3.00     -    SBCSWr                         V1UnitFlg, V1UnitI,                               ngcs	w10, w17                       // NGCS <Wd>, <Wm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     3.00     -    SBCSXr                         V1UnitFlg, V1UnitI,                               ngcs	x19, x14                       // NGCS <Xd>, <Xm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             nop                                  // NOP  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     1.00     -    NOR_PPzPP                      V1UnitI, V1UnitM, V1UnitM0,                       nor	p2.b, p6/z, p7.b, p1.b         // NOR <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  2      2    2     0.50     -    NORS_PPzPP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              nors	p0.b, p7/z, p4.b, p4.b         // NORS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      1    1     1.00     -    EOR_PPzPP                      V1UnitI, V1UnitM, V1UnitM0,                       not	p4.b, p1/z, p3.b               // NOT <Pd>.B, <Pg>/Z, <Pn>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     2.00     -    NOT_ZPmZ_H                     V1UnitV, V1UnitV01,                               not	z31.h, p2/m, z7.h              // NOT <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    NOTv16i8                       V1UnitV,                                          mvn	v28.16b, v29.16b               // NOT <Vd>.<T>, <Vn>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      2    2     0.50     -    EORS_PPzPP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              nots	p6.b, p4/z, p6.b               // NOTS <Pd>.B, <Pg>/Z, <Pn>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZI                         V1UnitV, V1UnitV01,                               orr	z20.b, z20.b, #0x8f            // ORN <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZI                         V1UnitV, V1UnitV01,                               orr	z12.h, z12.h, #0xff9f          // ORN <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZI                         V1UnitV, V1UnitV01,                               orr	z10.s, z10.s, #0xfffffffd      // ORN <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZI                         V1UnitV, V1UnitV01,                               orr	z24.d, z24.d, #0xfffffffffffffffb  // ORN <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     1.00     -    ORN_PPzPP                      V1UnitI, V1UnitM, V1UnitM0,                       orn	p5.b, p2/z, p6.b, p6.b         // ORN <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     4.00     -    ORNWrs                         V1UnitI,                                          orn	w18, w25, w11                  // ORN <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORNWrs                         V1UnitI,                                          orn	w30, w11, w29, lsl #12         // ORN <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORNXrs                         V1UnitI,                                          orn	x13, x24, x24                  // ORN <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORNXrs                         V1UnitI,                                          orn	x5, x18, x11, lsr #31          // ORN <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    ORNv8i8                        V1UnitV,                                          orn	v10.8b, v1.8b, v28.8b          // ORN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      2    2     0.50     -    ORNS_PPzPP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              orns	p7.b, p2/z, p5.b, p6.b         // ORNS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      1    1     4.00     -    ORRWri                         V1UnitI,                                          orr	wsp, w16, #0xe00               // ORR <Wd|WSP>, <Wn>, #<imms>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORRXri                         V1UnitI,                                          orr	x15, x18, #0x1e00              // ORR <Xd|SP>, <Xn>, #<immd>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZI                         V1UnitV, V1UnitV01,                               orr	z26.b, z26.b, #0x70            // ORR <Zdn>.B, <Zdn>.B, #<constb>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZI                         V1UnitV, V1UnitV01,                               orr	z9.h, z9.h, #0x60              // ORR <Zdn>.H, <Zdn>.H, #<consth>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZI                         V1UnitV, V1UnitV01,                               orr	z10.s, z10.s, #0x2             // ORR <Zdn>.S, <Zdn>.S, #<consts>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZI                         V1UnitV, V1UnitV01,                               orr	z29.d, z29.d, #0x4             // ORR <Zdn>.D, <Zdn>.D, #<constd>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     1.00     -    ORR_PPzPP                      V1UnitI, V1UnitM, V1UnitM0,                       orr	p4.b, p2/z, p6.b, p1.b         // ORR <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     4.00     -    ORRWrs                         V1UnitI,                                          orr	w18, w21, w22                  // ORR <Wd>, <Wn>, <Wm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORRWrs                         V1UnitI,                                          orr	w3, w18, w30, asr #1           // ORR <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORRXrs                         V1UnitI,                                          orr	x6, x14, x27                   // ORR <Xd>, <Xn>, <Xm>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    ORRXrs                         V1UnitI,                                          orr	x17, x30, x23, lsr #43         // ORR <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    ORRv8i16                       V1UnitV,                                          orr	v13.8h, #205                   // ORR <Vd>.<Th>, #<imm8>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    ORRv4i16                       V1UnitV,                                          orr	v2.4h, #245                    // ORR <Vd>.<Th>, #<imm8>, LSL #<amounth>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    ORRv2i32                       V1UnitV,                                          orr	v3.2s, #86                     // ORR <Vd>.<T>, #<imm8>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    ORRv2i32                       V1UnitV,                                          orr	v9.2s, #32                     // ORR <Vd>.<T>, #<imm8>, LSL #<amount>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    ORRv16i8                       V1UnitV,                                          orr	v30.16b, v10.16b, v15.16b      // ORR <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD logical  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZPmZ_H                     V1UnitV, V1UnitV01,                               orr	z29.h, p1/m, z29.h, z12.h      // ORR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    ORR_ZZZ                        V1UnitV, V1UnitV01,                               orr	z10.d, z28.d, z29.d            // ORR <Zd>.D, <Zn>.D, <Zm>.D  \\ Logical  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  2      2    2     0.50     -    ORRS_PPzPP                     V1UnitI[2], V1UnitM[2], V1UnitM0[2],              orrs	p1.b, p6/z, p3.b, p2.b         // ORRS <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B  \\ Predicate logical, flag setting  \\ 2 2  2  0.50 V1UnitM0[2]
# CHECK-NEXT:  4      12   12    0.50     -    ORV_VPZ_H                      V1UnitV[4], V1UnitV01[4],                         orv	h8, p2, z12.h                  // ORV <V><d>, <Pg>, <Zn>.<T>  \\ Reduction, logical   \\ 4 12  12  0.50 V1UnitV01[4]
# CHECK-NEXT:  1      2    2     1.00     -    PFALSE                         V1UnitI, V1UnitM, V1UnitM0,                       pfalse	p2.b                           // PFALSE <Pd>.B  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    PFIRST_B                       V1UnitI, V1UnitM, V1UnitM0,                       pfirst	p3.b, p2, p3.b                 // PFIRST <Pdn>.B, <Pg>, <Pdn>.B  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     2.00     -    PMULv8i8                       V1UnitV, V1UnitV01,                               pmul	v5.8b, v4.8b, v4.8b            // PMUL <Vd>.8B, <Vn>.8B, <Vm>.8B  \\ ASIMD multiply/multiply long (8x8) polynomial, D-form  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      3    3     2.00     -    PMULv16i8                      V1UnitV, V1UnitV01,                               pmul	v6.16b, v28.16b, v20.16b       // PMUL <Vd>.16B, <Vn>.16B, <Vm>.16B  \\ ASIMD multiply/multiply long (8x8) polynomial, Q-form  \\ 1 3  3  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    PNEXT_H                        V1UnitI, V1UnitM, V1UnitM0,                       pnext	p0.h, p2, p0.h                 // PNEXT <Pdn>.<T>, <Pv>, <Pdn>.<T>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_PRI                       V1UnitL, V1UnitL01,                               prfb	#14, p1, [x30]                 // PRFB #<imm4>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_PRI                       V1UnitL, V1UnitL01,                               prfb	#14, p0, [x28, #3, mul vl]     // PRFB #<imm4>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_PRI                       V1UnitL, V1UnitL01,                               prfb	pldl1keep, p7, [x8]            // PRFB <prfop>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_PRI                       V1UnitL, V1UnitL01,                               prfb	pstl1strm, p4, [x7, #-31, mul vl]  // PRFB <prfop>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_PRR                       V1UnitL, V1UnitL01,                               prfb	pstl2strm, p7, [x22, x15]      // PRFB <prfop>, <Pg>, [<Xn|SP>, <Xm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_S_UXTW_SCALED             V1UnitL, V1UnitL01,                               prfb	pldl3keep, p7, [x25, z21.s, uxtw]  // PRFB <prfop>, <Pg>, [<Xn|SP>, <Zm>.S, <mod>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_D_SXTW_SCALED             V1UnitL, V1UnitL01,                               prfb	pstl1strm, p7, [x11, z19.d, sxtw]  // PRFB <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_D_SCALED                  V1UnitL, V1UnitL01,                               prfb	pstl2keep, p0, [x17, z24.d]    // PRFB <prfop>, <Pg>, [<Xn|SP>, <Zm>.D]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_S_PZI                     V1UnitL, V1UnitL01,                               prfb	pldl1keep, p3, [z11.s]         // PRFB #<imm4>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_S_PZI                     V1UnitL, V1UnitL01,                               prfb	#14, p1, [z13.s, #17]          // PRFB #<imm4>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_S_PZI                     V1UnitL, V1UnitL01,                               prfb	pldl3strm, p2, [z9.s]          // PRFB <prfop>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_S_PZI                     V1UnitL, V1UnitL01,                               prfb	pldl3strm, p4, [z13.s, #15]    // PRFB <prfop>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_D_PZI                     V1UnitL, V1UnitL01,                               prfb	#6, p5, [z27.d]                // PRFB #<imm4>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_D_PZI                     V1UnitL, V1UnitL01,                               prfb	pstl3keep, p4, [z21.d, #20]    // PRFB #<imm4>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_D_PZI                     V1UnitL, V1UnitL01,                               prfb	pstl3strm, p5, [z14.d]         // PRFB <prfop>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFB_D_PZI                     V1UnitL, V1UnitL01,                               prfb	pstl1keep, p6, [z10.d, #2]     // PRFB <prfop>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_PRI                       V1UnitL, V1UnitL01,                               prfd	#6, p6, [x2]                   // PRFD #<imm4>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_PRI                       V1UnitL, V1UnitL01,                               prfd	#15, p1, [x14, #23, mul vl]    // PRFD #<imm4>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_PRI                       V1UnitL, V1UnitL01,                               prfd	pldl3strm, p2, [x0]            // PRFD <prfop>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_PRI                       V1UnitL, V1UnitL01,                               prfd	pstl1strm, p4, [x0, #-23, mul vl]  // PRFD <prfop>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_PRR                       V1UnitL, V1UnitL01,                               prfd	pldl2strm, p1, [x4, x12, lsl #3]  // PRFD <prfop>, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_S_UXTW_SCALED             V1UnitL, V1UnitL01,                               prfd	pstl3keep, p5, [x8, z30.s, uxtw #3]  // PRFD <prfop>, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #3]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_D_SXTW_SCALED             V1UnitL, V1UnitL01,                               prfd	pldl2strm, p7, [x27, z4.d, sxtw #3]  // PRFD <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #3]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_D_SCALED                  V1UnitL, V1UnitL01,                               prfd	pldl1keep, p2, [x9, z14.d, lsl #3]  // PRFD <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, LSL #3]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_S_PZI                     V1UnitL, V1UnitL01,                               prfd	pldl1keep, p1, [z6.s]          // PRFD #<imm4>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_S_PZI                     V1UnitL, V1UnitL01,                               prfd	#6, p7, [z9.s, #200]           // PRFD #<imm4>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_S_PZI                     V1UnitL, V1UnitL01,                               prfd	pstl3strm, p7, [z0.s]          // PRFD <prfop>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_S_PZI                     V1UnitL, V1UnitL01,                               prfd	pldl1keep, p2, [z11.s, #232]   // PRFD <prfop>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_D_PZI                     V1UnitL, V1UnitL01,                               prfd	#14, p0, [z16.d]               // PRFD #<imm4>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_D_PZI                     V1UnitL, V1UnitL01,                               prfd	pstl2keep, p1, [z2.d, #32]     // PRFD #<imm4>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_D_PZI                     V1UnitL, V1UnitL01,                               prfd	pldl3keep, p4, [z24.d]         // PRFD <prfop>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFD_D_PZI                     V1UnitL, V1UnitL01,                               prfd	pstl3strm, p4, [z21.d, #96]    // PRFD <prfop>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_PRI                       V1UnitL, V1UnitL01,                               prfh	#7, p6, [x5]                   // PRFH #<imm4>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_PRI                       V1UnitL, V1UnitL01,                               prfh	pldl2strm, p3, [x3, #8, mul vl]  // PRFH #<imm4>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_PRI                       V1UnitL, V1UnitL01,                               prfh	pstl1keep, p5, [x26]           // PRFH <prfop>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_PRI                       V1UnitL, V1UnitL01,                               prfh	pstl3strm, p5, [x10, #4, mul vl]  // PRFH <prfop>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_PRR                       V1UnitL, V1UnitL01,                               prfh	pstl2keep, p2, [x14, x19, lsl #1]  // PRFH <prfop>, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_S_UXTW_SCALED             V1UnitL, V1UnitL01,                               prfh	pstl2strm, p0, [x15, z30.s, uxtw #1]  // PRFH <prfop>, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_D_SXTW_SCALED             V1UnitL, V1UnitL01,                               prfh	pstl3strm, p2, [x19, z9.d, sxtw #1]  // PRFH <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_D_SCALED                  V1UnitL, V1UnitL01,                               prfh	pstl2strm, p2, [x12, z25.d, lsl #1]  // PRFH <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, LSL #1]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_S_PZI                     V1UnitL, V1UnitL01,                               prfh	pstl2strm, p0, [z1.s]          // PRFH <prfop>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_S_PZI                     V1UnitL, V1UnitL01,                               prfh	pstl3strm, p5, [z25.s, #30]    // PRFH <prfop>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_D_PZI                     V1UnitL, V1UnitL01,                               prfh	pldl2keep, p0, [z24.d]         // PRFH <prfop>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFH_D_PZI                     V1UnitL, V1UnitL01,                               prfh	pstl1keep, p2, [z23.d, #58]    // PRFH <prfop>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMui                         V1UnitL,                                          prfm	pldl3keep, [x13]               // PRFM <prfop>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMui                         V1UnitL,                                          prfm	pstl3keep, [x10, #32200]       // PRFM <prfop>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMui                         V1UnitL,                                          prfm	pldl1keep, [x3]                // PRFM #<imm5>, [<Xn|SP>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMui                         V1UnitL,                                          prfm	#26, [x0, #30128]              // PRFM #<imm5>, [<Xn|SP>, #<pimm>]  \\ Load register, unsigned immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMl                          V1UnitL,                                          prfm	pldl1strm, test                // PRFM <prfop>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMl                          V1UnitL,                                          prfm	#25, test                      // PRFM #<imm5>, <label>  \\ Load register, literal  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroX                        V1UnitL,                                          prfm	pldl1strm, [x24, x27]          // PRFM <prfop>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroX                        V1UnitL,                                          prfm	plil3strm, [x21, x1]           // PRFM #<imm5>, [<Xn|SP>, <Xm>]  \\ Load register, register offset, basic  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroW                        V1UnitL,                                          prfm	pstl2strm, [x13, w22, uxtw]    // PRFM <prfop>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroW                        V1UnitL,                                          rprfm pstkeep, x11, [x10]            // PRFM #<imm5>, [<Xn|SP>, <Wm>, UXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroW                        V1UnitL,                                          prfm	pldl1strm, [x17, w18, sxtw]    // PRFM <prfop>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroW                        V1UnitL,                                          rprfm #38, x22, [x24]                // PRFM #<imm5>, [<Xn|SP>, <Wm>, SXTW]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroX                        V1UnitL,                                          prfm	pstl3strm, [x28, x23, sxtx]    // PRFM <prfop>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroX                        V1UnitL,                                          prfm	pldl2strm, [x28, x4, sxtx]     // PRFM #<imm5>, [<Xn|SP>, <Xm>, SXTX]  \\ Load register, register offset, extend  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroW                        V1UnitL,                                          prfm	pstl3keep, [x6, w30, uxtw #3]  // PRFM <prfop>, [<Xn|SP>, <Wm>, UXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroW                        V1UnitL,                                          prfm	pstl1keep, [x19, w4, uxtw #3]  // PRFM #<imm5>, [<Xn|SP>, <Wm>, UXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroW                        V1UnitL,                                          prfm	pstl1keep, [x29, w18, sxtw #3]  // PRFM <prfop>, [<Xn|SP>, <Wm>, SXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroW                        V1UnitL,                                          prfm	pstl2keep, [x20, w29, sxtw #3]  // PRFM #<imm5>, [<Xn|SP>, <Wm>, SXTW #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroX                        V1UnitL,                                          prfm	pstl1strm, [x17, x15, sxtx #3]  // PRFM <prfop>, [<Xn|SP>, <Xm>, SXTX #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroX                        V1UnitL,                                          prfm	pstl3strm, [x19, x3, sxtx #3]  // PRFM #<imm5>, [<Xn|SP>, <Xm>, SXTX #3]  \\ Load register, register offset, extend, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroX                        V1UnitL,                                          prfm	pstl3keep, [x23, x16, lsl #3]  // PRFM <prfop>, [<Xn|SP>, <Xm>, LSL #3]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFMroX                        V1UnitL,                                          prfm	#23, [x13, x26, lsl #3]        // PRFM #<imm5>, [<Xn|SP>, <Xm>, LSL #3]  \\ Load register, register offset, scale by 4/8  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFUMi                         V1UnitL,                                          prfum	pstl2strm, [x16]               // PRFUM <prfop>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFUMi                         V1UnitL,                                          prfum	pldl3strm, [x0, #-240]         // PRFUM <prfop>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFUMi                         V1UnitL,                                          prfum	pstl1keep, [x10]               // PRFUM #<imm5>, [<Xn|SP>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     3.00     SE   PRFUMi                         V1UnitL,                                          prfum	plil3strm, [x30, #124]         // PRFUM #<imm5>, [<Xn|SP>, #<simm>]  \\ Load register, unscaled immed  \\ 1 4  4  3.0 V1UnitL
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_PRI                       V1UnitL, V1UnitL01,                               prfw	pstl2strm, p6, [x22]           // PRFW #<imm4>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_PRI                       V1UnitL, V1UnitL01,                               prfw	pstl2keep, p4, [x30, #21, mul vl]  // PRFW #<imm4>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_PRI                       V1UnitL, V1UnitL01,                               prfw	pldl2keep, p3, [x17]           // PRFW <prfop>, <Pg>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_PRI                       V1UnitL, V1UnitL01,                               prfw	pstl2keep, p0, [x19, #28, mul vl]  // PRFW <prfop>, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_PRR                       V1UnitL, V1UnitL01,                               prfw	pstl3strm, p1, [x24, x17, lsl #2]  // PRFW <prfop>, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_S_UXTW_SCALED             V1UnitL, V1UnitL01,                               prfw	pldl1keep, p2, [x25, z19.s, uxtw #2]  // PRFW <prfop>, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #2]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_D_SXTW_SCALED             V1UnitL, V1UnitL01,                               prfw	pstl3keep, p4, [x20, z5.d, sxtw #2]  // PRFW <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_D_SCALED                  V1UnitL, V1UnitL01,                               prfw	pldl3keep, p7, [x29, z0.d, lsl #2]  // PRFW <prfop>, <Pg>, [<Xn|SP>, <Zm>.D, LSL #2]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_S_PZI                     V1UnitL, V1UnitL01,                               prfw	pldl2strm, p1, [z21.s]         // PRFW #<imm4>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_S_PZI                     V1UnitL, V1UnitL01,                               prfw	pstl2strm, p7, [z30.s, #48]    // PRFW #<imm4>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_S_PZI                     V1UnitL, V1UnitL01,                               prfw	pldl3keep, p7, [z6.s]          // PRFW <prfop>, <Pg>, [<Zn>.S]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_S_PZI                     V1UnitL, V1UnitL01,                               prfw	pldl1strm, p3, [z17.s, #20]    // PRFW <prfop>, <Pg>, [<Zn>.S, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_D_PZI                     V1UnitL, V1UnitL01,                               prfw	pldl3strm, p4, [z22.d]         // PRFW #<imm4>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_D_PZI                     V1UnitL, V1UnitL01,                               prfw	pstl1keep, p7, [z29.d, #76]    // PRFW #<imm4>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_D_PZI                     V1UnitL, V1UnitL01,                               prfw	pldl3keep, p5, [z17.d]         // PRFW <prfop>, <Pg>, [<Zn>.D]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     SE   PRFW_D_PZI                     V1UnitL, V1UnitL01,                               prfw	pldl1strm, p1, [z16.d, #76]    // PRFW <prfop>, <Pg>, [<Zn>.D, #<imm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             psb	csync                          // PSB CSYNC  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   DSB                                                                              pssbb                                // PSSBB  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     1.00     -    PTEST_PP                       V1UnitI, V1UnitM, V1UnitM0,                       ptest	p5, p7.b                       // PTEST <Pg>, <Pn>.B  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    PTRUE_H                        V1UnitI, V1UnitM, V1UnitM0,                       ptrue	p6.h                           // PTRUE <Pd>.<T>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    PTRUE_S                        V1UnitI, V1UnitM, V1UnitM0,                       ptrue	p5.s, vl2                      // PTRUE <Pd>.<T>, <pattern>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    PTRUE_D                        V1UnitI, V1UnitM, V1UnitM0,                       ptrue	p4.d                           // PTRUE <Pd>.<T>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    PTRUE_H                        V1UnitI, V1UnitM, V1UnitM0,                       ptrue	p1.h, #28                      // PTRUE <Pd>.<T>, #<uimm5>  \\ Predicate set/initialize/find next  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  2      3    3     0.50     -    PTRUES_H                       V1UnitI[2], V1UnitM[2], V1UnitM0[2],              ptrues	p1.h                           // PTRUES <Pd>.<T>  \\ Predicate set/initialize, set flags  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  2      3    3     0.50     -    PTRUES_B                       V1UnitI[2], V1UnitM[2], V1UnitM0[2],              ptrues	p7.b, vl32                     // PTRUES <Pd>.<T>, <pattern>  \\ Predicate set/initialize, set flags  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  2      3    3     0.50     -    PTRUES_D                       V1UnitI[2], V1UnitM[2], V1UnitM0[2],              ptrues	p3.d                           // PTRUES <Pd>.<T>  \\ Predicate set/initialize, set flags  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  2      3    3     0.50     -    PTRUES_S                       V1UnitI[2], V1UnitM[2], V1UnitM0[2],              ptrues	p2.s, #26                      // PTRUES <Pd>.<T>, #<uimm5>  \\ Predicate set/initialize, set flags  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     1.00     -    PUNPKHI_PP                     V1UnitI, V1UnitM, V1UnitM0,                       punpkhi	p2.h, p6.b             // PUNPKHI <Pd>.H, <Pn>.B  \\ Predicate unpack and widen  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    PUNPKLO_PP                     V1UnitI, V1UnitM, V1UnitM0,                       punpklo	p3.h, p5.b             // PUNPKLO <Pd>.H, <Pn>.B  \\ Predicate unpack and widen  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     4.00     -    RADDHNv4i32_v4i16              V1UnitV,                                          raddhn	v31.4h, v30.4s, v17.4s         // RADDHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    RADDHNv2i64_v4i32              V1UnitV,                                          raddhn2	v10.4s, v26.2d, v8.2d  // RADDHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    RBITv8i8                       V1UnitV,                                          rbit	v10.8b, v26.8b                 // RBIT <Vd>.<T>, <Vn>.<T>  \\ ASIMD bit reverse  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    RBITWr                         V1UnitI,                                          rbit	w18, w10                       // RBIT <Wd>, <Wn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    RBITXr                         V1UnitI,                                          rbit	x17, x10                       // RBIT <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    RBIT_ZPmZ_B                    V1UnitV, V1UnitV01,                               rbit	z6.b, p6/m, z2.b               // RBIT <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Count/reverse bits  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  2      3    3     0.50     SE   RDFFR_PPz                      V1UnitI[2], V1UnitM[2], V1UnitM0[2],              rdffr	p5.b, p0/z                     // RDFFR <Pd>.B, <Pg>/Z  \\ Read first fault register, predicated  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     1.00     SE   RDFFR_P                        V1UnitI, V1UnitM, V1UnitM0,                       rdffr	p0.b                           // RDFFR <Pd>.B  \\ Read first fault register, unpredicated  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      4    4     2.00     SE   RDFFRS_PPz                     V1UnitI, V1UnitM,                                 rdffrs	p2.b, p5/z                     // RDFFRS <Pd>.B, <Pg>/Z  \\ Read first fault register and set flags  \\ 1 4  4  2.00 V1UnitM[7]
# CHECK-NEXT:  1      2    2     1.00     -    RDVLI_XI                       V1UnitI, V1UnitM, V1UnitM0,                       rdvl	x17, #4                        // RDVL <Xd>, #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     2.00     SE   RET                            V1UnitB,                                          ret                                  // RET  \\ Branch, register  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     SE   RET                            V1UnitB,                                          ret	x24                            // RET {<Xn>}  \\ Branch, register  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      2    2     1.00     -    REV_PP_H                       V1UnitI, V1UnitM, V1UnitM0,                       rev	p2.h, p1.h                     // REV <Pd>.<T>, <Pn>.<T>  \\ Predicate reverse  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     2.00     -    REV_ZZ_H                       V1UnitV, V1UnitV01,                               rev	z3.h, z6.h                     // REV <Zd>.<T>, <Zn>.<T>  \\ Reverse, vector  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    REVWr                          V1UnitI,                                          rev	w0, w24                        // REV <Wd>, <Wn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    REVXr                          V1UnitI,                                          rev	x3, x26                        // REV <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    REV16v16i8                     V1UnitV,                                          rev16	v23.16b, v4.16b                // REV16 <Vd>.<T>, <Vn>.<T>  \\ ASIMD reverse  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    REV16Wr                        V1UnitI,                                          rev16	w18, w9                        // REV16 <Wd>, <Wn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    REV16Xr                        V1UnitI,                                          rev16	x17, x30                       // REV16 <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    REV32v4i16                     V1UnitV,                                          rev32	v31.4h, v30.4h                 // REV32 <Vd>.<T>, <Vn>.<T>  \\ ASIMD reverse  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    REV32Xr                        V1UnitI,                                          rev32	x4, x29                        // REV32 <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    REVXr                          V1UnitI,                                          rev	x16, x12                       // REV64 <Xd>, <Xn>  \\ Reverse bits/bytes  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     4.00     -    REV64v4i32                     V1UnitV,                                          rev64	v5.4s, v10.4s                  // REV64 <Vd>.<T>, <Vn>.<T>  \\ ASIMD reverse  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    REVB_ZPmZ_H                    V1UnitV, V1UnitV01,                               revb	z25.h, p5/m, z17.h             // REVB <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Reverse, vector  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    REVH_ZPmZ_D                    V1UnitV, V1UnitV01,                               revh	z29.d, p0/m, z6.d              // REVH <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Reverse, vector  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    REVW_ZPmZ_D                    V1UnitV, V1UnitV01,                               revw	z15.d, p3/m, z4.d              // REVW <Zd>.D, <Pg>/M, <Zn>.D  \\ Reverse, vector  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    EXTRWrri                       V1UnitI,                                          ror	w1, w3, #31                    // ROR <Wd>, <Ws>, #<shifts>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    EXTRXrri                       V1UnitI,                                          ror	x30, x25, #49                  // ROR <Xd>, <Xs>, #<shiftd>  \\ Move, shift by immed, no flagset  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    RORVWr                         V1UnitI,                                          ror	w4, w21, w1                    // ROR <Wd>, <Wn>, <Wm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    RORVXr                         V1UnitI,                                          ror	x11, x5, x20                   // ROR <Xd>, <Xn>, <Xm>  \\ Move, shift by register, no flagset, unconditional  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    RORVWr                         V1UnitI,                                          ror	w8, w28, w22                   // RORV <Wd>, <Wn>, <Wm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    RORVXr                         V1UnitI,                                          ror	x0, x12, x0                    // RORV <Xd>, <Xn>, <Xm>  \\ Variable shift  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      4    4     2.00     -    RSHRNv8i8_shift                V1UnitV, V1UnitV13,                               rshrn	v31.8b, v12.8h, #5             // RSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    RSHRNv4i16_shift               V1UnitV, V1UnitV13,                               rshrn	v3.4h, v24.4s, #8              // RSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    RSHRNv2i32_shift               V1UnitV, V1UnitV13,                               rshrn	v1.2s, v5.2d, #29              // RSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    RSHRNv16i8_shift               V1UnitV, V1UnitV13,                               rshrn2	v4.16b, v8.8h, #2              // RSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    RSHRNv8i16_shift               V1UnitV, V1UnitV13,                               rshrn2	v17.8h, v20.4s, #1             // RSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    RSHRNv4i32_shift               V1UnitV, V1UnitV13,                               rshrn2	v15.4s, v8.2d, #3              // RSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     4.00     -    RSUBHNv8i16_v8i8               V1UnitV,                                          rsubhn	v18.8b, v28.8h, v13.8h         // RSUBHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    RSUBHNv2i64_v4i32              V1UnitV,                                          rsubhn2	v10.4s, v18.2d, v15.2d  // RSUBHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      4    1     2.00     -    SABAv8i8                       V1UnitV, V1UnitV13,                               saba	v26.8b, v4.8b, v22.8b          // SABA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD absolute diff accum  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SABALv2i32_v2i64               V1UnitV, V1UnitV13,                               sabal	v23.2d, v16.2s, v7.2s          // SABAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff accum long  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SABALv4i32_v2i64               V1UnitV, V1UnitV13,                               sabal2	v3.2d, v17.4s, v12.4s          // SABAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff accum long  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SABDv8i16                      V1UnitV,                                          sabd	v21.8h, v13.8h, v19.8h         // SABD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD absolute diff  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    SABD_ZPmZ_H                    V1UnitV, V1UnitV01,                               sabd	z6.h, p2/m, z6.h, z28.h        // SABD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    SABDLv8i8_v8i16                V1UnitV,                                          sabdl	v8.8h, v11.8b, v17.8b          // SABDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff long  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SABDLv4i32_v2i64               V1UnitV,                                          sabdl2	v29.2d, v8.4s, v14.4s          // SABDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff long  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      4    1     2.00     -    SADALPv8i8_v4i16               V1UnitV, V1UnitV13,                               sadalp	v23.4h, v6.8b                  // SADALP <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD pairwise add and accumulate long  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SADDLv8i8_v8i16                V1UnitV,                                          saddl	v23.8h, v14.8b, v25.8b         // SADDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SADDLv4i32_v2i64               V1UnitV,                                          saddl2	v5.2d, v6.4s, v8.4s            // SADDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SADDLPv8i8_v4i16               V1UnitV,                                          saddlp	v21.4h, v4.8b                  // SADDLP <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD arith, pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    SADDLVv8i8v                    V1UnitV[2], V1UnitV13,                            saddlv	h27, v23.8b                    // SADDLV H<d>, <Vn>.8B  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  2      4    4     1.00     -    SADDLVv16i8v                   V1UnitV[2], V1UnitV13[2],                         saddlv	h20, v1.16b                    // SADDLV H<d>, <Vn>.16B  \\ ASIMD arith, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
# CHECK-NEXT:  1      2    2     2.00     -    SADDLVv4i16v                   V1UnitV, V1UnitV13,                               saddlv	s23, v10.4h                    // SADDLV S<d>, <Vn>.4H  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  2      4    4     2.00     -    SADDLVv8i16v                   V1UnitV[2], V1UnitV13,                            saddlv	s9, v28.8h                     // SADDLV S<d>, <Vn>.8H  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SADDLVv4i32v                   V1UnitV, V1UnitV13,                               saddlv	d12, v9.4s                     // SADDLV D<d>, <Vn>.4S  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  5      14   14    0.50     -    SADDV_VPZ_B                    V1UnitV[5], V1UnitV0, V1UnitV1[2], V1UnitV01[3], V1UnitV02, V1UnitV13[3],   saddv	d31, p2, z30.b  // SADDV <Dd>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      12   12    0.50     -    SADDV_VPZ_H                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   saddv	d21, p7, z0.h          // SADDV <Dd>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      10   10    0.50     -    SADDV_VPZ_S                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   saddv	d25, p2, z4.s          // SADDV <Dd>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
# CHECK-NEXT:  1      2    2     4.00     -    SADDWv2i32_v2i64               V1UnitV,                                          saddw	v17.2d, v12.2d, v26.2s         // SADDW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SADDWv8i16_v4i32               V1UnitV,                                          saddw2	v14.4s, v10.4s, v31.8h         // SADDW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    SBCWr                          V1UnitI,                                          sbc	w0, w6, w1                     // SBC <Wd>, <Wn>, <Wm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SBCXr                          V1UnitI,                                          sbc	x28, x29, x16                  // SBC <Xd>, <Xn>, <Xm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     3.00     -    SBCSWr                         V1UnitFlg, V1UnitI,                               sbcs	w15, w7, w17                   // SBCS <Wd>, <Wn>, <Wm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SBCSXr                         V1UnitFlg, V1UnitI,                               sbcs	x16, x21, x15                  // SBCS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     4.00     -    SBFMWri                        V1UnitI,                                          sbfiz	w22, w6, #14, #13              // SBFIZ <Wd>, <Wn>, #<lsbs>, #<widths>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    SBFMXri                        V1UnitI,                                          sbfiz	x6, x25, #20, #16              // SBFIZ <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    SBFMWri                        V1UnitI,                                          sbfiz	w25, w20, #2, #9               // SBFM <Wd>, <Wn>, #<immrs>, #<immss>  \\ Bitfield move, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SBFMXri                        V1UnitI,                                          sbfx	x5, x28, #2, #39               // SBFM <Xd>, <Xn>, #<immrd>, #<immsd>  \\ Bitfield move, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SBFMWri                        V1UnitI,                                          sbfx	w25, w10, #8, #7               // SBFX <Wd>, <Wn>, #<lsbs>, #<widths>  \\ Bit field extract  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SBFMXri                        V1UnitI,                                          sbfx	x23, x12, #53, #4              // SBFX <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ Bit field extract  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFSWHri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	h19, w19, #31                  // SCVTF <Hd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFSWSri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	s2, w9, #21                    // SCVTF <Sd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFSWDri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	d4, w1, #15                    // SCVTF <Dd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFSXHri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	h30, x18, #63                  // SCVTF <Hd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFSXSri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	s23, x16, #45                  // SCVTF <Sd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFSXDri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	d30, x21, #59                  // SCVTF <Dd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFUWHri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	h3, w5                         // SCVTF <Hd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFUWSri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	s25, w17                       // SCVTF <Sd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFUWDri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	d15, w30                       // SCVTF <Dd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFUXHri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	h28, x22                       // SCVTF <Hd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFUXSri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	s2, x7                         // SCVTF <Sd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTFUXDri                     V1UnitI, V1UnitM, V1UnitM0,                       scvtf	d11, x0                        // SCVTF <Dd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  4      6    6     1.00     -    SCVTFh                         V1UnitV[2], V1UnitV02[2],                         scvtf	h29, h27, #11                  // SCVTF H<d>, H<n>, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
# CHECK-NEXT:  2      4    4     1.00     -    SCVTFs                         V1UnitV[2], V1UnitV02[2],                         scvtf	s20, s5, #1                    // SCVTF S<d>, S<n>, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SCVTFd                         V1UnitV, V1UnitV02,                               scvtf	d23, d0, #59                   // SCVTF D<d>, D<n>, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    SCVTFv4i16_shift               V1UnitV[2], V1UnitV02[2],                         scvtf	v3.4h, v29.4h, #3              // SCVTF <Vd>.4H, <Vn>.4H, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    SCVTFv8i16_shift               V1UnitV[2], V1UnitV02[2],                         scvtf	v29.8h, v23.8h, #13            // SCVTF <Vd>.8H, <Vn>.8H, #<hfbits>  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    SCVTFv2i32_shift               V1UnitV, V1UnitV02,                               scvtf	v1.2s, v3.2s, #1               // SCVTF <Vd>.2S, <Vn>.2S, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    SCVTFv4i32_shift               V1UnitV[2], V1UnitV02[2],                         scvtf	v30.4s, v5.4s, #16             // SCVTF <Vd>.4S, <Vn>.4S, #<sfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    SCVTFv2i64_shift               V1UnitV, V1UnitV02,                               scvtf	v26.2d, v4.2d, #24             // SCVTF <Vd>.2D, <Vn>.2D, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  4      6    6     1.00     -    SCVTFv1i16                     V1UnitV[2], V1UnitV02[2],                         scvtf	h7, h4                         // SCVTF <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
# CHECK-NEXT:  2      4    4     1.00     -    SCVTFv1i32                     V1UnitV[2], V1UnitV02[2],                         scvtf	s19, s4                        // SCVTF S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SCVTFv1i64                     V1UnitV, V1UnitV02,                               scvtf	d12, d29                       // SCVTF D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    SCVTFv4f16                     V1UnitV[2], V1UnitV02[2],                         scvtf	v5.4h, v10.4h                  // SCVTF <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    SCVTFv8f16                     V1UnitV[2], V1UnitV02[2],                         scvtf	v8.8h, v16.8h                  // SCVTF <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    SCVTFv2f32                     V1UnitV, V1UnitV02,                               scvtf	v18.2s, v2.2s                  // SCVTF <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    SCVTFv4f32                     V1UnitV[2], V1UnitV02[2],                         scvtf	v14.4s, v23.4s                 // SCVTF <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    SCVTFv2f64                     V1UnitV, V1UnitV02,                               scvtf	v24.2d, v21.2d                 // SCVTF <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  4      6    6     0.25     -    SCVTF_ZPmZ_HtoH                V1UnitV[4], V1UnitV0[4], V1UnitV01[4], V1UnitV02[4],   scvtf	z8.h, p1/m, z2.h       // SCVTF <Zd>.H, <Pg>/M, <Zn>.H  \\ Convert to floating point, 16b to half  \\ 4 6  6  0.25 V1UnitV0[4]
# CHECK-NEXT:  2      4    4     0.50     -    SCVTF_ZPmZ_StoH                V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   scvtf	z8.h, p4/m, z28.s      // SCVTF <Zd>.H, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 2 4  4  0.50 V1UnitV0[2]
# CHECK-NEXT:  2      4    4     0.50     -    SCVTF_ZPmZ_StoS                V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   scvtf	z4.s, p4/m, z29.s      // SCVTF <Zd>.S, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 2 4  4  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    SCVTF_ZPmZ_StoD                V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          scvtf	z21.d, p3/m, z22.s             // SCVTF <Zd>.D, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 1 3  3  1.00 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    SCVTF_ZPmZ_DtoH                V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          scvtf	z23.h, p5/m, z1.d              // SCVTF <Zd>.H, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTF_ZPmZ_DtoS                V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          scvtf	z23.s, p2/m, z11.d             // SCVTF <Zd>.S, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    SCVTF_ZPmZ_DtoD                V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          scvtf	z22.d, p5/m, z15.d             // SCVTF <Zd>.D, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      12   12    0.20     -    SDIVWr                         V1UnitI[5], V1UnitM[5], V1UnitM0[5],              sdiv	w11, w4, w18                   // SDIV <Wd>, <Wn>, <Wm>  \\ Divide, W-form  \\ 1 12  12  0.20 V1UnitM0[13]
# CHECK-NEXT:  1      20   20    0.20     -    SDIVXr                         V1UnitI[5], V1UnitM[5], V1UnitM0[5],              sdiv	x1, x30, x15                   // SDIV <Xd>, <Xn>, <Xm>  \\ Divide, X-form  \\ 1 20  20  0.20 V1UnitM0[21]
# CHECK-NEXT:  1      12   12    0.14     -    SDIV_ZPmZ_S                    V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   sdiv	z28.s, p2/m, z28.s, z3.s  // SDIV <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Divides, 32 bit   \\ 1 12  12  0.14 V1UnitV0[12]
# CHECK-NEXT:  1      20   20    0.14     -    SDIV_ZPmZ_D                    V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   sdiv	z9.d, p3/m, z9.d, z31.d  // SDIV <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Divides, 64 bit  \\ 1 20  20  0.14 V1UnitV0[21]
# CHECK-NEXT:  1      12   12    0.14     -    SDIVR_ZPmZ_S                   V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   sdivr	z6.s, p2/m, z6.s, z0.s  // SDIVR <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Divides, 32 bit   \\ 1 12  12  0.14 V1UnitV0[12]
# CHECK-NEXT:  1      20   20    0.14     -    SDIVR_ZPmZ_D                   V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   sdivr	z28.d, p3/m, z28.d, z10.d  // SDIVR <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Divides, 64 bit  \\ 1 20  20  0.14 V1UnitV0[21]
# CHECK-NEXT:  1      3    1     2.00     -    SDOT_ZZZI_S                    V1UnitV, V1UnitV01,                               sdot	z7.s, z7.b, z5.b[2]            // SDOT <Zda>.S, <Zn>.B, <Zmb>.B[<imms>]  \\ Dot product, 8 bit  \\ 1 3 1 2.0 V1UnitV01
# CHECK-NEXT:  1      4    1     1.00     -    SDOT_ZZZI_D                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sdot	z24.d, z28.h, z10.h[0]         // SDOT <Zda>.D, <Zn>.H, <Zmh>.H[<immd>]  \\ Dot product, 16 bit  \\ 1 4 1 1.0 V1UnitV0
# CHECK-NEXT:  1      3    1     2.00     -    SDOT_ZZZ_S                     V1UnitV, V1UnitV01,                               sdot	z28.s, z23.b, z1.b             // SDOT <Zda>.S, <Zn>.B, <Zm>.B  \\ Dot product, 8 bit  \\ 1 3 1 2.0 V1UnitV01
# CHECK-NEXT:  1      4    1     1.00     -    SDOT_ZZZ_D                     V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sdot	z30.d, z14.h, z13.h            // SDOT <Zda>.D, <Zn>.H, <Zm>.H  \\ Dot product, 16 bit  \\ 1 4 1 1.0 V1UnitV0
# CHECK-NEXT:  1      3    1     4.00     -    SDOTlanev8i8                   V1UnitV,                                          sdot	v7.2s, v3.8b, v9.4b[2]         // SDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.4B[<indexs>]  \\ ASIMD dot product  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      3    1     4.00     -    SDOTv8i8                       V1UnitV,                                          sdot	v7.2s, v2.8b, v29.8b           // SDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD dot product  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      1    1     1.00     -    SEL_PPPP                       V1UnitI, V1UnitM, V1UnitM0,                       sel	p3.b, p5, p7.b, p0.b           // SEL <Pd>.B, <Pg>, <Pn>.B, <Pm>.B  \\ Predicate select  \\ 1 1  1  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     2.00     -    SEL_ZPZZ_D                     V1UnitV, V1UnitV01,                               sel	z29.d, p2, z30.d, z2.d         // SEL <Zd>.<T>, <Pv>, <Zn>.<T>, <Zm>.<T>  \\ Select, vector form  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     SE   SETFFR                         V1UnitI, V1UnitM, V1UnitM0,                       setffr                               // SETFFR  \\ Set first fault register  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             sev                                  // SEV  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             sevl                                 // SEVL  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     4.00     -    SHADDv2i32                     V1UnitV,                                          shadd	v11.2s, v1.2s, v31.2s          // SHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SHLd                           V1UnitV,                                          shl	d21, d28, #2                   // SHL <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, basic  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLv16i8_shift                 V1UnitV, V1UnitV13,                               shl	v21.16b, v31.16b, #6           // SHL <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLv8i16_shift                 V1UnitV, V1UnitV13,                               shl	v10.8h, v22.8h, #12            // SHL <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLv4i32_shift                 V1UnitV, V1UnitV13,                               shl	v4.4s, v27.4s, #30             // SHL <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLv2i64_shift                 V1UnitV, V1UnitV13,                               shl	v1.2d, v23.2d, #22             // SHL <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLLv8i8                       V1UnitV, V1UnitV13,                               shll	v9.8h, v26.8b, #8              // SHLL <Vd>.8H, <Vn>.8B, #8  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLLv4i16                      V1UnitV, V1UnitV13,                               shll	v11.4s, v24.4h, #16            // SHLL <Vd>.4S, <Vn>.4H, #16  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLLv2i32                      V1UnitV, V1UnitV13,                               shll	v13.2d, v15.2s, #32            // SHLL <Vd>.2D, <Vn>.2S, #32  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLLv16i8                      V1UnitV, V1UnitV13,                               shll2	v7.8h, v3.16b, #8              // SHLL2 <Vd>.8H, <Vn>.16B, #8  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLLv8i16                      V1UnitV, V1UnitV13,                               shll2	v14.4s, v31.8h, #16            // SHLL2 <Vd>.4S, <Vn>.8H, #16  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHLLv4i32                      V1UnitV, V1UnitV13,                               shll2	v17.2d, v9.4s, #32             // SHLL2 <Vd>.2D, <Vn>.4S, #32  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHRNv8i8_shift                 V1UnitV, V1UnitV13,                               shrn	v11.8b, v29.8h, #8             // SHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHRNv4i16_shift                V1UnitV, V1UnitV13,                               shrn	v30.4h, v3.4s, #14             // SHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHRNv2i32_shift                V1UnitV, V1UnitV13,                               shrn	v15.2s, v0.2d, #28             // SHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHRNv16i8_shift                V1UnitV, V1UnitV13,                               shrn2	v23.16b, v18.8h, #3            // SHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHRNv8i16_shift                V1UnitV, V1UnitV13,                               shrn2	v13.8h, v19.4s, #7             // SHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SHRNv4i32_shift                V1UnitV, V1UnitV13,                               shrn2	v25.4s, v7.2d, #7              // SHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SHSUBv2i32                     V1UnitV,                                          shsub	v19.2s, v30.2s, v1.2s          // SHSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SLId                           V1UnitV,                                          sli	d23, d23, #14                  // SLI <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SLIv16i8_shift                 V1UnitV, V1UnitV13,                               sli	v22.16b, v22.16b, #0           // SLI <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SLIv8i16_shift                 V1UnitV, V1UnitV13,                               sli	v9.8h, v27.8h, #4              // SLI <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SLIv2i32_shift                 V1UnitV, V1UnitV13,                               sli	v7.2s, v22.2s, #22             // SLI <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SLIv2i64_shift                 V1UnitV, V1UnitV13,                               sli	v6.2d, v26.2d, #11             // SLI <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    1     1.00     -    SMADDLrrr                      V1UnitI, V1UnitM, V1UnitM0,                       smaddl	x20, w30, w19, x18             // SMADDL <Xd>, <Wn>, <Wm>, <Xa>  \\ Multiply accumulate long  \\ 1 2 1 1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     2.00     -    SMAX_ZI_D                      V1UnitV, V1UnitV01,                               smax	z20.d, z20.d, #-4              // SMAX <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SMAX_ZPmZ_S                    V1UnitV, V1UnitV01,                               smax	z4.s, p3/m, z4.s, z17.s        // SMAX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    SMAXv4i16                      V1UnitV,                                          smax	v3.4h, v3.4h, v1.4h            // SMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SMAXPv8i8                      V1UnitV,                                          smaxp	v0.8b, v24.8b, v6.8b           // SMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    SMAXVv8i8v                     V1UnitV[2], V1UnitV13,                            smaxv	b5, v26.8b                     // SMAXV B<d>, <Vn>.8B  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  2      4    4     1.00     -    SMAXVv16i8v                    V1UnitV[2], V1UnitV13[2],                         smaxv	b6, v16.16b                    // SMAXV B<d>, <Vn>.16B  \\ ASIMD max/min, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
# CHECK-NEXT:  1      2    2     2.00     -    SMAXVv4i16v                    V1UnitV, V1UnitV13,                               smaxv	h10, v20.4h                    // SMAXV H<d>, <Vn>.4H  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  2      4    4     2.00     -    SMAXVv8i16v                    V1UnitV[2], V1UnitV13,                            smaxv	h27, v31.8h                    // SMAXV H<d>, <Vn>.8H  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SMAXVv4i32v                    V1UnitV, V1UnitV13,                               smaxv	s16, v28.4s                    // SMAXV S<d>, <Vn>.4S  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  5      14   14    0.50     -    SMAXV_VPZ_B                    V1UnitV[5], V1UnitV0, V1UnitV1[2], V1UnitV01[3], V1UnitV02, V1UnitV13[3],   smaxv	b4, p6, z20.b  // SMAXV B<d>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      12   12    0.50     -    SMAXV_VPZ_H                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   smaxv	h8, p0, z18.h          // SMAXV H<d>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      10   10    0.50     -    SMAXV_VPZ_S                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   smaxv	s21, p4, z6.s          // SMAXV S<d>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
# CHECK-NEXT:  2      8    8     2.00     -    SMAXV_VPZ_D                    V1UnitV[2], V1UnitV01,                            smaxv	d24, p1, z16.d                 // SMAXV D<d>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
# CHECK-NEXT:  1      1    1     15.00    SE   SMC                                                                              smc	#0xc036                        // SMC #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     2.00     -    SMIN_ZI_S                      V1UnitV, V1UnitV01,                               smin	z31.s, z31.s, #57              // SMIN <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SMIN_ZPmZ_D                    V1UnitV, V1UnitV01,                               smin	z12.d, p4/m, z12.d, z29.d      // SMIN <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    SMINv16i8                      V1UnitV,                                          smin	v24.16b, v30.16b, v26.16b      // SMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SMINPv4i32                     V1UnitV,                                          sminp	v9.4s, v0.4s, v6.4s            // SMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    SMINVv8i8v                     V1UnitV[2], V1UnitV13,                            sminv	b22, v14.8b                    // SMINV B<d>, <Vn>.8B  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  2      4    4     1.00     -    SMINVv16i8v                    V1UnitV[2], V1UnitV13[2],                         sminv	b2, v5.16b                     // SMINV B<d>, <Vn>.16B  \\ ASIMD max/min, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
# CHECK-NEXT:  1      2    2     2.00     -    SMINVv4i16v                    V1UnitV, V1UnitV13,                               sminv	h1, v11.4h                     // SMINV H<d>, <Vn>.4H  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  2      4    4     2.00     -    SMINVv8i16v                    V1UnitV[2], V1UnitV13,                            sminv	h20, v5.8h                     // SMINV H<d>, <Vn>.8H  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SMINVv4i32v                    V1UnitV, V1UnitV13,                               sminv	s26, v28.4s                    // SMINV S<d>, <Vn>.4S  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  5      14   14    0.50     -    SMINV_VPZ_B                    V1UnitV[5], V1UnitV0, V1UnitV1[2], V1UnitV01[3], V1UnitV02, V1UnitV13[3],   sminv	b22, p4, z31.b  // SMINV B<d>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      12   12    0.50     -    SMINV_VPZ_H                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   sminv	h8, p1, z10.h          // SMINV H<d>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      10   10    0.50     -    SMINV_VPZ_S                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   sminv	s23, p6, z22.s         // SMINV S<d>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
# CHECK-NEXT:  2      8    8     2.00     -    SMINV_VPZ_D                    V1UnitV[2], V1UnitV01,                            sminv	d19, p3, z24.d                 // SMINV D<d>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
# CHECK-NEXT:  1      4    1     2.00     -    SMLALv4i16_indexed             V1UnitV, V1UnitV02,                               smlal	v0.4s, v31.4h, v6.h[2]         // SMLAL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLALv2i32_indexed             V1UnitV, V1UnitV02,                               smlal	v12.2d, v10.2s, v1.s[1]        // SMLAL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLALv8i16_indexed             V1UnitV, V1UnitV02,                               smlal2	v31.4s, v12.8h, v4.h[2]        // SMLAL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLALv4i32_indexed             V1UnitV, V1UnitV02,                               smlal2	v0.2d, v13.4s, v5.s[1]         // SMLAL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLALv8i8_v8i16                V1UnitV, V1UnitV02,                               smlal	v23.8h, v10.8b, v0.8b          // SMLAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLALv4i32_v2i64               V1UnitV, V1UnitV02,                               smlal2	v20.2d, v13.4s, v12.4s         // SMLAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLSLv4i16_indexed             V1UnitV, V1UnitV02,                               smlsl	v17.4s, v0.4h, v12.h[2]        // SMLSL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLSLv2i32_indexed             V1UnitV, V1UnitV02,                               smlsl	v14.2d, v21.2s, v0.s[0]        // SMLSL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLSLv8i16_indexed             V1UnitV, V1UnitV02,                               smlsl2	v14.4s, v26.8h, v12.h[1]       // SMLSL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLSLv4i32_indexed             V1UnitV, V1UnitV02,                               smlsl2	v26.2d, v30.4s, v4.s[2]        // SMLSL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLSLv2i32_v2i64               V1UnitV, V1UnitV02,                               smlsl	v2.2d, v28.2s, v22.2s          // SMLSL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    SMLSLv4i32_v2i64               V1UnitV, V1UnitV02,                               smlsl2	v31.2d, v22.4s, v18.4s         // SMLSL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      3    1     4.00     -    SMMLA                          V1UnitV,                                          smmla	v23.4s, v16.16b, v0.16b        // SMMLA <Vd>.4S, <Vn>.16B, <Vm>.16B  \\ ASIMD matrix multiply-accumulate  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    SMSUBLrrr                      V1UnitI, V1UnitM,                                 smnegl	x26, w22, w4                   // SMNEGL <Xd>, <Wn>, <Wm>  \\ Multiply long  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     4.00     SE   SMOVvi8to32_idx0               V1UnitV,                                          smov	w21, v28.b[0]                  // SMOV <Wd>, <Vn>.B[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    SMOVvi8to32                    V1UnitV,                                          smov	w27, v30.b[7]                  // SMOV <Wd>, <Vn>.B[<indexb>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     SE   SMOVvi16to32_idx0              V1UnitV,                                          smov	w17, v22.h[0]                  // SMOV <Wd>, <Vn>.H[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    SMOVvi16to32                   V1UnitV,                                          smov	w1, v12.h[2]                   // SMOV <Wd>, <Vn>.H[<indexh>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     SE   SMOVvi8to64_idx0               V1UnitV,                                          smov	x4, v10.b[0]                   // SMOV <Xd>, <Vn>.B[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    SMOVvi8to64                    V1UnitV,                                          smov	x4, v5.b[9]                    // SMOV <Xd>, <Vn>.B[<indexb>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     SE   SMOVvi16to64_idx0              V1UnitV,                                          smov	x17, v22.h[0]                  // SMOV <Xd>, <Vn>.H[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    SMOVvi16to64                   V1UnitV,                                          smov	x14, v11.h[5]                  // SMOV <Xd>, <Vn>.H[<indexh>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     SE   SMOVvi32to64_idx0              V1UnitV,                                          smov	x24, v3.s[0]                   // SMOV <Xd>, <Vn>.S[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    SMOVvi32to64                   V1UnitV,                                          smov	x21, v8.s[3]                   // SMOV <Xd>, <Vn>.S[<indexs>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    1     1.00     -    SMSUBLrrr                      V1UnitI, V1UnitM, V1UnitM0,                       smsubl	x27, w4, w1, x22               // SMSUBL <Xd>, <Wn>, <Wm>, <Xa>  \\ Multiply accumulate long  \\ 1 2 1 1.0 V1UnitM0
# CHECK-NEXT:  1      4    4     1.00     -    SMULH_ZPmZ_B                   V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          smulh	z11.b, p2/m, z11.b, z30.b      // SMULH <Zdn>.B, <Pg>/M, <Zdn>.B, <Zm>.B  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    SMULH_ZPmZ_H                   V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          smulh	z6.h, p0/m, z6.h, z8.h         // SMULH <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    SMULH_ZPmZ_S                   V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          smulh	z26.s, p0/m, z26.s, z4.s       // SMULH <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  2      5    5     0.50     -    SMULH_ZPmZ_D                   V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   smulh	z29.d, p0/m, z29.d, z18.d  // SMULH <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Multiply, D element size  \\ 2 5  5  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     2.00     -    SMULHrr                        V1UnitI, V1UnitM,                                 smulh	x3, x21, x6                    // SMULH <Xd>, <Xn>, <Xm>  \\ Multiply high  \\ 1 3  3  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SMADDLrrr                      V1UnitI, V1UnitM,                                 smull	x25, w18, w28                  // SMULL <Xd>, <Wn>, <Wm>  \\ Multiply long  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      3    3     2.00     -    SMULLv4i16_indexed             V1UnitV, V1UnitV02,                               smull	v16.4s, v1.4h, v9.h[5]         // SMULL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SMULLv2i32_indexed             V1UnitV, V1UnitV02,                               smull	v7.2d, v16.2s, v7.s[2]         // SMULL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SMULLv8i16_indexed             V1UnitV, V1UnitV02,                               smull2	v26.4s, v18.8h, v3.h[1]        // SMULL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SMULLv4i32_indexed             V1UnitV, V1UnitV02,                               smull2	v4.2d, v25.4s, v6.s[1]         // SMULL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SMULLv4i16_v4i32               V1UnitV, V1UnitV02,                               smull	v22.4s, v0.4h, v27.4h          // SMULL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SMULLv4i32_v2i64               V1UnitV, V1UnitV02,                               smull2	v13.2d, v25.4s, v30.4s         // SMULL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      2    2     4.00     -    SQABSv1i8                      V1UnitV,                                          sqabs	b7, b11                        // SQABS <V><d>, <V><n>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SQABSv2i32                     V1UnitV,                                          sqabs	v27.2s, v1.2s                  // SQABS <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    SQADD_ZI_B                     V1UnitV, V1UnitV01,                               sqadd	z10.b, z10.b, #241             // SQADD <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SQADD_ZI_S                     V1UnitV, V1UnitV01,                               sqadd	z7.s, z7.s, #12                // SQADD <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SQADD_ZI_S                     V1UnitV, V1UnitV01,                               sqadd	z3.s, z3.s, #45568             // SQADD <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SQADD_ZZZ_D                    V1UnitV, V1UnitV01,                               sqadd	z1.d, z24.d, z25.d             // SQADD <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    SQADDv1i8                      V1UnitV,                                          sqadd	b8, b20, b2                    // SQADD <V><d>, <V><n>, <V><m>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SQADDv4i32                     V1UnitV,                                          sqadd	v14.4s, v15.4s, v18.4s         // SQADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    SQDECB_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecb	x30, w30                       // SQDECB <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECB_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecb	x14, w14, pow2                 // SQDECB <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECB_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecb	x15, w15, vl6, mul #11         // SQDECB <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecb	x21                            // SQDECB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecb	x25, vl4                       // SQDECB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecb	x12, vl32, mul #2              // SQDECB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECD_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecd	x5, w5                         // SQDECD <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECD_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecd	x10, w10, pow2                 // SQDECD <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECD_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecd	x8, w8, all, mul #3            // SQDECD <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecd	x23                            // SQDECD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecd	x0, vl6                        // SQDECD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecd	x17, vl64, mul #14             // SQDECD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqdecd	z17.d                          // SQDECD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQDECD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqdecd	z3.d, vl7                      // SQDECD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQDECD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqdecd	z0.d, vl64, mul #14            // SQDECD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQDECH_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdech	x2, w2                         // SQDECH <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECH_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdech	x22, w22, mul3                 // SQDECH <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECH_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdech	x19, w19, vl5, mul #2          // SQDECH <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdech	x11                            // SQDECH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdech	x7, vl5                        // SQDECH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdech	x16, pow2, mul #15             // SQDECH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqdech	z4.h                           // SQDECH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQDECH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqdech	z0.h, vl1                      // SQDECH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQDECH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqdech	z27.h, vl7                     // SQDECH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQDECP_XPWd_S                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecp	x14, p3.s, w14                 // SQDECP <Xdn>, <Pm>.<T>, <Wdn>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECP_XP_B                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecp	x24, p2.b                      // SQDECP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  3      7    7     0.50     -    SQDECP_ZP_S                    V1UnitI[2], V1UnitM[2], V1UnitM0[2], V1UnitV, V1UnitV01,   sqdecp	z6.s, p7.s     // SQDECP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
# CHECK-NEXT:  1      2    2     1.00     -    SQDECW_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecw	x24, w24                       // SQDECW <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECW_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecw	x8, w8, pow2                   // SQDECW <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECW_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqdecw	x26, w26, vl256, mul #9        // SQDECW <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecw	x17                            // SQDECW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecw	x23, vl64                      // SQDECW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqdecw	x20, mul3, mul #2              // SQDECW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQDECW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqdecw	z9.s                           // SQDECW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQDECW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqdecw	z28.s, pow2                    // SQDECW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQDECW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqdecw	z7.s, vl7, mul #16             // SQDECW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLALv1i32_indexed           V1UnitV, V1UnitV02,                               sqdmlal	s19, h27, v14.h[7]     // SQDMLAL S<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLALv1i64_indexed           V1UnitV, V1UnitV02,                               sqdmlal	d1, s16, v3.s[2]       // SQDMLAL D<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLALv4i16_indexed           V1UnitV, V1UnitV02,                               sqdmlal	v7.4s, v30.4h, v0.h[1]  // SQDMLAL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLALv2i32_indexed           V1UnitV, V1UnitV02,                               sqdmlal	v11.2d, v17.2s, v5.s[3]  // SQDMLAL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLALv8i16_indexed           V1UnitV, V1UnitV02,                               sqdmlal2	v24.4s, v26.8h, v10.h[2]  // SQDMLAL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLALv4i32_indexed           V1UnitV, V1UnitV02,                               sqdmlal2	v29.2d, v28.4s, v2.s[1]  // SQDMLAL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLALi16                     V1UnitV, V1UnitV02,                               sqdmlal	s25, h21, h7           // SQDMLAL <Va><d>, <Vb><n>, <Vb><m>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLALv4i16_v4i32             V1UnitV, V1UnitV02,                               sqdmlal	v2.4s, v11.4h, v21.4h  // SQDMLAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLALv8i16_v4i32             V1UnitV, V1UnitV02,                               sqdmlal2	v8.4s, v2.8h, v5.8h    // SQDMLAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLSLv1i32_indexed           V1UnitV, V1UnitV02,                               sqdmlsl	s28, h2, v0.h[4]       // SQDMLSL S<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLSLv1i64_indexed           V1UnitV, V1UnitV02,                               sqdmlsl	d1, s13, v0.s[2]       // SQDMLSL D<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLSLv4i16_indexed           V1UnitV, V1UnitV02,                               sqdmlsl	v6.4s, v15.4h, v0.h[7]  // SQDMLSL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLSLv2i32_indexed           V1UnitV, V1UnitV02,                               sqdmlsl	v9.2d, v19.2s, v2.s[2]  // SQDMLSL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLSLv8i16_indexed           V1UnitV, V1UnitV02,                               sqdmlsl2	v23.4s, v6.8h, v7.h[6]  // SQDMLSL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLSLv4i32_indexed           V1UnitV, V1UnitV02,                               sqdmlsl2	v20.2d, v26.4s, v4.s[2]  // SQDMLSL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLSLi32                     V1UnitV, V1UnitV02,                               sqdmlsl	d9, s4, s30            // SQDMLSL <Va><d>, <Vb><n>, <Vb><m>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLSLv2i32_v2i64             V1UnitV, V1UnitV02,                               sqdmlsl	v28.2d, v28.2s, v6.2s  // SQDMLSL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMLSLv8i16_v4i32             V1UnitV, V1UnitV02,                               sqdmlsl2	v30.4s, v27.8h, v31.8h  // SQDMLSL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate saturating long  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMULHv1i16_indexed           V1UnitV, V1UnitV02,                               sqdmulh	h24, h28, v7.h[3]      // SQDMULH H<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMULHv1i32_indexed           V1UnitV, V1UnitV02,                               sqdmulh	s11, s24, v4.s[3]      // SQDMULH S<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMULHv8i16_indexed           V1UnitV, V1UnitV02,                               sqdmulh	v20.8h, v1.8h, v13.h[4]  // SQDMULH <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMULHv2i32_indexed           V1UnitV, V1UnitV02,                               sqdmulh	v13.2s, v26.2s, v5.s[3]  // SQDMULH <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMULHv1i16                   V1UnitV, V1UnitV02,                               sqdmulh	h24, h1, h30           // SQDMULH <V><d>, <V><n>, <V><m>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQDMULHv4i32                   V1UnitV, V1UnitV02,                               sqdmulh	v8.4s, v4.4s, v11.4s   // SQDMULH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SQDMULLv1i32_indexed           V1UnitV, V1UnitV02,                               sqdmull	s21, h1, v4.h[5]       // SQDMULL S<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SQDMULLv1i64_indexed           V1UnitV, V1UnitV02,                               sqdmull	d11, s10, v4.s[2]      // SQDMULL D<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SQDMULLv4i16_indexed           V1UnitV, V1UnitV02,                               sqdmull	v29.4s, v4.4h, v9.h[7]  // SQDMULL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SQDMULLv2i32_indexed           V1UnitV, V1UnitV02,                               sqdmull	v0.2d, v4.2s, v6.s[1]  // SQDMULL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SQDMULLv8i16_indexed           V1UnitV, V1UnitV02,                               sqdmull2	v25.4s, v15.8h, v14.h[0]  // SQDMULL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SQDMULLv4i32_indexed           V1UnitV, V1UnitV02,                               sqdmull2	v13.2d, v7.4s, v0.s[3]  // SQDMULL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      2    2     4.00     -    SQDMULLi32                     V1UnitV,                                          sqdmull	d15, s7, s30           // SQDMULL <Va><d>, <Vb><n>, <Vb><m>  \\ ASIMD multiply long  \\ 1 2  2  4.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SQDMULLv2i32_v2i64             V1UnitV, V1UnitV02,                               sqdmull	v27.2d, v16.2s, v0.2s  // SQDMULL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    SQDMULLv4i32_v2i64             V1UnitV, V1UnitV02,                               sqdmull2	v30.2d, v9.4s, v27.4s  // SQDMULL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      2    2     1.00     -    SQINCB_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqincb	x13, w13                       // SQINCB <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCB_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqincb	x12, w12, pow2                 // SQINCB <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCB_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqincb	x12, w12, vl4, mul #4          // SQINCB <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqincb	x11                            // SQINCB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqincb	x25, vl32                      // SQINCB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqincb	x8, vl32, mul #4               // SQINCB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCD_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqincd	x27, w27                       // SQINCD <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCD_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqincd	x29, w29, vl2                  // SQINCD <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCD_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqincd	x3, w3, vl64, mul #5           // SQINCD <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqincd	x29                            // SQINCD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqincd	x4, vl32                       // SQINCD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqincd	x6, vl2, mul #7                // SQINCD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqincd	z8.d                           // SQINCD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQINCD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqincd	z15.d, mul3                    // SQINCD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQINCD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqincd	z9.d, vl256, mul #2            // SQINCD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQINCH_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqinch	x26, w26                       // SQINCH <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCH_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqinch	x10, w10, vl6                  // SQINCH <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCH_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqinch	x7, w7, vl4, mul #10           // SQINCH <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqinch	x3                             // SQINCH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqinch	x0, mul4                       // SQINCH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqinch	x8, vl32, mul #5               // SQINCH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqinch	z17.h                          // SQINCH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQINCH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqinch	z14.h                          // SQINCH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQINCH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqinch	z31.h, mul3, mul #14           // SQINCH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQINCP_XPWd_H                  V1UnitI, V1UnitM, V1UnitM0,                       sqincp	x18, p3.h, w18                 // SQINCP <Xdn>, <Pm>.<T>, <Wdn>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCP_XP_S                    V1UnitI, V1UnitM, V1UnitM0,                       sqincp	x25, p4.s                      // SQINCP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  3      7    7     0.50     -    SQINCP_ZP_D                    V1UnitI[2], V1UnitM[2], V1UnitM0[2], V1UnitV, V1UnitV01,   sqincp	z27.d, p4.d    // SQINCP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
# CHECK-NEXT:  1      2    2     1.00     -    SQINCW_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqincw	x30, w30                       // SQINCW <Xdn>, <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCW_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqincw	x20, w20, vl256                // SQINCW <Xdn>, <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCW_XPiWdI                  V1UnitI, V1UnitM, V1UnitM0,                       sqincw	x5, w5, vl8                    // SQINCW <Xdn>, <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqincw	x5                             // SQINCW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqincw	x20, mul4                      // SQINCW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       sqincw	x17, vl7, mul #15              // SQINCW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    SQINCW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqincw	z30.s                          // SQINCW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQINCW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqincw	z3.s, vl64                     // SQINCW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    SQINCW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          sqincw	z11.s, vl4, mul #3             // SQINCW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    SQNEGv1i8                      V1UnitV,                                          sqneg	b1, b22                        // SQNEG <V><d>, <V><n>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SQNEGv2i64                     V1UnitV,                                          sqneg	v10.2d, v26.2d                 // SQNEG <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLAHv1i16_indexed          V1UnitV, V1UnitV02,                               sqrdmlah	h9, h0, v12.h[2]       // SQRDMLAH H<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLAHv1i32_indexed          V1UnitV, V1UnitV02,                               sqrdmlah	s16, s25, v0.s[3]      // SQRDMLAH S<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLAHv4i16_indexed          V1UnitV, V1UnitV02,                               sqrdmlah	v26.4h, v1.4h, v15.h[4]  // SQRDMLAH <Vd>.4H, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLAHv2i32_indexed          V1UnitV, V1UnitV02,                               sqrdmlah	v4.2s, v28.2s, v2.s[2]  // SQRDMLAH <Vd>.2S, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLAHv1i32                  V1UnitV, V1UnitV02,                               sqrdmlah	s24, s24, s23          // SQRDMLAH <V><d>, <V><n>, <V><m>  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLAHv4i16                  V1UnitV, V1UnitV02,                               sqrdmlah	v30.4h, v14.4h, v0.4h  // SQRDMLAH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLSHv1i16_indexed          V1UnitV, V1UnitV02,                               sqrdmlsh	h23, h12, v8.h[1]      // SQRDMLSH H<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLSHv1i32_indexed          V1UnitV, V1UnitV02,                               sqrdmlsh	s9, s14, v1.s[1]       // SQRDMLSH S<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLSHv4i16_indexed          V1UnitV, V1UnitV02,                               sqrdmlsh	v5.4h, v2.4h, v12.h[3]  // SQRDMLSH <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLSHv8i16_indexed          V1UnitV, V1UnitV02,                               sqrdmlsh	v5.8h, v4.8h, v6.h[3]  // SQRDMLSH <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLSHv2i32_indexed          V1UnitV, V1UnitV02,                               sqrdmlsh	v26.2s, v9.2s, v1.s[3]  // SQRDMLSH <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLSHv2i32_indexed          V1UnitV, V1UnitV02,                               sqrdmlsh	v20.2s, v3.2s, v3.s[0]  // SQRDMLSH <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLSHv1i32                  V1UnitV, V1UnitV02,                               sqrdmlsh	s5, s21, s11           // SQRDMLSH <V><d>, <V><n>, <V><m>  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMLSHv2i32                  V1UnitV, V1UnitV02,                               sqrdmlsh	v28.2s, v27.2s, v9.2s  // SQRDMLSH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply accumulate high  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMULHv1i16_indexed          V1UnitV, V1UnitV02,                               sqrdmulh	h11, h0, v10.h[0]      // SQRDMULH H<d>, H<n>, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMULHv1i32_indexed          V1UnitV, V1UnitV02,                               sqrdmulh	s2, s22, v5.s[2]       // SQRDMULH S<d>, S<n>, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMULHv8i16_indexed          V1UnitV, V1UnitV02,                               sqrdmulh	v13.8h, v4.8h, v3.h[6]  // SQRDMULH <Vd>.<Th>, <Vn>.<Th>, <Vmh>.H[<indexh>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMULHv2i32_indexed          V1UnitV, V1UnitV02,                               sqrdmulh	v16.2s, v24.2s, v5.s[3]  // SQRDMULH <Vd>.<Ts>, <Vn>.<Ts>, <Vms>.S[<indexs>]  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMULHv1i16                  V1UnitV, V1UnitV02,                               sqrdmulh	h11, h15, h6           // SQRDMULH <V><d>, <V><n>, <V><m>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRDMULHv2i32                  V1UnitV, V1UnitV02,                               sqrdmulh	v20.2s, v28.2s, v27.2s  // SQRDMULH <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD multiply  \\ 1 4  4  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHLv1i8                     V1UnitV, V1UnitV13,                               sqrshl	b15, b18, b0                   // SQRSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHLv8i8                     V1UnitV, V1UnitV13,                               sqrshl	v30.8b, v9.8b, v6.8b           // SQRSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQRSHRNb                       V1UnitV,                                          sqrshrn	b10, h14, #4           // SQRSHRN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQRSHRNh                       V1UnitV,                                          sqrshrn	h9, s0, #8             // SQRSHRN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQRSHRNs                       V1UnitV,                                          sqrshrn	s28, d26, #20          // SQRSHRN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRNv8i8_shift              V1UnitV, V1UnitV13,                               sqrshrn	v10.8b, v18.8h, #8     // SQRSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRNv4i16_shift             V1UnitV, V1UnitV13,                               sqrshrn	v1.4h, v4.4s, #16      // SQRSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRNv2i32_shift             V1UnitV, V1UnitV13,                               sqrshrn	v13.2s, v20.2d, #1     // SQRSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRNv16i8_shift             V1UnitV, V1UnitV13,                               sqrshrn2	v13.16b, v4.8h, #1     // SQRSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRNv8i16_shift             V1UnitV, V1UnitV13,                               sqrshrn2	v25.8h, v5.4s, #12     // SQRSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRNv4i32_shift             V1UnitV, V1UnitV13,                               sqrshrn2	v0.4s, v7.2d, #1       // SQRSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQRSHRUNb                      V1UnitV,                                          sqrshrun	b20, h27, #6           // SQRSHRUN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQRSHRUNh                      V1UnitV,                                          sqrshrun	h25, s1, #7            // SQRSHRUN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQRSHRUNs                      V1UnitV,                                          sqrshrun	s29, d30, #7           // SQRSHRUN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRUNv8i8_shift             V1UnitV, V1UnitV13,                               sqrshrun	v30.8b, v7.8h, #6      // SQRSHRUN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRUNv4i16_shift            V1UnitV, V1UnitV13,                               sqrshrun	v2.4h, v14.4s, #6      // SQRSHRUN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRUNv2i32_shift            V1UnitV, V1UnitV13,                               sqrshrun	v0.2s, v15.2d, #10     // SQRSHRUN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRUNv16i8_shift            V1UnitV, V1UnitV13,                               sqrshrun2	v13.16b, v13.8h, #5    // SQRSHRUN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRUNv8i16_shift            V1UnitV, V1UnitV13,                               sqrshrun2	v19.8h, v18.4s, #1     // SQRSHRUN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQRSHRUNv4i32_shift            V1UnitV, V1UnitV13,                               sqrshrun2	v25.4s, v15.2d, #4     // SQRSHRUN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLb                         V1UnitV, V1UnitV13,                               sqshl	b23, b18, #3                   // SQSHL B<d>, B<n>, #<shiftb>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLh                         V1UnitV, V1UnitV13,                               sqshl	h11, h1, #0                    // SQSHL H<d>, H<n>, #<shifth>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLs                         V1UnitV, V1UnitV13,                               sqshl	s30, s29, #1                   // SQSHL S<d>, S<n>, #<shifts>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLd                         V1UnitV, V1UnitV13,                               sqshl	d16, d0, #25                   // SQSHL D<d>, D<n>, #<shiftd>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLv8i8_shift                V1UnitV, V1UnitV13,                               sqshl	v26.8b, v2.8b, #7              // SQSHL <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLv8i16_shift               V1UnitV, V1UnitV13,                               sqshl	v16.8h, v29.8h, #4             // SQSHL <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLv2i32_shift               V1UnitV, V1UnitV13,                               sqshl	v5.2s, v29.2s, #22             // SQSHL <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLv2i64_shift               V1UnitV, V1UnitV13,                               sqshl	v31.2d, v7.2d, #35             // SQSHL <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLv1i64                     V1UnitV, V1UnitV13,                               sqshl	d17, d10, d23                  // SQSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLv2i64                     V1UnitV, V1UnitV13,                               sqshl	v23.2d, v24.2d, v11.2d         // SQSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLUb                        V1UnitV, V1UnitV13,                               sqshlu	b14, b15, #0                   // SQSHLU B<d>, B<n>, #<shiftb>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLUh                        V1UnitV, V1UnitV13,                               sqshlu	h7, h6, #5                     // SQSHLU H<d>, H<n>, #<shifth>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLUs                        V1UnitV, V1UnitV13,                               sqshlu	s27, s28, #19                  // SQSHLU S<d>, S<n>, #<shifts>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLUd                        V1UnitV, V1UnitV13,                               sqshlu	d3, d30, #1                    // SQSHLU D<d>, D<n>, #<shiftd>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLUv8i8_shift               V1UnitV, V1UnitV13,                               sqshlu	v15.8b, v28.8b, #1             // SQSHLU <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLUv8i16_shift              V1UnitV, V1UnitV13,                               sqshlu	v16.8h, v24.8h, #0             // SQSHLU <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLUv4i32_shift              V1UnitV, V1UnitV13,                               sqshlu	v15.4s, v3.4s, #19             // SQSHLU <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      4    4     2.00     -    SQSHLUv2i64_shift              V1UnitV, V1UnitV13,                               sqshlu	v16.2d, v0.2d, #23             // SQSHLU <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRNb                        V1UnitV,                                          sqshrn	b3, h26, #7                    // SQSHRN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRNh                        V1UnitV,                                          sqshrn	h1, s27, #4                    // SQSHRN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRNs                        V1UnitV,                                          sqshrn	s1, d25, #19                   // SQSHRN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHRNv8i8_shift               V1UnitV, V1UnitV13,                               sqshrn	v18.8b, v29.8h, #2             // SQSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHRNv4i16_shift              V1UnitV, V1UnitV13,                               sqshrn	v7.4h, v19.4s, #7              // SQSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHRNv2i32_shift              V1UnitV, V1UnitV13,                               sqshrn	v7.2s, v21.2d, #11             // SQSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHRNv16i8_shift              V1UnitV, V1UnitV13,                               sqshrn2	v6.16b, v1.8h, #5      // SQSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHRNv8i16_shift              V1UnitV, V1UnitV13,                               sqshrn2	v15.8h, v19.4s, #5     // SQSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQSHRNv4i32_shift              V1UnitV, V1UnitV13,                               sqshrn2	v16.4s, v7.2d, #13     // SQSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRUNb                       V1UnitV,                                          sqshrun	b4, h0, #6             // SQSHRUN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRUNh                       V1UnitV,                                          sqshrun	h4, s4, #6             // SQSHRUN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRUNs                       V1UnitV,                                          sqshrun	s7, d27, #32           // SQSHRUN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRUNv8i8_shift              V1UnitV,                                          sqshrun	v7.8b, v6.8h, #3       // SQSHRUN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRUNv4i16_shift             V1UnitV,                                          sqshrun	v14.4h, v5.4s, #4      // SQSHRUN <Vd>.4H, <Vn>.4S, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRUNv2i32_shift             V1UnitV,                                          sqshrun	v10.2s, v19.2d, #6     // SQSHRUN <Vd>.2S, <Vn>.2D, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRUNv16i8_shift             V1UnitV,                                          sqshrun2	v17.16b, v23.8h, #3    // SQSHRUN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRUNv8i16_shift             V1UnitV,                                          sqshrun2	v17.8h, v20.4s, #5     // SQSHRUN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SQSHRUNv4i32_shift             V1UnitV,                                          sqshrun2	v20.4s, v26.2d, #15    // SQSHRUN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SQSUB_ZI_B                     V1UnitV, V1UnitV01,                               sqsub	z27.b, z27.b, #170             // SQSUB <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SQSUB_ZI_H                     V1UnitV, V1UnitV01,                               sqsub	z12.h, z12.h, #134             // SQSUB <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SQSUB_ZI_S                     V1UnitV, V1UnitV01,                               sqsub	z18.s, z18.s, #153             // SQSUB <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SQSUB_ZZZ_B                    V1UnitV, V1UnitV01,                               sqsub	z21.b, z14.b, z5.b             // SQSUB <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    SQSUBv1i16                     V1UnitV,                                          sqsub	h17, h3, h4                    // SQSUB <V><d>, <V><n>, <V><m>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SQSUBv2i32                     V1UnitV,                                          sqsub	v14.2s, v18.2s, v27.2s         // SQSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     2.00     -    SQXTNv1i16                     V1UnitV, V1UnitV13,                               sqxtn	h19, s13                       // SQXTN <Vb><d>, <Va><n>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQXTNv2i32                     V1UnitV, V1UnitV13,                               sqxtn	v14.2s, v26.2d                 // SQXTN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQXTNv16i8                     V1UnitV, V1UnitV13,                               sqxtn2	v16.16b, v15.8h                // SQXTN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQXTUNv1i16                    V1UnitV, V1UnitV13,                               sqxtun	h30, s23                       // SQXTUN <Vb><d>, <Va><n>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQXTUNv2i32                    V1UnitV, V1UnitV13,                               sqxtun	v11.2s, v30.2d                 // SQXTUN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SQXTUNv16i8                    V1UnitV, V1UnitV13,                               sqxtun2	v2.16b, v4.8h          // SQXTUN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SRHADDv16i8                    V1UnitV,                                          srhadd	v10.16b, v20.16b, v18.16b      // SRHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SRId                           V1UnitV,                                          sri	d3, d8, #64                    // SRI <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SRIv16i8_shift                 V1UnitV, V1UnitV13,                               sri	v21.16b, v12.16b, #8           // SRI <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SRIv4i16_shift                 V1UnitV, V1UnitV13,                               sri	v12.4h, v12.4h, #11            // SRI <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SRIv2i32_shift                 V1UnitV, V1UnitV13,                               sri	v18.2s, v9.2s, #8              // SRI <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SRIv2i64_shift                 V1UnitV, V1UnitV13,                               sri	v19.2d, v5.2d, #28             // SRI <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed and insert, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SRSHLv1i64                     V1UnitV, V1UnitV13,                               srshl	d4, d20, d22                   // SRSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SRSHLv2i32                     V1UnitV, V1UnitV13,                               srshl	v10.2s, v31.2s, v0.2s          // SRSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SRSHRd                         V1UnitV,                                          srshr	d10, d24, #21                  // SRSHR <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SRSHRv8i8_shift                V1UnitV, V1UnitV13,                               srshr	v19.8b, v6.8b, #5              // SRSHR <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SRSHRv4i16_shift               V1UnitV, V1UnitV13,                               srshr	v10.4h, v3.4h, #12             // SRSHR <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SRSHRv4i32_shift               V1UnitV, V1UnitV13,                               srshr	v30.4s, v21.4s, #1             // SRSHR <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    SRSHRv2i64_shift               V1UnitV, V1UnitV13,                               srshr	v16.2d, v22.2d, #45            // SRSHR <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SRSRAd                         V1UnitV,                                          srsra	d16, d27, #21                  // SRSRA <V><d>, <V><n>, #<shift>  \\ ASIMD shift accumulate  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SRSRAv8i8_shift                V1UnitV, V1UnitV13,                               srsra	v23.8b, v25.8b, #6             // SRSRA <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SRSRAv4i16_shift               V1UnitV, V1UnitV13,                               srsra	v31.4h, v1.4h, #10             // SRSRA <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SRSRAv4i32_shift               V1UnitV, V1UnitV13,                               srsra	v22.4s, v10.4s, #24            // SRSRA <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SRSRAv2i64_shift               V1UnitV, V1UnitV13,                               srsra	v16.2d, v17.2d, #42            // SRSRA <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      1    1     15.00    SE   DSB                                                                              ssbb                                 // SSBB  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     2.00     -    SSHLv1i64                      V1UnitV, V1UnitV13,                               sshl	d24, d10, d4                   // SSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHLv4i32                      V1UnitV, V1UnitV13,                               sshl	v23.4s, v30.4s, v17.4s         // SSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHLLv8i8_shift                V1UnitV, V1UnitV13,                               sshll	v7.8h, v14.8b, #6              // SSHLL <Vd>.8H, <Vn>.8B, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHLLv4i16_shift               V1UnitV, V1UnitV13,                               sshll	v9.4s, v24.4h, #15             // SSHLL <Vd>.4S, <Vn>.4H, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHLLv2i32_shift               V1UnitV, V1UnitV13,                               sshll	v24.2d, v29.2s, #24            // SSHLL <Vd>.2D, <Vn>.2S, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHLLv16i8_shift               V1UnitV, V1UnitV13,                               sshll2	v7.8h, v13.16b, #3             // SSHLL2 <Vd>.8H, <Vn>.16B, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHLLv8i16_shift               V1UnitV, V1UnitV13,                               sshll2	v9.4s, v4.8h, #15              // SSHLL2 <Vd>.4S, <Vn>.8H, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHLLv4i32_shift               V1UnitV, V1UnitV13,                               sshll2	v4.2d, v25.4s, #5              // SSHLL2 <Vd>.2D, <Vn>.4S, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SSHRd                          V1UnitV,                                          sshr	d11, d29, #12                  // SSHR <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, basic  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHRv8i8_shift                 V1UnitV, V1UnitV13,                               sshr	v9.8b, v16.8b, #4              // SSHR <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHRv4i16_shift                V1UnitV, V1UnitV13,                               sshr	v23.4h, v12.4h, #13            // SSHR <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHRv2i32_shift                V1UnitV, V1UnitV13,                               sshr	v16.2s, v4.2s, #14             // SSHR <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHRv2i64_shift                V1UnitV, V1UnitV13,                               sshr	v24.2d, v21.2d, #39            // SSHR <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SSRAd                          V1UnitV,                                          ssra	d28, d4, #37                   // SSRA <V><d>, <V><n>, #<shift>  \\ ASIMD shift accumulate  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SSRAv8i8_shift                 V1UnitV, V1UnitV13,                               ssra	v17.8b, v31.8b, #1             // SSRA <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SSRAv4i16_shift                V1UnitV, V1UnitV13,                               ssra	v4.4h, v28.4h, #10             // SSRA <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SSRAv4i32_shift                V1UnitV, V1UnitV13,                               ssra	v26.4s, v2.4s, #23             // SSRA <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    SSRAv2i64_shift                V1UnitV, V1UnitV13,                               ssra	v29.2d, v6.2d, #12             // SSRA <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    SSUBLv4i16_v4i32               V1UnitV,                                          ssubl	v0.4s, v1.4h, v23.4h           // SSUBL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SSUBLv16i8_v8i16               V1UnitV,                                          ssubl2	v20.8h, v3.16b, v25.16b        // SSUBL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SSUBWv8i8_v8i16                V1UnitV,                                          ssubw	v11.8h, v7.8h, v27.8b          // SSUBW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SSUBWv4i32_v2i64               V1UnitV,                                          ssubw2	v4.2d, v3.2d, v14.4s           // SSUBW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    ST1Onev8b                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v20.8b }, [x2]               // ST1 { <Vt>.8B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    ST1Onev16b                     V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v10.16b }, [x11]             // ST1 { <Vt>.16B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    ST1Onev4h                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v12.4h }, [x17]              // ST1 { <Vt>.4H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    ST1Onev8h                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v11.8h }, [x12]              // ST1 { <Vt>.8H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    ST1Onev2s                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v15.2s }, [x2]               // ST1 { <Vt>.2S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    ST1Onev4s                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v5.4s }, [x26]               // ST1 { <Vt>.4S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    ST1Onev1d                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v14.1d }, [x2]               // ST1 { <Vt>.1D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    ST1Onev2d                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v19.2d }, [x19]              // ST1 { <Vt>.2D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev8b_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v3.8b }, [x5], #8            // ST1 { <Vt>.8B }, [<Xn|SP>], #8  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev16b_POST                V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v8.16b }, [x12], #16         // ST1 { <Vt>.16B }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev4h_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v9.4h }, [x16], #8           // ST1 { <Vt>.4H }, [<Xn|SP>], #8  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev8h_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v20.8h }, [x23], #16         // ST1 { <Vt>.8H }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev2s_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v24.2s }, [x7], #8           // ST1 { <Vt>.2S }, [<Xn|SP>], #8  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev4s_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v12.4s }, [x24], #16         // ST1 { <Vt>.4S }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev1d_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v23.1d }, [x7], #8           // ST1 { <Vt>.1D }, [<Xn|SP>], #8  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev2d_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v31.2d }, [x20], #16         // ST1 { <Vt>.2D }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev8b_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v5.8b }, [x30], x14          // ST1 { <Vt>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev16b_POST                V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v28.16b }, [x8], x4          // ST1 { <Vt>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev4h_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v2.4h }, [x14], x13          // ST1 { <Vt>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev8h_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v31.8h }, [x3], x17          // ST1 { <Vt>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev2s_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v31.2s }, [x4], x17          // ST1 { <Vt>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev4s_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v3.4s }, [x9], x4            // ST1 { <Vt>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev1d_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v22.1d }, [x8], x21          // ST1 { <Vt>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Onev2d_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v30.2d }, [x24], x10         // ST1 { <Vt>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 1 reg, Q-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  2      2    2     2.00     -    ST1Twov8b                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v22.8b, v23.8b }, [x22]      // ST1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  4      2    2     1.00     -    ST1Twov16b                     V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v18.16b, v19.16b }, [x14]  // ST1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  2      2    2     2.00     -    ST1Twov4h                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v7.4h, v8.4h }, [x0]         // ST1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  4      2    2     1.00     -    ST1Twov8h                      V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v2.8h, v3.8h }, [x3]  // ST1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  2      2    2     2.00     -    ST1Twov2s                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v22.2s, v23.2s }, [x23]      // ST1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  4      2    2     1.00     -    ST1Twov4s                      V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v27.4s, v28.4s }, [x28]  // ST1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  2      2    2     2.00     -    ST1Twov1d                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v23.1d, v24.1d }, [x29]      // ST1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  4      2    2     1.00     -    ST1Twov2d                      V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v3.2d, v4.2d }, [x7]  // ST1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  3      2    2     2.00     -    ST1Twov8b_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v16.8b, v17.8b }, [x19], #16  // ST1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Twov16b_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v17.16b, v18.16b }, [x30], #32  // ST1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Twov4h_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v5.4h, v6.4h }, [x20], #16   // ST1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Twov8h_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v18.8h, v19.8h }, [x17], #32  // ST1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Twov2s_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v3.2s, v4.2s }, [x15], #16   // ST1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Twov4s_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v17.4s, v18.4s }, [x25], #32  // ST1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Twov1d_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v7.1d, v8.1d }, [x6], #16    // ST1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], #16  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Twov2d_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v28.2d, v29.2d }, [x14], #32  // ST1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Twov8b_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v13.8b, v14.8b }, [x29], x16  // ST1 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Twov16b_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v20.16b, v21.16b }, [x0], x11  // ST1 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Twov4h_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v0.4h, v1.4h }, [x29], x19   // ST1 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Twov8h_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v10.8h, v11.8h }, [x29], x23  // ST1 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Twov2s_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v28.2s, v29.2s }, [x27], x26  // ST1 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Twov4s_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v12.4s, v13.4s }, [x3], x16  // ST1 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  3      2    2     2.00     -    ST1Twov1d_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v9.1d, v10.1d }, [x28], x4   // ST1 { <Vt>.1D, <Vt2>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, D-form  \\ 3 2  2  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Twov2d_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v0.2d, v1.2d }, [x5], x29  // ST1 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 2 reg, Q-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  4      2    2     1.00     -    ST1Threev8b                    V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v24.8b, v25.8b, v26.8b }, [x1]  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  6      2    2     0.67     -    ST1Threev16b                   V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v28.16b, v29.16b, v30.16b }, [x18]  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 6 2  2  0.67 V1UnitL01[3],V1UnitV01[3]
# CHECK-NEXT:  4      2    2     1.00     -    ST1Threev4h                    V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v28.4h, v29.4h, v30.4h }, [x14]  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  6      2    2     0.67     -    ST1Threev8h                    V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v17.8h, v18.8h, v19.8h }, [x11]  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 6 2  2  0.67 V1UnitL01[3],V1UnitV01[3]
# CHECK-NEXT:  4      2    2     1.00     -    ST1Threev2s                    V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v15.2s, v16.2s, v17.2s }, [x6]  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  6      2    2     0.67     -    ST1Threev4s                    V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v13.4s, v14.4s, v15.4s }, [x22]  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 6 2  2  0.67 V1UnitL01[3],V1UnitV01[3]
# CHECK-NEXT:  4      2    2     1.00     -    ST1Threev1d                    V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v10.1d, v11.1d, v12.1d }, [x30]  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  6      2    2     0.67     -    ST1Threev2d                    V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v6.2d, v7.2d, v8.2d }, [x29]  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 6 2  2  0.67 V1UnitL01[3],V1UnitV01[3]
# CHECK-NEXT:  5      2    2     1.00     -    ST1Threev8b_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v11.8b, v12.8b, v13.8b }, [x6], #24  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #24  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  7      2    2     0.67     -    ST1Threev16b_POST              V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v24.16b, v25.16b, v26.16b }, [x24], #48  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #48  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Threev4h_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v5.4h, v6.4h, v7.4h }, [x14], #24  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #24  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  7      2    2     0.67     -    ST1Threev8h_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v25.8h, v26.8h, v27.8h }, [x5], #48  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #48  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Threev2s_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v23.2s, v24.2s, v25.2s }, [x18], #24  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #24  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  7      2    2     0.67     -    ST1Threev4s_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v25.4s, v26.4s, v27.4s }, [x29], #48  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #48  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Threev1d_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v12.1d, v13.1d, v14.1d }, [x27], #24  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], #24  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  7      2    2     0.67     -    ST1Threev2d_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v24.2d, v25.2d, v26.2d }, [x10], #48  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #48  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Threev8b_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v10.8b, v11.8b, v12.8b }, [x23], x2  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  7      2    2     0.67     -    ST1Threev16b_POST              V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v20.16b, v21.16b, v22.16b }, [x19], x24  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Threev4h_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v27.4h, v28.4h, v29.4h }, [x24], x23  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  7      2    2     0.67     -    ST1Threev8h_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v16.8h, v17.8h, v18.8h }, [x18], x28  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Threev2s_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v25.2s, v26.2s, v27.2s }, [x4], x16  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  7      2    2     0.67     -    ST1Threev4s_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v24.4s, v25.4s, v26.4s }, [x12], x8  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Threev1d_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v1.1d, v2.1d, v3.1d }, [x18], x0  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  7      2    2     0.67     -    ST1Threev2d_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st1	{ v6.2d, v7.2d, v8.2d }, [x14], x10  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 3 reg, Q-form  \\ 7 2  2  0.67 V1UnitL01[3],V1UnitV01[3],V1UnitI
# CHECK-NEXT:  4      2    2     1.00     -    ST1Fourv8b                     V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v17.8b, v18.8b, v19.8b, v20.8b }, [x8]  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  8      2    2     0.50     -    ST1Fourv16b                    V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v3.16b, v4.16b, v5.16b, v6.16b }, [x9]  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 8 2  2  0.50 V1UnitL01[4],V1UnitV01[4]
# CHECK-NEXT:  4      2    2     1.00     -    ST1Fourv4h                     V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v24.4h, v25.4h, v26.4h, v27.4h }, [x16]  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  8      2    2     0.50     -    ST1Fourv8h                     V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v0.8h, v1.8h, v2.8h, v3.8h }, [x6]  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 8 2  2  0.50 V1UnitL01[4],V1UnitV01[4]
# CHECK-NEXT:  4      2    2     1.00     -    ST1Fourv2s                     V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v19.2s, v20.2s, v21.2s, v22.2s }, [x20]  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  8      2    2     0.50     -    ST1Fourv4s                     V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v21.4s, v22.4s, v23.4s, v24.4s }, [x16]  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 8 2  2  0.50 V1UnitL01[4],V1UnitV01[4]
# CHECK-NEXT:  4      2    2     1.00     -    ST1Fourv1d                     V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v7.1d, v8.1d, v9.1d, v10.1d }, [x18]  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 4 2  2  1.00 V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  8      2    2     0.50     -    ST1Fourv2d                     V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v4.2d, v5.2d, v6.2d, v7.2d }, [x19]  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 8 2  2  0.50 V1UnitL01[4],V1UnitV01[4]
# CHECK-NEXT:  5      2    2     1.00     -    ST1Fourv8b_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v21.8b, v22.8b, v23.8b, v24.8b }, [x29], #32  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  9      2    2     0.50     -    ST1Fourv16b_POST               V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v5.16b, v6.16b, v7.16b, v8.16b }, [x2], #64  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #64  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Fourv4h_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v19.4h, v20.4h, v21.4h, v22.4h }, [x0], #32  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  9      2    2     0.50     -    ST1Fourv8h_POST                V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v5.8h, v6.8h, v7.8h, v8.8h }, [x18], #64  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #64  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Fourv2s_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v26.2s, v27.2s, v28.2s, v29.2s }, [x14], #32  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  9      2    2     0.50     -    ST1Fourv4s_POST                V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v2.4s, v3.4s, v4.4s, v5.4s }, [x11], #64  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #64  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Fourv1d_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v22.1d, v23.1d, v24.1d, v25.1d }, [x22], #32  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], #32  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  9      2    2     0.50     -    ST1Fourv2d_POST                V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v15.2d, v16.2d, v17.2d, v18.2d }, [x28], #64  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #64  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Fourv8b_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v16.8b, v17.8b, v18.8b, v19.8b }, [x19], x23  // ST1 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  9      2    2     0.50     -    ST1Fourv16b_POST               V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v22.16b, v23.16b, v24.16b, v25.16b }, [x18], x27  // ST1 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Fourv4h_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v16.4h, v17.4h, v18.4h, v19.4h }, [x14], x0  // ST1 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  9      2    2     0.50     -    ST1Fourv8h_POST                V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v25.8h, v26.8h, v27.8h, v28.8h }, [x11], x13  // ST1 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Fourv2s_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v1.2s, v2.2s, v3.2s, v4.2s }, [x11], x24  // ST1 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  9      2    2     0.50     -    ST1Fourv4s_POST                V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v25.4s, v26.4s, v27.4s, v28.4s }, [x6], x9  // ST1 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
# CHECK-NEXT:  5      2    2     1.00     -    ST1Fourv1d_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st1	{ v1.1d, v2.1d, v3.1d, v4.1d }, [x12], x2  // ST1 { <Vt>.1D, <Vt2>.1D, <Vt3>.1D, <Vt4>.1D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, D-form  \\ 5 2  2  1.00 V1UnitL01[2],V1UnitV01[2],V1UnitI
# CHECK-NEXT:  9      2    2     0.50     -    ST1Fourv2d_POST                V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st1	{ v24.2d, v25.2d, v26.2d, v27.2d }, [x6], x22  // ST1 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, multiple, 4 reg, Q-form  \\ 9 2  2  0.50 V1UnitL01[4],V1UnitV01[4],V1UnitI
# CHECK-NEXT:  2      4    4     2.00     -    ST1i8                          V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v24.b }[7], [x0]             // ST1 { <Vt>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      4    4     2.00     -    ST1i16                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v0.h }[6], [x14]             // ST1 { <Vt>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      4    4     2.00     -    ST1i32                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v4.s }[3], [x6]              // ST1 { <Vt>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      4    4     2.00     -    ST1i64                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st1	{ v15.d }[1], [x27]            // ST1 { <Vt>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD store, 1 element, one lane, D  \\ 2 4  4  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      4    4     2.00     -    ST1i8_POST                     V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v10.b }[13], [x1], #1        // ST1 { <Vt>.B }[<indexb>], [<Xn|SP>], #1  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST1i8_POST                     V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v30.b }[3], [x29], x19       // ST1 { <Vt>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST1i16_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v27.h }[5], [x29], #2        // ST1 { <Vt>.H }[<indexh>], [<Xn|SP>], #2  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST1i16_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v10.h }[2], [x18], x11       // ST1 { <Vt>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST1i32_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v3.s }[3], [x1], #4          // ST1 { <Vt>.S }[<indexs>], [<Xn|SP>], #4  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST1i32_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v25.s }[1], [x18], x24       // ST1 { <Vt>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST1i64_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v23.d }[1], [x21], #8        // ST1 { <Vt>.D }[<indexd>], [<Xn|SP>], #8  \\ ASIMD store, 1 element, one lane, D  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST1i64_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st1	{ v31.d }[0], [x19], x16       // ST1 { <Vt>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD store, 1 element, one lane, D  \\ 3 4  4  2.0 V1UnitL01,V1UnitV01,V1UnitI
# CHECK-NEXT:  2      2    2     2.00     -    ST1B_S_IMM                     V1UnitL, V1UnitL01, V1UnitV,                      st1b	{ z24.s }, p2, [x6]            // ST1B { <Zt>.<T> }, <Pg>, [<Xn|SP>]  \\ Contiguous store, scalar + imm  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    ST1B_D_IMM                     V1UnitL, V1UnitL01, V1UnitV,                      st1b	{ z20.d }, p0, [x13, #-8, mul vl]  // ST1B { <Zt>.<T> }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store, scalar + imm  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    ST1B_H                         V1UnitL, V1UnitL01, V1UnitV,                      st1b	{ z30.h }, p6, [x5, x21]       // ST1B { <Zt>.<T> }, <Pg>, [<Xn|SP>, <Xm>]  \\ Contiguous store, scalar + scalar  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      6    6     2.00     -    SST1B_D_UXTW                   V1UnitL, V1UnitL01, V1UnitV,                      st1b	{ z30.d }, p5, [x5, z23.d, uxtw]  // ST1B { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ Scatter store, 32-bit unpacked unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  4      10   10    1.00     -    SST1B_S_SXTW                   V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1b	{ z2.s }, p2, [x27, z19.s, sxtw]  // ST1B { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod>]  \\ Scatter store, 32-bit unscaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  2      6    6     2.00     -    SST1B_D                        V1UnitL, V1UnitL01, V1UnitV,                      st1b	{ z2.d }, p0, [x15, z1.d]      // ST1B { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D]  \\ Scatter store, 64-bit unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  4      10   10    1.00     -    SST1B_S_IMM                    V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1b	{ z15.s }, p0, [z17.s]         // ST1B { <Zt>.S }, <Pg>, [<Zn>.S]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  4      10   10    1.00     -    SST1B_S_IMM                    V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1b	{ z22.s }, p2, [z4.s, #9]      // ST1B { <Zt>.S }, <Pg>, [<Zn>.S, #<imm>]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  2      6    6     2.00     -    SST1B_D_IMM                    V1UnitL, V1UnitL01, V1UnitV,                      st1b	{ z0.d }, p2, [z5.d]           // ST1B { <Zt>.D }, <Pg>, [<Zn>.D]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1B_D_IMM                    V1UnitL, V1UnitL01, V1UnitV,                      st1b	{ z11.d }, p6, [z11.d, #17]    // ST1B { <Zt>.D }, <Pg>, [<Zn>.D, #<imm>]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1D_SXTW_SCALED              V1UnitL, V1UnitL01, V1UnitV,                      st1d	{ z20.d }, p0, [x11, z16.d, sxtw #3]  // ST1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #3]  \\ Scatter store, 32-bit unpacked scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1D_SXTW                     V1UnitL, V1UnitL01, V1UnitV,                      st1d	{ z28.d }, p1, [x17, z15.d, sxtw]  // ST1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ Scatter store, 32-bit unpacked unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1D_SCALED                   V1UnitL, V1UnitL01, V1UnitV,                      st1d	{ z10.d }, p6, [x26, z3.d, lsl #3]  // ST1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, LSL #3]  \\ Scatter store, 64-bit scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1D                          V1UnitL, V1UnitL01, V1UnitV,                      st1d	{ z9.d }, p7, [x24, z17.d]     // ST1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D]  \\ Scatter store, 64-bit unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1D_IMM                      V1UnitL, V1UnitL01, V1UnitV,                      st1d	{ z25.d }, p7, [z1.d]          // ST1D { <Zt>.D }, <Pg>, [<Zn>.D]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1D_IMM                      V1UnitL, V1UnitL01, V1UnitV,                      st1d	{ z16.d }, p0, [z20.d, #248]   // ST1D { <Zt>.D }, <Pg>, [<Zn>.D, #<imm>]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      2    2     2.00     -    ST1H_S_IMM                     V1UnitL, V1UnitL01, V1UnitV,                      st1h	{ z28.s }, p6, [x29]           // ST1H { <Zt>.<T> }, <Pg>, [<Xn|SP>]  \\ Contiguous store, scalar + imm  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    ST1H_D_IMM                     V1UnitL, V1UnitL01, V1UnitV,                      st1h	{ z21.d }, p1, [x15, #-2, mul vl]  // ST1H { <Zt>.<T> }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store, scalar + imm  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  3      2    2     2.00     -    ST1H                           V1UnitI, V1UnitL, V1UnitL01, V1UnitS, V1UnitV,    st1h	{ z16.h }, p0, [x26, x9, lsl #1]  // ST1H { <Zt>.<T> }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous store, scalar + scalar   \\ 3 2  2  2.0 V1UnitL01,V1UnitS,V1UnitV
# CHECK-NEXT:  4      10   10    1.00     -    SST1H_S_SXTW_SCALED            V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1h	{ z21.s }, p6, [x1, z31.s, sxtw #1]  // ST1H { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #1]  \\ Scatter store, 32-bit scaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  2      6    6     2.00     -    SST1H_D_SXTW_SCALED            V1UnitL, V1UnitL01, V1UnitV,                      st1h	{ z19.d }, p5, [x8, z16.d, sxtw #1]  // ST1H { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #1]  \\ Scatter store, 32-bit unpacked scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1H_D_SXTW                   V1UnitL, V1UnitL01, V1UnitV,                      st1h	{ z9.d }, p1, [x23, z8.d, sxtw]  // ST1H { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ Scatter store, 32-bit unpacked unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  4      10   10    1.00     -    SST1H_S_SXTW                   V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1h	{ z3.s }, p7, [x14, z15.s, sxtw]  // ST1H { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod>]  \\ Scatter store, 32-bit unscaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  2      6    6     2.00     -    SST1H_D_SCALED                 V1UnitL, V1UnitL01, V1UnitV,                      st1h	{ z15.d }, p7, [x6, z8.d, lsl #1]  // ST1H { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, LSL #1]  \\ Scatter store, 64-bit scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1H_D                        V1UnitL, V1UnitL01, V1UnitV,                      st1h	{ z29.d }, p4, [x15, z24.d]    // ST1H { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D]  \\ Scatter store, 64-bit unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  4      10   10    1.00     -    SST1H_S_IMM                    V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1h	{ z0.s }, p5, [z14.s]          // ST1H { <Zt>.S }, <Pg>, [<Zn>.S]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  4      10   10    1.00     -    SST1H_S_IMM                    V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1h	{ z21.s }, p5, [z22.s]         // ST1H { <Zt>.S }, <Pg>, [<Zn>.S, #<imm>]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  2      6    6     2.00     -    SST1H_D_IMM                    V1UnitL, V1UnitL01, V1UnitV,                      st1h	{ z26.d }, p1, [z30.d]         // ST1H { <Zt>.D }, <Pg>, [<Zn>.D]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1H_D_IMM                    V1UnitL, V1UnitL01, V1UnitV,                      st1h	{ z4.d }, p1, [z24.d, #62]     // ST1H { <Zt>.D }, <Pg>, [<Zn>.D, #<imm>]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  4      10   10    1.00     -    SST1W_UXTW_SCALED              V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1w	{ z5.s }, p2, [x30, z8.s, uxtw #2]  // ST1W { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod> #2]  \\ Scatter store, 32-bit scaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  2      6    6     2.00     -    SST1W_D_UXTW_SCALED            V1UnitL, V1UnitL01, V1UnitV,                      st1w	{ z11.d }, p2, [x18, z11.d, uxtw #2]  // ST1W { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod> #2]  \\ Scatter store, 32-bit unpacked scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1W_D_SXTW                   V1UnitL, V1UnitL01, V1UnitV,                      st1w	{ z3.d }, p7, [x25, z1.d, sxtw]  // ST1W { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, <mod>]  \\ Scatter store, 32-bit unpacked unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  4      10   10    1.00     -    SST1W_SXTW                     V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1w	{ z12.s }, p2, [x14, z25.s, sxtw]  // ST1W { <Zt>.S }, <Pg>, [<Xn|SP>, <Zm>.S, <mod>]  \\ Scatter store, 32-bit unscaled offset  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  2      6    6     2.00     -    SST1W_D_SCALED                 V1UnitL, V1UnitL01, V1UnitV,                      st1w	{ z31.d }, p6, [x18, z13.d, lsl #2]  // ST1W { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D, LSL #2]  \\ Scatter store, 64-bit scaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1W_D                        V1UnitL, V1UnitL01, V1UnitV,                      st1w	{ z28.d }, p7, [x2, z29.d]     // ST1W { <Zt>.D }, <Pg>, [<Xn|SP>, <Zm>.D]  \\ Scatter store, 64-bit unscaled offset  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  4      10   10    1.00     -    SST1W_IMM                      V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1w	{ z31.s }, p5, [z2.s]          // ST1W { <Zt>.S }, <Pg>, [<Zn>.S]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  4      10   10    1.00     -    SST1W_IMM                      V1UnitL[2], V1UnitL01[2], V1UnitV[2],             st1w	{ z7.s }, p3, [z16.s, #4]      // ST1W { <Zt>.S }, <Pg>, [<Zn>.S, #<imm>]  \\ Scatter store vector + imm 32-bit element size  \\ 4 10  10  1.00 V1UnitL01[8],V1UnitV[8]
# CHECK-NEXT:  2      6    6     2.00     -    SST1W_D_IMM                    V1UnitL, V1UnitL01, V1UnitV,                      st1w	{ z3.d }, p5, [z26.d]          // ST1W { <Zt>.D }, <Pg>, [<Zn>.D]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      6    6     2.00     -    SST1W_D_IMM                    V1UnitL, V1UnitL01, V1UnitV,                      st1w	{ z19.d }, p6, [z30.d, #108]   // ST1W { <Zt>.D }, <Pg>, [<Zn>.D, #<imm>]  \\ Scatter store vector + imm 64-bit element size  \\ 2 6  6  2.00 V1UnitL01[4],V1UnitV[4]
# CHECK-NEXT:  2      4    4     2.00     -    ST2Twov8b                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st2	{ v10.8b, v11.8b }, [x23]      // ST2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
# CHECK-NEXT:  4      4    4     1.00     -    ST2Twov16b                     V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v18.16b, v19.16b }, [x9]  // ST2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2Twov4h                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st2	{ v25.4h, v26.4h }, [x15]      // ST2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
# CHECK-NEXT:  4      4    4     1.00     -    ST2Twov8h                      V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v4.8h, v5.8h }, [x2]  // ST2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2Twov2s                      V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st2	{ v0.2s, v1.2s }, [x21]        // ST2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
# CHECK-NEXT:  4      4    4     1.00     -    ST2Twov4s                      V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v26.4s, v27.4s }, [x13]  // ST2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      4    4     1.00     -    ST2Twov2d                      V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v4.2d, v5.2d }, [x9]  // ST2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>]  \\ ASIMD store, 2 element, multiple, Q-form, D  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  3      4    4     2.00     -    ST2Twov8b_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v27.8b, v28.8b }, [x0], #16  // ST2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], #16  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST2Twov16b_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v10.16b, v11.16b }, [x19], #32  // ST2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], #32  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2Twov4h_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v0.4h, v1.4h }, [x5], #16    // ST2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], #16  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST2Twov8h_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v11.8h, v12.8h }, [x6], #32  // ST2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], #32  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2Twov2s_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v15.2s, v16.2s }, [x25], #16  // ST2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], #16  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST2Twov4s_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v12.4s, v13.4s }, [x2], #32  // ST2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], #32  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST2Twov2d_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v15.2d, v16.2d }, [x24], #32  // ST2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], #32  \\ ASIMD store, 2 element, multiple, Q-form, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2Twov8b_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v2.8b, v3.8b }, [x19], x29   // ST2 { <Vt>.8B, <Vt2>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST2Twov16b_POST                V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v1.16b, v2.16b }, [x9], x13  // ST2 { <Vt>.16B, <Vt2>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2Twov4h_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v1.4h, v2.4h }, [x26], x22   // ST2 { <Vt>.4H, <Vt2>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST2Twov8h_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v11.8h, v12.8h }, [x19], x9  // ST2 { <Vt>.8H, <Vt2>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2Twov2s_POST                 V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v29.2s, v30.2s }, [x16], x18  // ST2 { <Vt>.2S, <Vt2>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, D-form, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST2Twov4s_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v23.4s, v24.4s }, [x6], x19  // ST2 { <Vt>.4S, <Vt2>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, Q-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST2Twov2d_POST                 V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st2	{ v13.2d, v14.2d }, [x2], x1  // ST2 { <Vt>.2D, <Vt2>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, multiple, Q-form, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  2      4    4     2.00     -    ST2i8                          V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st2	{ v21.b, v22.b }[13], [x29]    // ST2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
# CHECK-NEXT:  2      4    4     2.00     -    ST2i16                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st2	{ v3.h, v4.h }[1], [x24]       // ST2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
# CHECK-NEXT:  2      4    4     2.00     -    ST2i32                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st2	{ v21.s, v22.s }[1], [x12]     // ST2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
# CHECK-NEXT:  2      4    4     2.00     -    ST2i64                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           st2	{ v28.d, v29.d }[1], [x17]     // ST2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD store, 2 element, one lane, D  \\ 2 4  4  2.0 V1UnitV01,V1UnitL01
# CHECK-NEXT:  3      4    4     2.00     -    ST2i8_POST                     V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v14.b, v15.b }[0], [x12], #2  // ST2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>], #2  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2i8_POST                     V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v6.b, v7.b }[1], [x2], x27   // ST2 { <Vt>.B, <Vt2>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2i16_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v7.h, v8.h }[5], [x14], #4   // ST2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>], #4  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2i16_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v27.h, v28.h }[7], [x27], x30  // ST2 { <Vt>.H, <Vt2>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2i32_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v18.s, v19.s }[2], [x5], #8  // ST2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>], #8  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2i32_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v3.s, v4.s }[0], [x18], x12  // ST2 { <Vt>.S, <Vt2>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, one lane, B/H/S  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2i64_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v2.d, v3.d }[1], [x11], #16  // ST2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>], #16  \\ ASIMD store, 2 element, one lane, D  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  3      4    4     2.00     -    ST2i64_POST                    V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   st2	{ v8.d, v9.d }[0], [x4], x13   // ST2 { <Vt>.D, <Vt2>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD store, 2 element, one lane, D  \\ 3 4  4  2.0 V1UnitV01,V1UnitL01,V1UnitI
# CHECK-NEXT:  2      4    4     2.00     -    ST2B_IMM                       V1UnitL, V1UnitL01, V1UnitV,                      st2b	{ z10.b, z11.b }, p7, [x7]     // ST2B { <Zt1>.B, <Zt2>.B }, <Pg>, [<Xn|SP>]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2B_IMM                       V1UnitL, V1UnitL01, V1UnitV,                      st2b	{ z3.b, z4.b }, p7, [x1, #14, mul vl]  // ST2B { <Zt1>.B, <Zt2>.B }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2B                           V1UnitL, V1UnitL01, V1UnitV,                      st2b	{ z13.b, z14.b }, p4, [x30, x3]  // ST2B { <Zt1>.B, <Zt2>.B }, <Pg>, [<Xn|SP>, <Xm>]  \\ Contiguous store two structures from two vectors, scalar + scalar  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2D_IMM                       V1UnitL, V1UnitL01, V1UnitV,                      st2d	{ z30.d, z31.d }, p5, [x4]     // ST2D { <Zt1>.D, <Zt2>.D }, <Pg>, [<Xn|SP>]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2D_IMM                       V1UnitL, V1UnitL01, V1UnitV,                      st2d	{ z30.d, z31.d }, p4, [x16, #-14, mul vl]  // ST2D { <Zt1>.D, <Zt2>.D }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2D                           V1UnitL, V1UnitL01, V1UnitV,                      st2d	{ z13.d, z14.d }, p2, [x10, x29, lsl #3]  // ST2D { <Zt1>.D, <Zt2>.D }, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous store two structures from two vectors, scalar + scalar  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2H_IMM                       V1UnitL, V1UnitL01, V1UnitV,                      st2h	{ z29.h, z30.h }, p2, [x18]    // ST2H { <Zt1>.H, <Zt2>.H }, <Pg>, [<Xn|SP>]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2H_IMM                       V1UnitL, V1UnitL01, V1UnitV,                      st2h	{ z5.h, z6.h }, p0, [x19, #12, mul vl]  // ST2H { <Zt1>.H, <Zt2>.H }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  3      4    4     2.00     -    ST2H                           V1UnitI, V1UnitL, V1UnitL01, V1UnitS, V1UnitV,    st2h	{ z3.h, z4.h }, p0, [x4, x6, lsl #1]  // ST2H { <Zt1>.H, <Zt2>.H }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous store two structures from two vectors, scalar + scalar  \\ 3 4  4  2.00 V1UnitL01[2],V1UnitS[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2W_IMM                       V1UnitL, V1UnitL01, V1UnitV,                      st2w	{ z5.s, z6.s }, p5, [x13]      // ST2W { <Zt1>.S, <Zt2>.S }, <Pg>, [<Xn|SP>]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2W_IMM                       V1UnitL, V1UnitL01, V1UnitV,                      st2w	{ z26.s, z27.s }, p3, [x4, #-6, mul vl]  // ST2W { <Zt1>.S, <Zt2>.S }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store two structures from two vectors, scalar + imm  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  2      4    4     2.00     -    ST2W                           V1UnitL, V1UnitL01, V1UnitV,                      st2w	{ z18.s, z19.s }, p7, [x7, x0, lsl #2]  // ST2W { <Zt1>.S, <Zt2>.S }, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous store two structures from two vectors, scalar + scalar  \\ 2 4  4  2.00 V1UnitL01[2],V1UnitV[2]
# CHECK-NEXT:  4      4    4     1.00     -    ST3Threev8b                    V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v26.8b, v27.8b, v28.8b }, [x6]  // ST3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  6      5    5     0.67     -    ST3Threev16b                   V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v5.16b, v6.16b, v7.16b }, [x2]  // ST3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 6 5  5  0.67 V1UnitV01[3],V1UnitL01[3]
# CHECK-NEXT:  4      4    4     1.00     -    ST3Threev4h                    V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v15.4h, v16.4h, v17.4h }, [x11]  // ST3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  6      5    5     0.67     -    ST3Threev8h                    V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v11.8h, v12.8h, v13.8h }, [x20]  // ST3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 6 5  5  0.67 V1UnitV01[3],V1UnitL01[3]
# CHECK-NEXT:  4      4    4     1.00     -    ST3Threev2s                    V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v16.2s, v17.2s, v18.2s }, [x16]  // ST3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  6      5    5     0.67     -    ST3Threev4s                    V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v20.4s, v21.4s, v22.4s }, [x2]  // ST3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 6 5  5  0.67 V1UnitV01[3],V1UnitL01[3]
# CHECK-NEXT:  6      5    5     0.67     -    ST3Threev2d                    V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v8.2d, v9.2d, v10.2d }, [x15]  // ST3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>]  \\ ASIMD store, 3 element, multiple, Q-form, D  \\ 6 5  5  0.67 V1UnitV01[3],V1UnitL01[3]
# CHECK-NEXT:  5      4    4     1.00     -    ST3Threev8b_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v26.8b, v27.8b, v28.8b }, [x18], #24  // ST3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], #24  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      5    5     0.67     -    ST3Threev16b_POST              V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v5.16b, v6.16b, v7.16b }, [x8], #48  // ST3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], #48  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3Threev4h_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v7.4h, v8.4h, v9.4h }, [x17], #24  // ST3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], #24  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      5    5     0.67     -    ST3Threev8h_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v7.8h, v8.8h, v9.8h }, [x27], #48  // ST3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], #48  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3Threev2s_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v15.2s, v16.2s, v17.2s }, [x28], #24  // ST3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], #24  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      5    5     0.67     -    ST3Threev4s_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v22.4s, v23.4s, v24.4s }, [x20], #48  // ST3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], #48  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
# CHECK-NEXT:  7      5    5     0.67     -    ST3Threev2d_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v10.2d, v11.2d, v12.2d }, [x10], #48  // ST3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], #48  \\ ASIMD store, 3 element, multiple, Q-form, D  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3Threev8b_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v16.8b, v17.8b, v18.8b }, [x7], x0  // ST3 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      5    5     0.67     -    ST3Threev16b_POST              V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v9.16b, v10.16b, v11.16b }, [x12], x6  // ST3 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3Threev4h_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v21.4h, v22.4h, v23.4h }, [x11], x5  // ST3 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      5    5     0.67     -    ST3Threev8h_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v8.8h, v9.8h, v10.8h }, [x3], x1  // ST3 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3Threev2s_POST               V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v25.2s, v26.2s, v27.2s }, [x10], x27  // ST3 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, D-form, B/H/S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      5    5     0.67     -    ST3Threev4s_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v25.4s, v26.4s, v27.4s }, [x21], x23  // ST3 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, Q-form, B/H/S  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
# CHECK-NEXT:  7      5    5     0.67     -    ST3Threev2d_POST               V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st3	{ v25.2d, v26.2d, v27.2d }, [x22], x13  // ST3 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, multiple, Q-form, D  \\ 7 5  5  0.67 V1UnitV01[3],V1UnitL01[3],V1UnitI
# CHECK-NEXT:  4      4    4     1.00     -    ST3i8                          V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v23.b, v24.b, v25.b }[3], [x1]  // ST3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD store, 3 element, one lane, B/H  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      4    4     1.00     -    ST3i16                         V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v5.h, v6.h, v7.h }[2], [x25]  // ST3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD store, 3 element, one lane, B/H  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      4    4     1.00     -    ST3i32                         V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v7.s, v8.s, v9.s }[0], [x5]  // ST3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD store, 3 element, one lane, S  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      4    4     1.00     -    ST3i64                         V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v9.d, v10.d, v11.d }[0], [x27]  // ST3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD store, 3 element, one lane, D  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  5      4    4     1.00     -    ST3i8_POST                     V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v7.b, v8.b, v9.b }[8], [x12], #3  // ST3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>], #3  \\ ASIMD store, 3 element, one lane, B/H  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3i8_POST                     V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v6.b, v7.b, v8.b }[1], [x21], x25  // ST3 { <Vt>.B, <Vt2>.B, <Vt3>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, one lane, B/H  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3i16_POST                    V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v9.h, v10.h, v11.h }[0], [x28], #6  // ST3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>], #6  \\ ASIMD store, 3 element, one lane, B/H  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3i16_POST                    V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v27.h, v28.h, v29.h }[0], [x22], x4  // ST3 { <Vt>.H, <Vt2>.H, <Vt3>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, one lane, B/H  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3i32_POST                    V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v6.s, v7.s, v8.s }[2], [x6], #12  // ST3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>], #12  \\ ASIMD store, 3 element, one lane, S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3i32_POST                    V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v27.s, v28.s, v29.s }[2], [x3], x1  // ST3 { <Vt>.S, <Vt2>.S, <Vt3>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, one lane, S  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3i64_POST                    V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v3.d, v4.d, v5.d }[0], [x23], #24  // ST3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>], #24  \\ ASIMD store, 3 element, one lane, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST3i64_POST                    V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st3	{ v9.d, v10.d, v11.d }[1], [x16], x29  // ST3 { <Vt>.D, <Vt2>.D, <Vt3>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD store, 3 element, one lane, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  10     7    7     0.40     -    ST3B_IMM                       V1UnitL[5], V1UnitL01[5], V1UnitV[5],             st3b	{ z3.b - z5.b }, p0, [x30]     // ST3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>, [<Xn|SP>]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
# CHECK-NEXT:  10     7    7     0.40     -    ST3B_IMM                       V1UnitL[5], V1UnitL01[5], V1UnitV[5],             st3b	{ z21.b - z23.b }, p5, [x16, #3, mul vl]  // ST3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
# CHECK-NEXT:  15     7    7     0.40     -    ST3B                           V1UnitI[5], V1UnitL[5], V1UnitL01[5], V1UnitS[5], V1UnitV[5],   st3b	{ z24.b - z26.b }, p7, [x12, x27]  // ST3B { <Zt1>.B, <Zt2>.B, <Zt3>.B }, <Pg>, [<Xn|SP>, <Xm>]  \\ Contiguous store three structures from three vectors, scalar + scalar  \\ 15 7  7  0.40 V1UnitL01[10],V1UnitS[10],V1UnitV[10]
# CHECK-NEXT:  10     7    7     0.40     -    ST3D_IMM                       V1UnitL[5], V1UnitL01[5], V1UnitV[5],             st3d	{ z24.d - z26.d }, p5, [x14]   // ST3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>, [<Xn|SP>]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
# CHECK-NEXT:  10     7    7     0.40     -    ST3D_IMM                       V1UnitL[5], V1UnitL01[5], V1UnitV[5],             st3d	{ z15.d - z17.d }, p4, [x26, #-6, mul vl]  // ST3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
# CHECK-NEXT:  15     7    7     0.40     -    ST3D                           V1UnitI[5], V1UnitL[5], V1UnitL01[5], V1UnitS[5], V1UnitV[5],   st3d	{ z24.d - z26.d }, p2, [x19, x9, lsl #3]  // ST3D { <Zt1>.D, <Zt2>.D, <Zt3>.D }, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous store three structures from three vectors, scalar + scalar  \\ 15 7  7  0.40 V1UnitL01[10],V1UnitS[10],V1UnitV[10]
# CHECK-NEXT:  10     7    7     0.40     -    ST3H_IMM                       V1UnitL[5], V1UnitL01[5], V1UnitV[5],             st3h	{ z2.h - z4.h }, p5, [x5]      // ST3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>, [<Xn|SP>]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
# CHECK-NEXT:  10     7    7     0.40     -    ST3H_IMM                       V1UnitL[5], V1UnitL01[5], V1UnitV[5],             st3h	{ z12.h - z14.h }, p6, [x20, #-12, mul vl]  // ST3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
# CHECK-NEXT:  15     7    7     0.40     -    ST3H                           V1UnitI[5], V1UnitL[5], V1UnitL01[5], V1UnitS[5], V1UnitV[5],   st3h	{ z22.h - z24.h }, p2, [x27, x26, lsl #1]  // ST3H { <Zt1>.H, <Zt2>.H, <Zt3>.H }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous store three structures from three vectors, scalar + scalar  \\ 15 7  7  0.40 V1UnitL01[10],V1UnitS[10],V1UnitV[10]
# CHECK-NEXT:  10     7    7     0.40     -    ST3W_IMM                       V1UnitL[5], V1UnitL01[5], V1UnitV[5],             st3w	{ z20.s - z22.s }, p2, [x28]   // ST3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>, [<Xn|SP>]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
# CHECK-NEXT:  10     7    7     0.40     -    ST3W_IMM                       V1UnitL[5], V1UnitL01[5], V1UnitV[5],             st3w	{ z19.s - z21.s }, p6, [x21, #-6, mul vl]  // ST3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store three structures from three vectors, scalar + imm  \\ 10 7  7  0.40 V1UnitL01[10],V1UnitV[10]
# CHECK-NEXT:  15     7    7     0.40     -    ST3W                           V1UnitI[5], V1UnitL[5], V1UnitL01[5], V1UnitS[5], V1UnitV[5],   st3w	{ z12.s - z14.s }, p2, [x22, x22, lsl #2]  // ST3W { <Zt1>.S, <Zt2>.S, <Zt3>.S }, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous store three structures from three vectors, scalar + scalar  \\ 15 7  7  0.40 V1UnitL01[10],V1UnitS[10],V1UnitV[10]
# CHECK-NEXT:  6      6    6     0.67     -    ST4Fourv8b                     V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st4	{ v24.8b, v25.8b, v26.8b, v27.8b }, [x8]  // ST4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 6 6  6  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  12     7    7     0.33     -    ST4Fourv16b                    V1UnitL[6], V1UnitL01[6], V1UnitV[6], V1UnitV01[6],   st4	{ v9.16b, v10.16b, v11.16b, v12.16b }, [x27]  // ST4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 12 7  7  0.33 V1UnitV01[12],V1UnitL01[12]
# CHECK-NEXT:  6      6    6     0.67     -    ST4Fourv4h                     V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st4	{ v10.4h, v11.4h, v12.4h, v13.4h }, [x27]  // ST4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 6 6  6  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  12     7    7     0.33     -    ST4Fourv8h                     V1UnitL[6], V1UnitL01[6], V1UnitV[6], V1UnitV01[6],   st4	{ v18.8h, v19.8h, v20.8h, v21.8h }, [x15]  // ST4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 12 7  7  0.33 V1UnitV01[12],V1UnitL01[12]
# CHECK-NEXT:  6      6    6     0.67     -    ST4Fourv2s                     V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st4	{ v22.2s, v23.2s, v24.2s, v25.2s }, [x21]  // ST4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 6 6  6  0.67 V1UnitV01[7],V1UnitL01[7]
# CHECK-NEXT:  12     7    7     0.33     -    ST4Fourv4s                     V1UnitL[6], V1UnitL01[6], V1UnitV[6], V1UnitV01[6],   st4	{ v27.4s, v28.4s, v29.4s, v30.4s }, [x22]  // ST4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 12 7  7  0.33 V1UnitV01[12],V1UnitL01[12]
# CHECK-NEXT:  8      4    4     0.50     -    ST4Fourv2d                     V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st4	{ v1.2d, v2.2d, v3.2d, v4.2d }, [x6]  // ST4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>]  \\ ASIMD store, 4 element, multiple, Q-form, D  \\ 8 4  4  0.50 V1UnitV01[8],V1UnitL01[8]
# CHECK-NEXT:  7      6    6     0.67     -    ST4Fourv8b_POST                V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st4	{ v1.8b, v2.8b, v3.8b, v4.8b }, [x26], #32  // ST4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], #32  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
# CHECK-NEXT:  13     7    7     0.33     -    ST4Fourv16b_POST               V1UnitI, V1UnitL[6], V1UnitL01[6], V1UnitV[6], V1UnitV01[6],   st4	{ v5.16b, v6.16b, v7.16b, v8.16b }, [x23], #64  // ST4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], #64  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
# CHECK-NEXT:  7      6    6     0.67     -    ST4Fourv4h_POST                V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st4	{ v16.4h, v17.4h, v18.4h, v19.4h }, [x7], #32  // ST4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], #32  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
# CHECK-NEXT:  13     7    7     0.33     -    ST4Fourv8h_POST                V1UnitI, V1UnitL[6], V1UnitL01[6], V1UnitV[6], V1UnitV01[6],   st4	{ v25.8h, v26.8h, v27.8h, v28.8h }, [x7], #64  // ST4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], #64  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
# CHECK-NEXT:  7      6    6     0.67     -    ST4Fourv2s_POST                V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st4	{ v14.2s, v15.2s, v16.2s, v17.2s }, [x0], #32  // ST4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], #32  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
# CHECK-NEXT:  13     7    7     0.33     -    ST4Fourv4s_POST                V1UnitI, V1UnitL[6], V1UnitL01[6], V1UnitV[6], V1UnitV01[6],   st4	{ v21.4s, v22.4s, v23.4s, v24.4s }, [x17], #64  // ST4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], #64  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
# CHECK-NEXT:  9      4    4     0.50     -    ST4Fourv2d_POST                V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st4	{ v16.2d, v17.2d, v18.2d, v19.2d }, [x7], #64  // ST4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], #64  \\ ASIMD store, 4 element, multiple, Q-form, D  \\ 9 4  4  0.50 V1UnitV01[8],V1UnitL01[8],V1UnitI
# CHECK-NEXT:  7      6    6     0.67     -    ST4Fourv8b_POST                V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st4	{ v3.8b, v4.8b, v5.8b, v6.8b }, [x1], x23  // ST4 { <Vt>.8B, <Vt2>.8B, <Vt3>.8B, <Vt4>.8B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
# CHECK-NEXT:  13     7    7     0.33     -    ST4Fourv16b_POST               V1UnitI, V1UnitL[6], V1UnitL01[6], V1UnitV[6], V1UnitV01[6],   st4	{ v25.16b, v26.16b, v27.16b, v28.16b }, [x19], x1  // ST4 { <Vt>.16B, <Vt2>.16B, <Vt3>.16B, <Vt4>.16B }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
# CHECK-NEXT:  7      6    6     0.67     -    ST4Fourv4h_POST                V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st4	{ v4.4h, v5.4h, v6.4h, v7.4h }, [x2], x3  // ST4 { <Vt>.4H, <Vt2>.4H, <Vt3>.4H, <Vt4>.4H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
# CHECK-NEXT:  13     7    7     0.33     -    ST4Fourv8h_POST                V1UnitI, V1UnitL[6], V1UnitL01[6], V1UnitV[6], V1UnitV01[6],   st4	{ v13.8h, v14.8h, v15.8h, v16.8h }, [x18], x27  // ST4 { <Vt>.8H, <Vt2>.8H, <Vt3>.8H, <Vt4>.8H }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
# CHECK-NEXT:  7      6    6     0.67     -    ST4Fourv2s_POST                V1UnitI, V1UnitL[3], V1UnitL01[3], V1UnitV[3], V1UnitV01[3],   st4	{ v18.2s, v19.2s, v20.2s, v21.2s }, [x10], x6  // ST4 { <Vt>.2S, <Vt2>.2S, <Vt3>.2S, <Vt4>.2S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, D-form, B/H/S  \\ 7 6  6  0.67 V1UnitV01[7],V1UnitL01[7],V1UnitI
# CHECK-NEXT:  13     7    7     0.33     -    ST4Fourv4s_POST                V1UnitI, V1UnitL[6], V1UnitL01[6], V1UnitV[6], V1UnitV01[6],   st4	{ v4.4s, v5.4s, v6.4s, v7.4s }, [x9], x18  // ST4 { <Vt>.4S, <Vt2>.4S, <Vt3>.4S, <Vt4>.4S }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, Q-form, B/H/S  \\ 13 7  7  0.33 V1UnitV01[12],V1UnitL01[12],V1UnitI
# CHECK-NEXT:  9      4    4     0.50     -    ST4Fourv2d_POST                V1UnitI, V1UnitL[4], V1UnitL01[4], V1UnitV[4], V1UnitV01[4],   st4	{ v4.2d, v5.2d, v6.2d, v7.2d }, [x8], x2  // ST4 { <Vt>.2D, <Vt2>.2D, <Vt3>.2D, <Vt4>.2D }, [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, multiple, Q-form, D  \\ 9 4  4  0.50 V1UnitV01[8],V1UnitL01[8],V1UnitI
# CHECK-NEXT:  6      6    6     1.00     -    ST4i8                          V1UnitL[3], V1UnitV[3],                           st4	{ v25.b, v26.b, v27.b, v28.b }[5], [x8]  // ST4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>]  \\ ASIMD store, 4 element, one lane, B/H  \\ 6 6  6  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  6      6    6     1.00     -    ST4i16                         V1UnitL[3], V1UnitV[3],                           st4	{ v8.h, v9.h, v10.h, v11.h }[2], [x11]  // ST4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>]  \\ ASIMD store, 4 element, one lane, B/H  \\ 6 6  6  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  6      6    6     1.00     -    ST4i32                         V1UnitL[3], V1UnitV[3],                           st4	{ v1.s, v2.s, v3.s, v4.s }[1], [x17]  // ST4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>]  \\ ASIMD store, 4 element, one lane, S  \\ 6 6  6  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  4      4    4     1.00     -    ST4i64                         V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st4	{ v24.d, v25.d, v26.d, v27.d }[0], [x30]  // ST4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>]  \\ ASIMD store, 4 element, one lane, D  \\ 4 4  4  1.00 V1UnitV01[2],V1UnitL01[2]
# CHECK-NEXT:  7      6    6     1.00     -    ST4i8_POST                     V1UnitI, V1UnitL[3], V1UnitV[3],                  st4	{ v9.b, v10.b, v11.b, v12.b }[12], [x17], #4  // ST4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>], #4  \\ ASIMD store, 4 element, one lane, B/H  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      6    6     1.00     -    ST4i8_POST                     V1UnitI, V1UnitL[3], V1UnitV[3],                  st4	{ v21.b, v22.b, v23.b, v24.b }[13], [x1], x22  // ST4 { <Vt>.B, <Vt2>.B, <Vt3>.B, <Vt4>.B }[<indexb>], [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, one lane, B/H  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      6    6     1.00     -    ST4i16_POST                    V1UnitI, V1UnitL[3], V1UnitV[3],                  st4	{ v17.h, v18.h, v19.h, v20.h }[5], [x16], #8  // ST4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>], #8  \\ ASIMD store, 4 element, one lane, B/H  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      6    6     1.00     -    ST4i16_POST                    V1UnitI, V1UnitL[3], V1UnitV[3],                  st4	{ v14.h, v15.h, v16.h, v17.h }[5], [x24], x30  // ST4 { <Vt>.H, <Vt2>.H, <Vt3>.H, <Vt4>.H }[<indexh>], [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, one lane, B/H  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      6    6     1.00     -    ST4i32_POST                    V1UnitI, V1UnitL[3], V1UnitV[3],                  st4	{ v9.s, v10.s, v11.s, v12.s }[0], [x14], #16  // ST4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>], #16  \\ ASIMD store, 4 element, one lane, S  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  7      6    6     1.00     -    ST4i32_POST                    V1UnitI, V1UnitL[3], V1UnitV[3],                  st4	{ v26.s, v27.s, v28.s, v29.s }[2], [x14], x24  // ST4 { <Vt>.S, <Vt2>.S, <Vt3>.S, <Vt4>.S }[<indexs>], [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, one lane, S  \\ 7 6  6  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST4i64_POST                    V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st4	{ v17.d, v18.d, v19.d, v20.d }[1], [x10], #32  // ST4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>], #32  \\ ASIMD store, 4 element, one lane, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  5      4    4     1.00     -    ST4i64_POST                    V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV[2], V1UnitV01[2],   st4	{ v26.d, v27.d, v28.d, v29.d }[0], [x20], x1  // ST4 { <Vt>.D, <Vt2>.D, <Vt3>.D, <Vt4>.D }[<indexd>], [<Xn|SP>], <Xm>  \\ ASIMD store, 4 element, one lane, D  \\ 5 4  4  1.00 V1UnitV01[2],V1UnitL01[2],V1UnitI
# CHECK-NEXT:  18     19   19    0.22     -    ST4B_IMM                       V1UnitL[9], V1UnitL01[9], V1UnitV[9],             st4b	{ z8.b - z11.b }, p7, [x21]    // ST4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>, [<Xn|SP>]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
# CHECK-NEXT:  18     19   19    0.22     -    ST4B_IMM                       V1UnitL[9], V1UnitL01[9], V1UnitV[9],             st4b	{ z10.b - z13.b }, p0, [x13, #-24, mul vl]  // ST4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
# CHECK-NEXT:  27     11   11    0.22     -    ST4B                           V1UnitI[9], V1UnitL[9], V1UnitL01[9], V1UnitS[9], V1UnitV[9],   st4b	{ z4.b - z7.b }, p5, [x16, x8]  // ST4B { <Zt1>.B, <Zt2>.B, <Zt3>.B, <Zt4>.B }, <Pg>, [<Xn|SP>, <Xm>]  \\ Contiguous store four structures from four vectors, scalar + scalar  \\ 27 11  11  0.22 V1UnitL01[19],V1UnitS[19],V1UnitV[19]
# CHECK-NEXT:  18     19   19    0.22     -    ST4D_IMM                       V1UnitL[9], V1UnitL01[9], V1UnitV[9],             st4d	{ z7.d - z10.d }, p2, [x16]    // ST4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>, [<Xn|SP>]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
# CHECK-NEXT:  18     19   19    0.22     -    ST4D_IMM                       V1UnitL[9], V1UnitL01[9], V1UnitV[9],             st4d	{ z22.d - z25.d }, p7, [x29, #-4, mul vl]  // ST4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
# CHECK-NEXT:  27     11   11    0.22     -    ST4D                           V1UnitI[9], V1UnitL[9], V1UnitL01[9], V1UnitS[9], V1UnitV[9],   st4d	{ z16.d - z19.d }, p7, [x8, x4, lsl #3]  // ST4D { <Zt1>.D, <Zt2>.D, <Zt3>.D, <Zt4>.D }, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ Contiguous store four structures from four vectors, scalar + scalar  \\ 27 11  11  0.22 V1UnitL01[19],V1UnitS[19],V1UnitV[19]
# CHECK-NEXT:  18     19   19    0.22     -    ST4H_IMM                       V1UnitL[9], V1UnitL01[9], V1UnitV[9],             st4h	{ z17.h - z20.h }, p0, [x19]   // ST4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>, [<Xn|SP>]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
# CHECK-NEXT:  18     19   19    0.22     -    ST4H_IMM                       V1UnitL[9], V1UnitL01[9], V1UnitV[9],             st4h	{ z26.h - z29.h }, p1, [x26, #-32, mul vl]  // ST4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
# CHECK-NEXT:  27     11   11    0.22     -    ST4H                           V1UnitI[9], V1UnitL[9], V1UnitL01[9], V1UnitS[9], V1UnitV[9],   st4h	{ z26.h - z29.h }, p7, [x20, x27, lsl #1]  // ST4H { <Zt1>.H, <Zt2>.H, <Zt3>.H, <Zt4>.H }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Contiguous store four structures from four vectors, scalar + scalar  \\ 27 11  11  0.22 V1UnitL01[19],V1UnitS[19],V1UnitV[19]
# CHECK-NEXT:  18     19   19    0.22     -    ST4W_IMM                       V1UnitL[9], V1UnitL01[9], V1UnitV[9],             st4w	{ z3.s - z6.s }, p7, [x11]     // ST4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>, [<Xn|SP>]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
# CHECK-NEXT:  18     19   19    0.22     -    ST4W_IMM                       V1UnitL[9], V1UnitL01[9], V1UnitV[9],             st4w	{ z10.s - z13.s }, p5, [x18, #8, mul vl]  // ST4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Contiguous store four structures from four vectors, scalar + imm  \\ 18 19  19  0.22 V1UnitL01[19],V1UnitV[19]
# CHECK-NEXT:  27     11   11    0.22     -    ST4W                           V1UnitI[9], V1UnitL[9], V1UnitL01[9], V1UnitS[9], V1UnitV[9],   st4w	{ z21.s - z24.s }, p3, [x9, x19, lsl #2]  // ST4W { <Zt1>.S, <Zt2>.S, <Zt3>.S, <Zt4>.S }, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ Contiguous store four structures from four vectors, scalar + scalar  \\ 27 11  11  0.22 V1UnitL01[19],V1UnitS[19],V1UnitV[19]
# CHECK-NEXT:  2      1    1     2.00     SE   STLRB                          V1UnitD, V1UnitL, V1UnitL01,                      stlrb	w5, [x30]                      // STLRB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   STLRB                          V1UnitD, V1UnitL, V1UnitL01,                      stlrb	w0, [x17]                      // STLRB <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   STLRH                          V1UnitD, V1UnitL, V1UnitL01,                      stlrh	w17, [x2]                      // STLRH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     SE   STLRH                          V1UnitD, V1UnitL, V1UnitL01,                      stlrh	w18, [x8]                      // STLRH <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    STLURWi                        V1UnitD, V1UnitL, V1UnitL01,                      stlur	w28, [x14]                     // STLUR <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    STLURWi                        V1UnitD, V1UnitL, V1UnitL01,                      stlur	w28, [x11, #133]               // STLUR <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    STLURXi                        V1UnitD, V1UnitL, V1UnitL01,                      stlur	x25, [x4]                      // STLUR <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    STLURXi                        V1UnitD, V1UnitL, V1UnitL01,                      stlur	x25, [x0, #101]                // STLUR <Xt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    STLURBi                        V1UnitD, V1UnitL, V1UnitL01,                      stlurb	w28, [x16]                     // STLURB <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    STLURBi                        V1UnitD, V1UnitL, V1UnitL01,                      stlurb	w18, [x11, #-202]              // STLURB <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    STLURHi                        V1UnitD, V1UnitL, V1UnitL01,                      stlurh	w25, [x10]                     // STLURH <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      1    1     2.00     -    STLURHi                        V1UnitD, V1UnitL, V1UnitL01,                      stlurh	w17, [x4, #89]                 // STLURH <Wt>, [<Xn|SP>, #<simm>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXPW                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxp	w15, w25, w26, [x28]           // STLXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXPW                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxp	w24, w1, w1, [x22]             // STLXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXPX                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxp	w16, x26, x3, [x11]            // STLXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXPX                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxp	w29, x18, x7, [x28]            // STLXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXRW                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxr	w24, w19, [x21]                // STLXR <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXRW                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxr	w1, w2, [x4]                   // STLXR <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXRX                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxr	w19, x1, [x9]                  // STLXR <Ws>, <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXRX                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxr	w1, x24, [x8]                  // STLXR <Ws>, <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXRB                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxrb	w29, w1, [x4]                  // STLXRB <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXRB                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxrb	w21, w5, [x25]                 // STLXRB <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXRH                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxrh	w6, w4, [x28]                  // STLXRH <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STLXRH                         V1UnitD, V1UnitL[2], V1UnitL01,                   stlxrh	w9, w19, [x5]                  // STLXRH <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      2    2     2.00     -    STNPSi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stnp	s25, s7, [x13]                 // STNP <St1>, <St2>, [<Xn|SP>]  \\ Store vector pair, immed offset, S-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STNPSi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stnp	s24, s5, [x25, #-80]           // STNP <St1>, <St2>, [<Xn|SP>, #<imm32>]  \\ Store vector pair, immed offset, S-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STNPDi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stnp	d17, d29, [x0]                 // STNP <Dt1>, <Dt2>, [<Xn|SP>]  \\ Store vector pair, immed offset, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STNPDi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stnp	d11, d3, [x5, #176]            // STNP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]  \\ Store vector pair, immed offset, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STNPQi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stnp	q21, q19, [x17]                // STNP <Qt1>, <Qt2>, [<Xn|SP>]  \\ Store vector pair, immed offset, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STNPQi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stnp	q10, q0, [x16, #-416]          // STNP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]  \\ Store vector pair, immed offset, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      1    1     2.00     -    STNPWi                         V1UnitD, V1UnitL, V1UnitL01,                      stnp	w26, w16, [x1]                 // STNP <Wt1>, <Wt2>, [<Xn|SP>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STNPWi                         V1UnitD, V1UnitL, V1UnitL01,                      stnp	w22, w30, [x20, #-220]         // STNP <Wt1>, <Wt2>, [<Xn|SP>, #<imms>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STNPXi                         V1UnitD, V1UnitL, V1UnitL01,                      stnp	x24, x11, [x5]                 // STNP <Xt1>, <Xt2>, [<Xn|SP>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STNPXi                         V1UnitD, V1UnitL, V1UnitL01,                      stnp	x16, x15, [x8, #248]           // STNP <Xt1>, <Xt2>, [<Xn|SP>, #<immd>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      2    2     2.00     -    STNT1B_ZRI                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1b	{ z11.b }, p6, [x3]            // STNT1B { <Zt>.B }, <Pg>, [<Xn|SP>]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1B_ZRI                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1b	{ z19.b }, p6, [x21, #1, mul vl]  // STNT1B { <Zt>.B }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1B_ZRR                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1b	{ z20.b }, p2, [x13, x8]       // STNT1B { <Zt>.B }, <Pg>, [<Xn|SP>, <Xm>]  \\ Non temporal store, scalar + scalar  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1D_ZRI                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1d	{ z6.d }, p6, [x19]            // STNT1D { <Zt>.D }, <Pg>, [<Xn|SP>]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1D_ZRI                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1d	{ z14.d }, p7, [x25, #-5, mul vl]  // STNT1D { <Zt>.D }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1D_ZRR                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1d	{ z10.d }, p7, [x20, x13, lsl #3]  // STNT1D { <Zt>.D }, <Pg>, [<Xn|SP>, <Xm>, LSL #3]  \\ Non temporal store, scalar + scalar  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1H_ZRI                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1h	{ z3.h }, p4, [x24]            // STNT1H { <Zt>.H }, <Pg>, [<Xn|SP>]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1H_ZRI                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1h	{ z27.h }, p5, [x11, #-4, mul vl]  // STNT1H { <Zt>.H }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  3      2    2     2.00     -    STNT1H_ZRR                     V1UnitI, V1UnitL, V1UnitL01, V1UnitS, V1UnitV,    stnt1h	{ z21.h }, p6, [x26, x15, lsl #1]  // STNT1H { <Zt>.H }, <Pg>, [<Xn|SP>, <Xm>, LSL #1]  \\ Non temporal store, scalar + scalar  \\ 3 2  2  2.0 V1UnitL01,V1UnitS,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1W_ZRI                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1w	{ z8.s }, p3, [x4]             // STNT1W { <Zt>.S }, <Pg>, [<Xn|SP>]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1W_ZRI                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1w	{ z14.s }, p1, [x19, #-4, mul vl]  // STNT1W { <Zt>.S }, <Pg>, [<Xn|SP>, #<imm>, MUL VL]  \\ Non temporal store, scalar + imm   \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STNT1W_ZRR                     V1UnitL, V1UnitL01, V1UnitV,                      stnt1w	{ z24.s }, p1, [x6, x20, lsl #2]  // STNT1W { <Zt>.S }, <Pg>, [<Xn|SP>, <Xm>, LSL #2]  \\ Non temporal store, scalar + scalar  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  3      2    2     2.00     -    STPSpost                       V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   stp	s15, s20, [x4], #40            // STP <St1>, <St2>, [<Xn|SP>], #<imm32>  \\ Store vector pair, immed post-index, S-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STPDpost                       V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   stp	d21, d24, [x16], #24           // STP <Dt1>, <Dt2>, [<Xn|SP>], #<imm64>  \\ Store vector pair, immed post-index, D-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  4      2    2     1.00     -    STPQpost                       V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV, V1UnitV01,   stp	q4, q7, [x22], #-176   // STP <Qt1>, <Qt2>, [<Xn|SP>], #<imm128>  \\ Store vector pair, immed post-index, Q-form  \\ 4 2  2  1.00 V1UnitI,V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  3      2    2     2.00     -    STPSpre                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   stp	s27, s2, [x15, #120]!          // STP <St1>, <St2>, [<Xn|SP>, #<imm32>]!  \\ Store vector pair, immed pre-index, S-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STPDpre                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   stp	d4, d26, [x5, #192]!           // STP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]!  \\ Store vector pair, immed pre-index, D-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  4      2    2     1.00     -    STPQpre                        V1UnitI, V1UnitL[2], V1UnitL01[2], V1UnitV, V1UnitV01,   stp	q23, q8, [x10, #-560]!  // STP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]!  \\ Store vector pair, immed pre-index, Q-form  \\ 4 2  2  1.00 V1UnitI,V1UnitL01[2],V1UnitV01[2]
# CHECK-NEXT:  2      2    2     2.00     -    STPSi                          V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stp	s14, s29, [x25]                // STP <St1>, <St2>, [<Xn|SP>]  \\ Store vector pair, immed offset, S-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STPDi                          V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stp	d17, d9, [x19]                 // STP <Dt1>, <Dt2>, [<Xn|SP>]  \\ Store vector pair, immed offset, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STPQi                          V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stp	q5, q25, [x5]                  // STP <Qt1>, <Qt2>, [<Xn|SP>]  \\ Store vector pair, immed offset, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STPSi                          V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stp	s27, s21, [x29, #-228]         // STP <St1>, <St2>, [<Xn|SP>, #<imm32>]  \\ Store vector pair, immed offset, S-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STPDi                          V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stp	d10, d31, [x8, #-40]           // STP <Dt1>, <Dt2>, [<Xn|SP>, #<imm64>]  \\ Store vector pair, immed offset, D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STPQi                          V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stp	q17, q18, [x21, #-784]         // STP <Qt1>, <Qt2>, [<Xn|SP>, #<imm128>]  \\ Store vector pair, immed offset, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      1    1     2.00     -    STPWpost                       V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             stp	w27, w11, [x12], #-152         // STP <Wt1>, <Wt2>, [<Xn|SP>], #<imms>  \\ Store pair, immed post-index  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  3      1    1     2.00     -    STPXpost                       V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             stp	x1, x12, [x4], #-240           // STP <Xt1>, <Xt2>, [<Xn|SP>], #<immd>  \\ Store pair, immed post-index  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  3      1    1     2.00     -    STPWpre                        V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             stp	w8, w27, [x17, #16]!           // STP <Wt1>, <Wt2>, [<Xn|SP>, #<imms>]!  \\ Store pair, immed pre-index  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  3      1    1     2.00     -    STPXpre                        V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             stp	x17, x29, [x8, #-224]!         // STP <Xt1>, <Xt2>, [<Xn|SP>, #<immd>]!  \\ Store pair, immed pre-index  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  2      1    1     2.00     -    STPWi                          V1UnitD, V1UnitL, V1UnitL01,                      stp	w24, w15, [x6]                 // STP <Wt1>, <Wt2>, [<Xn|SP>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STPXi                          V1UnitD, V1UnitL, V1UnitL01,                      stp	x30, x6, [x30]                 // STP <Xt1>, <Xt2>, [<Xn|SP>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STPWi                          V1UnitD, V1UnitL, V1UnitL01,                      stp	w1, w24, [x2, #-96]            // STP <Wt1>, <Wt2>, [<Xn|SP>, #<imms>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STPXi                          V1UnitD, V1UnitL, V1UnitL01,                      stp	x11, x17, [x17, #-112]         // STP <Xt1>, <Xt2>, [<Xn|SP>, #<immd>]  \\ Store pair, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  3      1    1     2.00     -    STRWpost                       V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             str	w21, [x0], #221                // STR <Wt>, [<Xn|SP>], #<simm>  \\ Store, immed post-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  3      1    1     2.00     -    STRXpost                       V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             str	x22, [x20], #-70               // STR <Xt>, [<Xn|SP>], #<simm>  \\ Store register, immed post-index  \\ 3 1  1  2.00 V1UnitL01,V1UnitD
# CHECK-NEXT:  3      1    1     2.00     -    STRWpre                        V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             str	w19, [x16, #-180]!             // STR <Wt>, [<Xn|SP>, #<simm>]!  \\ Store, immed pre-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  3      1    1     2.00     -    STRXpre                        V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             str	x29, [x19, #39]!               // STR <Xt>, [<Xn|SP>, #<simm>]!  \\ Store register, immed pre-index   \\ 3 1  1  2.00 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRWui                         V1UnitD, V1UnitL, V1UnitL01,                      str	w29, [x17]                     // STR <Wt>, [<Xn|SP>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRWui                         V1UnitD, V1UnitL, V1UnitL01,                      str	w30, [x1, #10460]              // STR <Wt>, [<Xn|SP>, #<pimm32>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXui                         V1UnitD, V1UnitL, V1UnitL01,                      str	x26, [x2]                      // STR <Xt>, [<Xn|SP>]  \\ Store register, unsigned immed  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXui                         V1UnitD, V1UnitL, V1UnitL01,                      str	x10, [x6, #8024]               // STR <Xt>, [<Xn|SP>, #<pimm64>]  \\ Store register, unsigned immed  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  3      2    2     2.00     -    STRBpost                       V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	b19, [x29], #-132              // STR <Bt>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHpost                       V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h16, [x9], #-46                // STR <Ht>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRSpost                       V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	s27, [x19], #42                // STR <St>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRDpost                       V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	d25, [x23], #-93               // STR <Dt>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQpost                       V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q20, [x29], #-68               // STR <Qt>, [<Xn|SP>], #<simm>  \\ Store vector reg, unsigned immed, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRBpre                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	b18, [x4, #71]!                // STR <Bt>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHpre                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h3, [x20, #67]!                // STR <Ht>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRSpre                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	s27, [x26, #-63]!              // STR <St>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRDpre                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	d19, [x19, #124]!              // STR <Dt>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQpre                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q17, [x12, #117]!              // STR <Qt>, [<Xn|SP>, #<simm>]!  \\ Store vector reg, immed post-index, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRBui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	b14, [x13]                     // STR <Bt>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRBui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	b8, [x6, #842]                 // STR <Bt>, [<Xn|SP>, #<pimm8>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRHui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	h26, [x20]                     // STR <Ht>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRHui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	h22, [x26, #6584]              // STR <Ht>, [<Xn|SP>, #<pimm16>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s12, [x26]                     // STR <St>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s6, [x10, #9644]               // STR <St>, [<Xn|SP>, #<pimm32>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d21, [x5]                      // STR <Dt>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d25, [x11, #7496]              // STR <Dt>, [<Xn|SP>, #<pimm64>]  \\ Store vector reg, immed pre-index, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRQui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	q15, [x30]                     // STR <Qt>, [<Xn|SP>]  \\ Store vector reg, immed pre-index, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRQui                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	q3, [x18, #3936]               // STR <Qt>, [<Xn|SP>, #<pimm128>]  \\ Store vector reg, immed pre-index, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  1      1    1     2.00     -    STR_PXI                        V1UnitL, V1UnitL01,                               str	p3, [x25]                      // STR <Pt>, [<Xn|SP>]  \\ Store from predicate reg  \\ 1 1  1  2.0 V1UnitL01
# CHECK-NEXT:  1      1    1     2.00     -    STR_PXI                        V1UnitL, V1UnitL01,                               str	p2, [x16, #196, mul vl]        // STR <Pt>, [<Xn|SP>, #<imm>, MUL VL]  \\ Store from predicate reg  \\ 1 1  1  2.0 V1UnitL01
# CHECK-NEXT:  2      1    1     2.00     -    STRWroX                        V1UnitD, V1UnitL, V1UnitL01,                      str	w25, [x29, x14]                // STR <Wt>, [<Xn|SP>, <Xm>]  \\ Store register, register offset, basic  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXroX                        V1UnitD, V1UnitL, V1UnitL01,                      str	x30, [x12, x6]                 // STR <Xt>, [<Xn|SP>, <Xm>]  \\ Store register, register offset, basic  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRWroW                        V1UnitD, V1UnitL, V1UnitL01,                      str	w7, [x19, w8, uxtw]            // STR <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXroW                        V1UnitD, V1UnitL, V1UnitL01,                      str	x3, [x28, w14, uxtw]           // STR <Xt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRWroW                        V1UnitD, V1UnitL, V1UnitL01,                      str	w14, [x17, w0, sxtw]           // STR <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXroW                        V1UnitD, V1UnitL, V1UnitL01,                      str	x3, [x16, w25, sxtw]           // STR <Xt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRWroX                        V1UnitD, V1UnitL, V1UnitL01,                      str	w18, [x2, x28, sxtx]           // STR <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXroX                        V1UnitD, V1UnitL, V1UnitL01,                      str	x10, [x5, x21, sxtx]           // STR <Xt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRWroW                        V1UnitD, V1UnitL, V1UnitL01,                      str	w17, [x27, w0, uxtw #2]        // STR <Wt>, [<Xn|SP>, <Wm>, UXTW #2] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXroW                        V1UnitD, V1UnitL, V1UnitL01,                      str	x17, [x21, w9, uxtw #3]        // STR <Xt>, [<Xn|SP>, <Wm>, UXTW #3] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRWroW                        V1UnitD, V1UnitL, V1UnitL01,                      str	w11, [x25, w10, sxtw #2]       // STR <Wt>, [<Xn|SP>, <Wm>, SXTW #2] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXroW                        V1UnitD, V1UnitL, V1UnitL01,                      str	x28, [x9, w13, sxtw #3]        // STR <Xt>, [<Xn|SP>, <Wm>, SXTW #3] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRWroX                        V1UnitD, V1UnitL, V1UnitL01,                      str	w21, [x18, x19, sxtx #2]       // STR <Wt>, [<Xn|SP>, <Xm>, SXTX #2] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXroX                        V1UnitD, V1UnitL, V1UnitL01,                      str	x25, [x19, x20, sxtx #3]       // STR <Xt>, [<Xn|SP>, <Xm>, SXTX #3] \\ Store register, register offset, extend, scale by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRWroX                        V1UnitD, V1UnitL, V1UnitL01,                      str	w16, [x19, x10, lsl #2]        // STR <Wt>, [<Xn|SP>, <Xm>, LSL #2]  \\ Store register, register offset, scaled by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRXroX                        V1UnitD, V1UnitL, V1UnitL01,                      str	x13, [x22, x9, lsl #3]         // STR <Xt>, [<Xn|SP>, <Xm>, LSL #3]  \\ Store register, register offset, scaled by 4/8  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      2    2     2.00     -    STRBroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	b14, [x1, x19]                 // STR <Bt>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRBroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	b2, [x28, w0, uxtw]            // STR <Bt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRBroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	b11, [x20, w18, sxtw]          // STR <Bt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRBroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	b14, [x23, x29, sxtx]          // STR <Bt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHroX                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h20, [x27, x2]                 // STR <Ht>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHroW                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h2, [x3, w27, uxtw]            // STR <Ht>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHroW                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h17, [x19, w17, sxtw]          // STR <Ht>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHroX                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h31, [x16, x17, sxtx]          // STR <Ht>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHroW                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h5, [x17, w3, uxtw #1]         // STR <Ht>, [<Xn|SP>, <Wm>, UXTW #1] \\ Store vector reg, register offset, extend, scale, H-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHroW                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h6, [x23, w30, sxtw #1]        // STR <Ht>, [<Xn|SP>, <Wm>, SXTW #1] \\ Store vector reg, register offset, extend, scale, H-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHroX                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h5, [x25, x23, sxtx #1]        // STR <Ht>, [<Xn|SP>, <Xm>, SXTX #1] \\ Store vector reg, register offset, extend, scale, H-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRHroX                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	h24, [x25, x5, lsl #1]         // STR <Ht>, [<Xn|SP>, <Xm>, LSL #1]  \\ Store vector reg, register offset, scale, H-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s25, [x8, x29]                 // STR <St>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s17, [x22, w15, uxtw]          // STR <St>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s20, [x11, w13, sxtw]          // STR <St>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s15, [x10, x15, sxtx]          // STR <St>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s10, [x13, w3, uxtw #2]        // STR <St>, [<Xn|SP>, <Wm>, UXTW #2] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s13, [x29, w5, sxtw #2]        // STR <St>, [<Xn|SP>, <Wm>, SXTW #2] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s31, [x4, x26, sxtx #2]        // STR <St>, [<Xn|SP>, <Xm>, SXTX #2] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRSroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	s5, [x30, x20, lsl #2]         // STR <St>, [<Xn|SP>, <Xm>, LSL #2]  \\ Store vector reg, register offset, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d0, [x0, x20]                  // STR <Dt>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d24, [x21, w22, uxtw]          // STR <Dt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d4, [x14, w7, sxtw]            // STR <Dt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d20, [x27, x5, sxtx]           // STR <Dt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d9, [x30, w23, uxtw #3]        // STR <Dt>, [<Xn|SP>, <Wm>, UXTW #3] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDroW                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d24, [x7, w29, sxtw #3]        // STR <Dt>, [<Xn|SP>, <Wm>, SXTW #3] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d3, [x27, x28, sxtx #3]        // STR <Dt>, [<Xn|SP>, <Xm>, SXTX #3] \\ Store vector reg, register offset, extend, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STRDroX                        V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           str	d27, [x5, x4, lsl #3]          // STR <Dt>, [<Xn|SP>, <Xm>, LSL #3]  \\ Store vector reg, register offset, scale, S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQroX                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q26, [x21, x7]                 // STR <Qt>, [<Xn|SP>, <Xm>]  \\ Store vector reg, register offset, basic, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQroW                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q28, [x24, w23, uxtw]          // STR <Qt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store vector reg, register offset, extend, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQroW                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q4, [x1, w15, sxtw]            // STR <Qt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store vector reg, register offset, extend, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQroX                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q5, [x6, x25, sxtx]            // STR <Qt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store vector reg, register offset, extend, Q-form  \\ 3 2  2  2.00 V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQroW                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q31, [x28, w25, uxtw #4]       // STR <Qt>, [<Xn|SP>, <Wm>, UXTW #4] \\ Store vector reg, register offset, extend, scale, Q-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQroW                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q2, [x9, w28, sxtw #4]         // STR <Qt>, [<Xn|SP>, <Wm>, SXTW #4] \\ Store vector reg, register offset, extend, scale, Q-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQroX                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q8, [x13, x8, sxtx #4]         // STR <Qt>, [<Xn|SP>, <Xm>, SXTX #4] \\ Store vector reg, register offset, extend, scale, Q-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  3      2    2     2.00     -    STRQroX                        V1UnitI, V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,   str	q31, [x30, x16, lsl #4]        // STR <Qt>, [<Xn|SP>, <Xm>, LSL #4]  \\ Store vector reg, register offset, scale, Q-form  \\ 3 2  2  2.0 V1UnitI,V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STR_ZXI                        V1UnitL, V1UnitL01, V1UnitV,                      str	z26, [x5]                      // STR <Zt>, [<Xn|SP>]  \\ Store from vector reg  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  2      2    2     2.00     -    STR_ZXI                        V1UnitL, V1UnitL01, V1UnitV,                      str	z15, [x12, #144, mul vl]       // STR <Zt>, [<Xn|SP>, #<imm>, MUL VL]  \\ Store from vector reg  \\ 2 2  2  2.0 V1UnitL01,V1UnitV
# CHECK-NEXT:  3      1    1     2.00     -    STRBBpost                      V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             strb	w26, [x8], #147                // STRB <Wt>, [<Xn|SP>], #<simm>  \\ Store, immed post-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  3      1    1     2.00     -    STRBBpre                       V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             strb	w23, [x10, #-119]!             // STRB <Wt>, [<Xn|SP>, #<simm>]!  \\ Store, immed pre-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  2      1    1     2.00     -    STRBBui                        V1UnitD, V1UnitL, V1UnitL01,                      strb	w12, [x6]                      // STRB <Wt>, [<Xn|SP>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRBBui                        V1UnitD, V1UnitL, V1UnitL01,                      strb	w5, [x7, #1153]                // STRB <Wt>, [<Xn|SP>, #<pimm>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRBBroW                       V1UnitD, V1UnitL, V1UnitL01,                      strb	w4, [x9, w14, uxtw]            // STRB <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRBBroW                       V1UnitD, V1UnitL, V1UnitL01,                      strb	w25, [x26, w22, sxtw]          // STRB <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRBBroX                       V1UnitD, V1UnitL, V1UnitL01,                      strb	w9, [x2, x21, sxtx]            // STRB <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRBBroX                       V1UnitD, V1UnitL, V1UnitL01,                      strb	w17, [x10, x14]                // STRB <Wt>, [<Xn|SP>, <Xm>]  \\ Store register, register offset, basic  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  3      1    1     2.00     -    STRHHpost                      V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             strh	w28, [x2], #49                 // STRH <Wt>, [<Xn|SP>], #<simm>  \\ Store, immed post-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  3      1    1     2.00     -    STRHHpre                       V1UnitD, V1UnitI, V1UnitL, V1UnitL01,             strh	w27, [x24, #-209]!             // STRH <Wt>, [<Xn|SP>, #<simm>]!  \\ Store, immed pre-indexed  \\ 3 1  1  2.0 V1UnitL01,V1UnitD,V1UnitI
# CHECK-NEXT:  2      1    1     2.00     -    STRHHui                        V1UnitD, V1UnitL, V1UnitL01,                      strh	w11, [x25]                     // STRH <Wt>, [<Xn|SP>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRHHui                        V1UnitD, V1UnitL, V1UnitL01,                      strh	w6, [x22, #7980]               // STRH <Wt>, [<Xn|SP>, #<pimm>]  \\ Store, immed offset  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRHHroX                       V1UnitD, V1UnitL, V1UnitL01,                      strh	w27, [x4, x10]                 // STRH <Wt>, [<Xn|SP>, <Xm>]  \\ Store register, register offset, basic  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRHHroW                       V1UnitD, V1UnitL, V1UnitL01,                      strh	w15, [x17, w18, uxtw]          // STRH <Wt>, [<Xn|SP>, <Wm>, UXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRHHroW                       V1UnitD, V1UnitL, V1UnitL01,                      strh	w26, [x28, w27, sxtw]          // STRH <Wt>, [<Xn|SP>, <Wm>, SXTW]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRHHroX                       V1UnitD, V1UnitL, V1UnitL01,                      strh	w18, [x13, x23, sxtx]          // STRH <Wt>, [<Xn|SP>, <Xm>, SXTX]  \\ Store register, register offset, extend  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRHHroW                       V1UnitD, V1UnitL, V1UnitL01,                      strh	w29, [x30, w2, uxtw #1]        // STRH <Wt>, [<Xn|SP>, <Wm>, UXTW #1]  \\ Store register, register offset, extend, scale by 1  \\ 2 1  1  2.00 V1UnitI,V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRHHroW                       V1UnitD, V1UnitL, V1UnitL01,                      strh	w20, [x24, w14, sxtw #1]       // STRH <Wt>, [<Xn|SP>, <Wm>, SXTW #1]  \\ Store register, register offset, extend, scale by 1  \\ 2 1  1  2.00 V1UnitI,V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRHHroX                       V1UnitD, V1UnitL, V1UnitL01,                      strh	w30, [x7, x27, sxtx #1]        // STRH <Wt>, [<Xn|SP>, <Xm>, SXTX #1]  \\ Store register, register offset, extend, scale by 1  \\ 2 1  1  2.00 V1UnitI,V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STRHHroX                       V1UnitD, V1UnitL, V1UnitL01,                      strh	w1, [x29, x13, lsl #1]         // STRH <Wt>, [<Xn|SP>, <Xm>, LSL #1]  \\ Store register, register offset, scaled by 1  \\ 2 1  1  2.00 V1UnitI,V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STTRWi                         V1UnitD, V1UnitL, V1UnitL01,                      sttr	w23, [x15]                     // STTR <Wt>, [<Xn|SP>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STTRWi                         V1UnitD, V1UnitL, V1UnitL01,                      sttr	w20, [x3, #50]                 // STTR <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STTRXi                         V1UnitD, V1UnitL, V1UnitL01,                      sttr	x1, [x23]                      // STTR <Xt>, [<Xn|SP>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STTRXi                         V1UnitD, V1UnitL, V1UnitL01,                      sttr	x3, [x21, #37]                 // STTR <Xt>, [<Xn|SP>, #<simm>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STTRBi                         V1UnitD, V1UnitL, V1UnitL01,                      sttrb	w12, [x20]                     // STTRB <Wt>, [<Xn|SP>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STTRBi                         V1UnitD, V1UnitL, V1UnitL01,                      sttrb	w13, [x9, #148]                // STTRB <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STTRHi                         V1UnitD, V1UnitL, V1UnitL01,                      sttrh	w13, [x19]                     // STTRH <Wt>, [<Xn|SP>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STTRHi                         V1UnitD, V1UnitL, V1UnitL01,                      sttrh	w12, [x0, #200]                // STTRH <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, immed unprivileged  \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      2    2     2.00     -    STURBi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	b8, [x14]                      // STUR <Bt>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STURBi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	b29, [x14, #-158]              // STUR <Bt>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STURHi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	h24, [x15]                     // STUR <Ht>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STURHi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	h9, [x28, #-81]                // STUR <Ht>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STURSi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	s12, [x16]                     // STUR <St>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STURSi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	s24, [x18, #-95]               // STUR <St>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STURDi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	d13, [x22]                     // STUR <Dt>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STURDi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	d23, [x0, #8]                  // STUR <Dt>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, B/H/S/D-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STURQi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	q14, [x3]                      // STUR <Qt>, [<Xn|SP>]  \\ Store vector reg, unscaled immed, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      2    2     2.00     -    STURQi                         V1UnitL, V1UnitL01, V1UnitV, V1UnitV01,           stur	q22, [x15, #-178]              // STUR <Qt>, [<Xn|SP>, #<simm>]  \\ Store vector reg, unscaled immed, Q-form  \\ 2 2  2  2.0 V1UnitL01,V1UnitV01
# CHECK-NEXT:  2      1    1     2.00     -    STURWi                         V1UnitD, V1UnitL, V1UnitL01,                      stur	w21, [x17]                     // STUR <Wt>, [<Xn|SP>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STURWi                         V1UnitD, V1UnitL, V1UnitL01,                      stur	w25, [x24, #-232]              // STUR <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STURXi                         V1UnitD, V1UnitL, V1UnitL01,                      stur	x17, [x20]                     // STUR <Xt>, [<Xn|SP>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STURXi                         V1UnitD, V1UnitL, V1UnitL01,                      stur	x11, [x16, #176]               // STUR <Xt>, [<Xn|SP>, #<simm>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STURBBi                        V1UnitD, V1UnitL, V1UnitL01,                      sturb	w27, [x21]                     // STURB <Wt>, [<Xn|SP>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STURBBi                        V1UnitD, V1UnitL, V1UnitL01,                      sturb	w25, [x25, #-88]               // STURB <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STURHHi                        V1UnitD, V1UnitL, V1UnitL01,                      sturh	w13, [x20]                     // STURH <Wt>, [<Xn|SP>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  2      1    1     2.00     -    STURHHi                        V1UnitD, V1UnitL, V1UnitL01,                      sturh	w3, [x8, #-34]                 // STURH <Wt>, [<Xn|SP>, #<simm>]  \\ Store register, unscaled immed   \\ 2 1  1  2.0 V1UnitL01,V1UnitD
# CHECK-NEXT:  3      5    5     1.50     SE   STXPW                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxp	w17, w30, w26, [x22]           // STXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXPW                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxp	w17, w21, w1, [x3]             // STXP <Ws>, <Wt1>, <Wt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXPX                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxp	w10, x14, x26, [x5]            // STXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXPX                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxp	w17, x23, x29, [x30]           // STXP <Ws>, <Xt1>, <Xt2>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXRW                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxr	w10, w26, [x27]                // STXR <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXRW                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxr	w11, w1, [x21]                 // STXR <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXRX                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxr	w28, x29, [x11]                // STXR <Ws>, <Xt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXRX                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxr	w17, x20, [x25]                // STXR <Ws>, <Xt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXRB                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxrb	w30, w12, [x16]                // STXRB <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXRB                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxrb	w19, w15, [x30]                // STXRB <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXRH                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxrh	w20, w18, [x19]                // STXRH <Ws>, <Wt>, [<Xn|SP>]  \\ No description \\ No scheduling info
# CHECK-NEXT:  3      5    5     1.50     SE   STXRH                          V1UnitD, V1UnitL[2], V1UnitL01,                   stxrh	w3, w23, [x27]                 // STXRH <Ws>, <Wt>, [<Xn|SP>, #0]  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     2.00     -    SUBWrx                         V1UnitI, V1UnitM,                                 sub	w21, wsp, w27                  // SUB <Wd>, <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.00 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUBWrx                         V1UnitI, V1UnitM,                                 sub	w20, wsp, w23, sxth            // SUB <Wd>, <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.00 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUBWrx                         V1UnitI, V1UnitM,                                 sub	w27, wsp, w8, uxth #4          // SUB <Wd>, <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, no flagset  \\ 1 2  2  2.00 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUBWrx                         V1UnitI, V1UnitM,                                 sub	w9, wsp, w2, lsl #2            // SUB <Wd>, <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, no flagset   \\ 1 2  2  2.00 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SUBXrs                         V1UnitI,                                          sub	x8, x2, x25                    // SUB <Xd>, <Xn|SP>, X<m>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUBXrx                         V1UnitI, V1UnitM,                                 sub	x18, x24, w28, uxtb            // SUB <Xd>, <Xn|SP>, <R><m>, <extend>  \\ ALU, basic  \\ 1 2  2  2.00 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUBXrx                         V1UnitI, V1UnitM,                                 sub	x10, x10, w29, uxtb #3         // SUB <Xd>, <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     4.00     -    SUBXrs                         V1UnitI,                                          sub	x7, x1, x18, lsl #1            // SUB <Xd>, <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SUBWri                         V1UnitI,                                          sub	wsp, wsp, #37                  // SUB <Wd|WSP>, <Wn|WSP>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SUBWri                         V1UnitI,                                          sub	wsp, wsp, #176                 // SUB <Wd|WSP>, <Wn|WSP>, #<imm>, <shift>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SUBXri                         V1UnitI,                                          sub	x11, x16, #171                 // SUB <Xd|SP>, <Xn|SP>, #<imm>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SUBXri                         V1UnitI,                                          sub	x26, x23, #227, lsl #12        // SUB <Xd|SP>, <Xn|SP>, #<imm>, <shift>  \\ ALU, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUB_ZI_B                       V1UnitV, V1UnitV01,                               sub	z23.b, z23.b, #193             // SUB <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SUB_ZI_H                       V1UnitV, V1UnitV01,                               sub	z16.h, z16.h, #115             // SUB <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SUB_ZI_H                       V1UnitV, V1UnitV01,                               sub	z2.h, z2.h, #46592             // SUB <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    SUBWrs                         V1UnitI,                                          sub	w1, w2, w11, lsl #3            // SUB <Wd>, <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, no flagset   \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUBWrs                         V1UnitI, V1UnitM,                                 sub	w6, w25, w18, lsl #9           // SUB <Wd>, <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBWrs                         V1UnitI, V1UnitM,                                 sub	w23, w8, w26, asr #21          // SUB <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     4.00     -    SUBXrs                         V1UnitI,                                          sub	x25, x2, x28, lsl #3           // SUB <Xd>, <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, LSL shift, shift <= 4  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SUBXrs                         V1UnitI, V1UnitM,                                 sub	x10, x22, x12, lsl #63         // SUB <Xd>, <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBXrs                         V1UnitI, V1UnitM,                                 sub	x27, x10, x13, lsr #60         // SUB <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     4.00     -    SUBv1i64                       V1UnitV,                                          sub	d4, d17, d3                    // SUB <V><d>, <V><n>, <V><m>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SUBv16i8                       V1UnitV,                                          sub	v24.16b, v15.16b, v13.16b      // SUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    SUB_ZPmZ_S                     V1UnitV, V1UnitV01,                               sub	z15.s, p6/m, z15.s, z17.s      // SUB <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SUB_ZZZ_D                      V1UnitV, V1UnitV01,                               sub	z27.d, z24.d, z20.d            // SUB <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    SUBHNv2i64_v2i32               V1UnitV,                                          subhn	v5.2s, v8.2d, v20.2d           // SUBHN <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SUBHNv2i64_v4i32               V1UnitV,                                          subhn2	v6.4s, v29.2d, v16.2d          // SUBHN2 <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    SUBR_ZI_B                      V1UnitV, V1UnitV01,                               subr	z16.b, z16.b, #149             // SUBR <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SUBR_ZI_S                      V1UnitV, V1UnitV01,                               subr	z28.s, z28.s, #30              // SUBR <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SUBR_ZI_S                      V1UnitV, V1UnitV01,                               subr	z5.s, z5.s, #11008             // SUBR <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SUBR_ZPmZ_B                    V1UnitV, V1UnitV01,                               subr	z25.b, p3/m, z25.b, z4.b       // SUBR <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      subs	w10, wsp, w20                  // SUBS <Wd>, <Wn|WSP>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      subs	w20, wsp, w16, sxth            // SUBS <Wd>, <Wn|WSP>, <Wm>, <wextend>   \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      subs	w21, wsp, w26, uxth #4         // SUBS <Wd>, <Wn|WSP>, <Wm>, <wextend> #<amount>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrx                        V1UnitFlg, V1UnitI, V1UnitM,                      subs	w20, wsp, w6, lsl #1           // SUBS <Wd>, <Wn|WSP>, <Wm>, LSL #<amount>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrs                        V1UnitFlg, V1UnitI,                               subs	x3, x4, x16                    // SUBS <Xd>, <Xn|SP>, X<m>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrx                        V1UnitFlg, V1UnitI,                               subs	x14, x23, w23, uxtb            // SUBS <Xd>, <Xn|SP>, <R><m>, <extend>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrx                        V1UnitFlg, V1UnitI,                               subs	x19, x28, w24, uxtb #1         // SUBS <Xd>, <Xn|SP>, <R><m>, <extend> #<amount>  \\ ALU, extend and shift  \\ 1 1  1  3.00 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrs                        V1UnitFlg, V1UnitI,                               subs	x7, x5, x1, lsl #2             // SUBS <Xd>, <Xn|SP>, X<m>, LSL #<amount>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSWri                        V1UnitFlg, V1UnitI,                               subs	w8, wsp, #13                   // SUBS <Wd>, <Wn|WSP>, #<imm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSWri                        V1UnitFlg, V1UnitI,                               subs	w4, wsp, #233, lsl #12         // SUBS <Wd>, <Wn|WSP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 1  1  3.00 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXri                        V1UnitFlg, V1UnitI,                               subs	x19, x3, #5                    // SUBS <Xd>, <Xn|SP>, #<imm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXri                        V1UnitFlg, V1UnitI,                               subs	x12, x27, #254, lsl #12        // SUBS <Xd>, <Xn|SP>, #<imm>, <shift>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 1  1  3.00 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    SUBSWrs                        V1UnitFlg, V1UnitI,                               subs	w2, w8, w28                    // SUBS <Wd>, <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSWrs                        V1UnitFlg, V1UnitI,                               subs	w8, w29, w4                    // SUBS <Wd>, <Wn>, <Wm>, LSL #<wamountl>  \\ Arithmetic, LSL shift by immed, shift <= 4, unconditional, flagset   \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      subs	w9, w27, w24, lsl #25          // SUBS <Wd>, <Wn>, <Wm>, LSL #<wamounth>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      subs	w28, w4, w10, lsr #3           // SUBS <Wd>, <Wn>, <Wm>, <shift> #<wamount>  \\ Arithmetic, LSR/ASR/ROR shift by immed or LSL shift by immed > 4, unconditional  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrs                        V1UnitFlg, V1UnitI,                               subs	x30, x3, x15                   // SUBS <Xd>, <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    SUBSXrs                        V1UnitFlg, V1UnitI,                               subs	x29, x25, x12, lsl #3          // SUBS <Xd>, <Xn>, <Xm>, LSL #<amountl>  \\ Arithmetic, flagset, LSL shift, shift <= 4  \\ 1 1   1   3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    SUBSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      subs	x20, x19, x12, lsl #8          // SUBS <Xd>, <Xn>, <Xm>, LSL #<amounth>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    SUBSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      subs	x28, x26, x0, lsr #15          // SUBS <Xd>, <Xn>, <Xm>, <shift> #<amount>  \\ Arithmetic, LSR/ASR/ROR shift or LSL shift > 4  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      3    1     4.00     -    SUDOTlanev8i8                  V1UnitV,                                          sudot	v10.2s, v6.8b, v30.4b[2]       // SUDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.4B[<index>]  \\ ASIMD dot product using signed and unsigned integers  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      3    1     4.00     -    SUDOT_ZZZI                     V1UnitV,                                          sudot	z24.s, z27.b, z1.b[2]          // SUDOT <Zda>.S, <Zn>.B, <Zm>.B[<imm>]  \\ Dot product, 8 bit, using signed and unsigned integers  \\ 1 3  1  4.00 V1UnitV[2]
# CHECK-NEXT:  1      2    2     2.00     -    SUNPKHI_ZZ_D                   V1UnitV, V1UnitV01,                               sunpkhi	z26.d, z29.s           // SUNPKHI <Zd>.<T>, <Zn>.<Tb>  \\ Unpack and extend  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    SUNPKLO_ZZ_D                   V1UnitV, V1UnitV01,                               sunpklo	z17.d, z27.s           // SUNPKLO <Zd>.<T>, <Zn>.<Tb>  \\ Unpack and extend  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    SUQADDv1i64                    V1UnitV,                                          suqadd	d3, d25                        // SUQADD <V><d>, <V><n>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    SUQADDv8i16                    V1UnitV,                                          suqadd	v24.8h, v6.8h                  // SUQADD <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     15.00    SE   SVC                                                                              svc	#0x178e                        // SVC #<imm>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    SBFMWri                        V1UnitI,                                          sxtb	w9, w0                         // SXTB <Wd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SBFMXri                        V1UnitI,                                          sxtb	x13, w15                       // SXTB <Xd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     1.00     -    SXTB_ZPmZ_H                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          sxtb	z1.h, p1/m, z27.h              // SXTB <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    SXTH_ZPmZ_D                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          sxth	z30.d, p5/m, z29.d             // SXTH <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    SXTW_ZPmZ_D                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          sxtw	z1.d, p2/m, z24.d              // SXTW <Zd>.D, <Pg>/M, <Zn>.D  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      1    1     4.00     -    SBFMWri                        V1UnitI,                                          sxth	w10, w24                       // SXTH <Wd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    SBFMXri                        V1UnitI,                                          sxth	x19, w0                        // SXTH <Xd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    SSHLLv4i16_shift               V1UnitV, V1UnitV13,                               sshll	v15.4s, v2.4h, #0              // SXTL <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    SSHLLv4i32_shift               V1UnitV, V1UnitV13,                               sshll2	v10.2d, v5.4s, #0              // SXTL2 <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      1    1     4.00     -    SBFMXri                        V1UnitI,                                          sxtw	x12, w16                       // SXTW <Xd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     15.00    SE   SYSxt                                                                            sys	#2, c6, c9, #3                 // SYS #<op1>, <Cn>, <Cm>, #<op2> \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   SYSxt                                                                            sys	#6, c9, c2, #6, x13            // SYS #<op1>, <Cn>, <Cm>, #<op2>, <Xt>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   SYSLxt                                                                           sysl	x13, #1, c0, c7, #4            // SYSL <Xt>, #<op1>, <Cn>, <Cm>, #<op2>  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      2    2     1.00     -    TBLv8i8Two                     V1UnitV[2], V1UnitV01[2],                         tbl	v18.8b, { v13.16b, v14.16b }, v26.8b  // TBL <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup, 1 or 2 table regs  \\ 2 2  2  1.00 V1UnitV01
# CHECK-NEXT:  2      4    4     1.00     -    TBLv8i8Three                   V1UnitV[2], V1UnitV01[2],                         tbl	v0.8b, { v14.16b, v15.16b, v16.16b }, v21.8b  // TBL <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup, 3 table regs  \\ 2 4  4  1.00 V1UnitV01[2]
# CHECK-NEXT:  3      4    4     0.67     -    TBLv16i8Four                   V1UnitV[3], V1UnitV01[3],                         tbl	v21.16b, { v14.16b, v15.16b, v16.16b, v17.16b }, v27.16b  // TBL <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B, <Vn+3>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup, 4 table regs  \\ 3 4  4  0.67 V1UnitV01[3]
# CHECK-NEXT:  2      2    2     1.00     -    TBLv8i8One                     V1UnitV[2], V1UnitV01[2],                         tbl	v8.8b, { v9.16b }, v26.8b      // TBL <Vd>.<Ta>, { <Vn>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup, 1 or 2 table regs  \\ 2 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      1    1     2.00     -    TBNZW                          V1UnitB,                                          tbnz	w21, #17, test                 // TBNZ W<t>, #<imms>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    TBNZW                          V1UnitB,                                          tbnz	w25, #16, test                 // TBNZ X<t>, #<immd>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  2      4    4     1.00     -    TBXv16i8Two                    V1UnitV[2], V1UnitV01[2],                         tbx	v3.16b, { v8.16b, v9.16b }, v21.16b  // TBX <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup extension, 2 table reg  \\ 2 4  4  1.00 V1UnitV01[2]
# CHECK-NEXT:  3      6    6     0.67     -    TBXv16i8Three                  V1UnitV[3], V1UnitV01[3],                         tbx	v3.16b, { v0.16b, v1.16b, v2.16b }, v9.16b  // TBX <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup extension, 3 table reg  \\ 3 6  6  0.67 V1UnitV01[3]
# CHECK-NEXT:  5      6    6     0.40     -    TBXv16i8Four                   V1UnitV[5], V1UnitV01[5],                         tbx	v12.16b, { v8.16b, v9.16b, v10.16b, v11.16b }, v10.16b  // TBX <Vd>.<Ta>, { <Vn>.16B, <Vn+1>.16B, <Vn+2>.16B, <Vn+3>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup extension, 4 table reg  \\ 5 6  6  0.40 V1UnitV01[6]
# CHECK-NEXT:  2      2    2     1.00     -    TBXv16i8One                    V1UnitV[2], V1UnitV01[2],                         tbx	v21.16b, { v5.16b }, v17.16b   // TBX <Vd>.<Ta>, { <Vn>.16B }, <Vm>.<Ta>  \\ ASIMD table lookup extension, 1 table reg  \\ 2 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      1    1     2.00     -    TBZW                           V1UnitB,                                          tbz	w0, #21, test                  // TBZ W<t>, #<imms>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     2.00     -    TBZX                           V1UnitB,                                          tbz	x17, #49, test                 // TBZ X<t>, #<immd>, <label>  \\ Compare and branch  \\ 1 1  1  2.0 V1UnitB
# CHECK-NEXT:  1      1    1     15.00    SE   SYSxt                                                                            tlbi	alle2                          // TLBI <tlbi_op> \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   SYSxt                                                                            tlbi	vae2is, x1                     // TLBI <tlbi_op2>, <Xt> \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     4.00     -    TRN1v2i32                      V1UnitV,                                          trn1	v28.2s, v15.2s, v25.2s         // TRN1 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD transpose  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    TRN1_PPP_B                     V1UnitI, V1UnitM, V1UnitM0,                       trn1	p0.b, p4.b, p6.b               // TRN1 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate transpose  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    TRN2_PPP_D                     V1UnitI, V1UnitM, V1UnitM0,                       trn2	p7.d, p0.d, p5.d               // TRN2 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate transpose  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     4.00     -    TRN2v2i32                      V1UnitV,                                          trn2	v9.2s, v5.2s, v2.2s            // TRN2 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD transpose  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     3.00     -    ANDSWri                        V1UnitFlg, V1UnitI,                               tst	w24, #0xe00                    // TST <Wn>, #<imms>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      1    1     3.00     -    ANDSXri                        V1UnitFlg, V1UnitI,                               tst	x14, #0x1e00                   // TST <Xn>, #<immd>  \\ ALU, basic, unconditional, flagset  \\ 1 1  1  3.0 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ANDSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      tst	w28, w30                       // TST <Wn>, <Wm>  \\ ALU, basic, unconditional, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ANDSWrs                        V1UnitFlg, V1UnitI, V1UnitM,                      tst	w22, w8, lsl #20               // TST <Wn>, <Wm>, <shift> #<wamount>  \\ Test/Compare, shift by immed  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    ANDSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      tst	x29, x8                        // TST <Xn>, <Xm>  \\ ALU, basic, flagset  \\ 1 2  2  2.00 V1UnitJ
# CHECK-NEXT:  1      2    2     2.00     -    ANDSXrs                        V1UnitFlg, V1UnitI, V1UnitM,                      tst	x11, x6, lsr #1                // TST <Xn>, <Xm>, <shift> #<amount>  \\ Logical, shift, flagset  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      4    1     2.00     -    UABAv4i16                      V1UnitV, V1UnitV13,                               uaba	v28.4h, v27.4h, v17.4h         // UABA <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD absolute diff accum  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    UABALv8i8_v8i16                V1UnitV, V1UnitV13,                               uabal	v6.8h, v24.8b, v27.8b          // UABAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff accum long  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    UABALv4i32_v2i64               V1UnitV, V1UnitV13,                               uabal2	v28.2d, v15.4s, v17.4s         // UABAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff accum long  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    UABDv8i16                      V1UnitV,                                          uabd	v6.8h, v4.8h, v15.8h           // UABD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD absolute diff  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    UABD_ZPmZ_B                    V1UnitV, V1UnitV01,                               uabd	z12.b, p4/m, z12.b, z4.b       // UABD <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    UABDLv2i32_v2i64               V1UnitV,                                          uabdl	v21.2d, v0.2s, v21.2s          // UABDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff long  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UABDLv8i16_v4i32               V1UnitV,                                          uabdl2	v23.4s, v2.8h, v30.8h          // UABDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD absolute diff long  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      4    1     2.00     -    UADALPv8i8_v4i16               V1UnitV, V1UnitV13,                               uadalp	v28.4h, v12.8b                 // UADALP <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD pairwise add and accumulate long  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    UADDLv4i16_v4i32               V1UnitV,                                          uaddl	v22.4s, v18.4h, v9.4h          // UADDL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UADDLv4i32_v2i64               V1UnitV,                                          uaddl2	v28.2d, v16.4s, v6.4s          // UADDL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UADDLPv2i32_v1i64              V1UnitV,                                          uaddlp	v11.1d, v23.2s                 // UADDLP <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD arith, pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    UADDLVv8i8v                    V1UnitV[2], V1UnitV13,                            uaddlv	h5, v14.8b                     // UADDLV H<d>, <Vn>.8B  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  2      4    4     1.00     -    UADDLVv16i8v                   V1UnitV[2], V1UnitV13[2],                         uaddlv	h4, v16.16b                    // UADDLV H<d>, <Vn>.16B  \\ ASIMD arith, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
# CHECK-NEXT:  1      2    2     2.00     -    UADDLVv4i16v                   V1UnitV, V1UnitV13,                               uaddlv	s13, v18.4h                    // UADDLV S<d>, <Vn>.4H  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  2      4    4     2.00     -    UADDLVv8i16v                   V1UnitV[2], V1UnitV13,                            uaddlv	s9, v17.8h                     // UADDLV S<d>, <Vn>.8H  \\ ASIMD arith, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    UADDLVv4i32v                   V1UnitV, V1UnitV13,                               uaddlv	d20, v1.4s                     // UADDLV D<d>, <Vn>.4S  \\ ASIMD arith, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  5      14   14    0.50     -    UADDV_VPZ_B                    V1UnitV[5], V1UnitV0, V1UnitV1[2], V1UnitV01[3], V1UnitV02, V1UnitV13[3],   uaddv	d8, p7, z12.b  // UADDV <Dd>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      12   12    0.50     -    UADDV_VPZ_H                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   uaddv	d19, p6, z4.h          // UADDV <Dd>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      10   10    0.50     -    UADDV_VPZ_S                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   uaddv	d29, p3, z2.s          // UADDV <Dd>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
# CHECK-NEXT:  2      8    8     2.00     -    UADDV_VPZ_D                    V1UnitV[2], V1UnitV01,                            uaddv	d24, p0, z21.d                 // UADDV <Dd>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
# CHECK-NEXT:  1      2    2     4.00     -    UADDWv4i16_v4i32               V1UnitV,                                          uaddw	v19.4s, v3.4s, v2.4h           // UADDW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UADDWv8i16_v4i32               V1UnitV,                                          uaddw2	v20.4s, v13.4s, v21.8h         // UADDW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     4.00     -    UBFMWri                        V1UnitI,                                          ubfiz	w8, w19, #27, #3               // UBFIZ <Wd>, <Wn>, #<lsbs>, #<widths>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    UBFMXri                        V1UnitI,                                          ubfiz	x12, x27, #26, #6              // UBFIZ <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     4.00     -    UBFMWri                        V1UnitI,                                          ubfiz	w29, w26, #20, #5              // UBFM <Wd>, <Wn>, #<immrs>, #<immss>  \\ Bitfield move, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    UBFMXri                        V1UnitI,                                          ubfiz	x29, x20, #51, #5              // UBFM <Xd>, <Xn>, #<immrd>, #<immsd>  \\ Bitfield move, basic  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    UBFMWri                        V1UnitI,                                          ubfx	w29, w20, #12, #14             // UBFX <Wd>, <Wn>, #<lsbs>, #<widths>  \\ Bit field extract  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      1    1     4.00     -    UBFMXri                        V1UnitI,                                          ubfx	x23, x25, #18, #41             // UBFX <Xd>, <Xn>, #<lsbd>, #<widthd>  \\ Bit field extract  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFSWHri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	h3, w16, #32                   // UCVTF <Hd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFSWSri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	s10, w16, #29                  // UCVTF <Sd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFSWDri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	d15, w0, #28                   // UCVTF <Dd>, <Wn>, #<sfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFSXHri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	h14, x4, #18                   // UCVTF <Hd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFSXSri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	s7, x9, #43                    // UCVTF <Sd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFSXDri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	d7, x24, #10                   // UCVTF <Dd>, <Xn>, #<dfbits>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFUWHri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	h14, w18                       // UCVTF <Hd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFUWSri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	s22, w16                       // UCVTF <Sd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFUWDri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	d14, w26                       // UCVTF <Dd>, <Wn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFUXHri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	h23, x16                       // UCVTF <Hd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFUXSri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	s4, x26                        // UCVTF <Sd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTFUXDri                     V1UnitI, V1UnitM, V1UnitM0,                       ucvtf	d28, x21                       // UCVTF <Dd>, <Xn>  \\ FP convert, from gen to vec reg  \\ 1 3  3  1.0 V1UnitM0
# CHECK-NEXT:  4      6    6     1.00     -    UCVTFh                         V1UnitV[2], V1UnitV02[2],                         ucvtf	h29, h1, #7                    // UCVTF H<d>, H<n>, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
# CHECK-NEXT:  2      4    4     1.00     -    UCVTFs                         V1UnitV[2], V1UnitV02[2],                         ucvtf	s23, s2, #28                   // UCVTF S<d>, S<n>, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    UCVTFd                         V1UnitV, V1UnitV02,                               ucvtf	d10, d25, #27                  // UCVTF D<d>, D<n>, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    UCVTFv4i16_shift               V1UnitV[2], V1UnitV02[2],                         ucvtf	v3.4h, v14.4h, #15             // UCVTF <Vd>.4H, <Vn>.4H, #<hfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    UCVTFv8i16_shift               V1UnitV[2], V1UnitV02[2],                         ucvtf	v22.8h, v29.8h, #7             // UCVTF <Vd>.8H, <Vn>.8H, #<hfbits>  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    UCVTFv2i32_shift               V1UnitV, V1UnitV02,                               ucvtf	v4.2s, v27.2s, #6              // UCVTF <Vd>.2S, <Vn>.2S, #<sfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    UCVTFv4i32_shift               V1UnitV[2], V1UnitV02[2],                         ucvtf	v21.4s, v17.4s, #14            // UCVTF <Vd>.4S, <Vn>.4S, #<sfbits>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    UCVTFv2i64_shift               V1UnitV, V1UnitV02,                               ucvtf	v6.2d, v17.2d, #63             // UCVTF <Vd>.2D, <Vn>.2D, #<dfbits>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  4      6    6     1.00     -    UCVTFv1i16                     V1UnitV[2], V1UnitV02[2],                         ucvtf	h28, h1                        // UCVTF <Hd>, <Hn>  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 4 6  6  1.00 V1UnitV02[2]
# CHECK-NEXT:  2      4    4     1.00     -    UCVTFv1i32                     V1UnitV[2], V1UnitV02[2],                         ucvtf	s30, s15                       // UCVTF S<d>, S<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 2 4  4  1.00 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    UCVTFv1i64                     V1UnitV, V1UnitV02,                               ucvtf	d7, d6                         // UCVTF D<d>, D<n>  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    UCVTFv4f16                     V1UnitV[2], V1UnitV02[2],                         ucvtf	v17.4h, v11.4h                 // UCVTF <Vd>.4H, <Vn>.4H  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  4      6    6     1.00     -    UCVTFv8f16                     V1UnitV[2], V1UnitV02[2],                         ucvtf	v17.8h, v28.8h                 // UCVTF <Vd>.8H, <Vn>.8H  \\ ASIMD FP convert, other, Q-form F16  \\ 4 6  6  1.00 V1UnitV02[4]
# CHECK-NEXT:  1      3    3     2.00     -    UCVTFv2f32                     V1UnitV, V1UnitV02,                               ucvtf	v9.2s, v8.2s                   // UCVTF <Vd>.2S, <Vn>.2S  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  2      4    4     1.00     -    UCVTFv4f32                     V1UnitV[2], V1UnitV02[2],                         ucvtf	v9.4s, v17.4s                  // UCVTF <Vd>.4S, <Vn>.4S  \\ ASIMD FP convert, other, D-form F16 and Q-form F32  \\ 2 4  4  1.00 V1UnitV02[2]
# CHECK-NEXT:  1      3    3     2.00     -    UCVTFv2f64                     V1UnitV, V1UnitV02,                               ucvtf	v19.2d, v1.2d                  // UCVTF <Vd>.2D, <Vn>.2D  \\ ASIMD FP convert, other, D-form F32 and Q-form F64  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  4      6    6     0.25     -    UCVTF_ZPmZ_HtoH                V1UnitV[4], V1UnitV0[4], V1UnitV01[4], V1UnitV02[4],   ucvtf	z26.h, p3/m, z26.h     // UCVTF <Zd>.H, <Pg>/M, <Zn>.H  \\ Convert to floating point, 16b to half  \\ 4 6  6  0.25 V1UnitV0[4]
# CHECK-NEXT:  2      4    4     0.50     -    UCVTF_ZPmZ_StoH                V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   ucvtf	z28.h, p4/m, z6.s      // UCVTF <Zd>.H, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 2 4  4  0.50 V1UnitV0[2]
# CHECK-NEXT:  2      4    4     0.50     -    UCVTF_ZPmZ_StoS                V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   ucvtf	z4.s, p3/m, z5.s       // UCVTF <Zd>.S, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 2 4  4  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    UCVTF_ZPmZ_StoD                V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          ucvtf	z1.d, p4/m, z1.s               // UCVTF <Zd>.D, <Pg>/M, <Zn>.S  \\ Convert to floating point, 32b to single or half   \\ 1 3  3  1.00 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     1.00     -    UCVTF_ZPmZ_DtoH                V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          ucvtf	z4.h, p4/m, z28.d              // UCVTF <Zd>.H, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTF_ZPmZ_DtoS                V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          ucvtf	z18.s, p1/m, z28.d             // UCVTF <Zd>.S, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      3    3     1.00     -    UCVTF_ZPmZ_DtoD                V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          ucvtf	z6.d, p2/m, z12.d              // UCVTF <Zd>.D, <Pg>/M, <Zn>.D  \\ Convert to floating point, 64b to float or convert to double  \\ 1 3  3  1.0 V1UnitV0
# CHECK-NEXT:  1      12   12    0.20     -    UDIVWr                         V1UnitI[5], V1UnitM[5], V1UnitM0[5],              udiv	w14, w22, w26                  // UDIV <Wd>, <Wn>, <Wm>  \\ Divide, W-form  \\ 1 12  12  0.20 V1UnitM0[13]
# CHECK-NEXT:  1      20   20    0.20     -    UDIVXr                         V1UnitI[5], V1UnitM[5], V1UnitM0[5],              udiv	x21, x6, x30                   // UDIV <Xd>, <Xn>, <Xm>  \\ Divide, X-form  \\ 1 20  20  0.20 V1UnitM0[21]
# CHECK-NEXT:  1      12   12    0.14     -    UDIV_ZPmZ_S                    V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   udiv	z7.s, p3/m, z7.s, z22.s  // UDIV <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Divides, 32 bit   \\ 1 12  12  0.14 V1UnitV0[12]
# CHECK-NEXT:  1      20   20    0.14     -    UDIV_ZPmZ_D                    V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   udiv	z11.d, p6/m, z11.d, z21.d  // UDIV <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Divides, 64 bit  \\ 1 20  20  0.14 V1UnitV0[21]
# CHECK-NEXT:  1      12   12    0.14     -    UDIVR_ZPmZ_S                   V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   udivr	z23.s, p1/m, z23.s, z27.s  // UDIVR <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Divides, 32 bit   \\ 1 12  12  0.14 V1UnitV0[12]
# CHECK-NEXT:  1      20   20    0.14     -    UDIVR_ZPmZ_D                   V1UnitV[7], V1UnitV0[7], V1UnitV01[7], V1UnitV02[7],   udivr	z7.d, p7/m, z7.d, z31.d  // UDIVR <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Divides, 64 bit  \\ 1 20  20  0.14 V1UnitV0[21]
# CHECK-NEXT:  1      3    1     2.00     -    UDOT_ZZZI_S                    V1UnitV, V1UnitV01,                               udot	z15.s, z14.b, z3.b[3]          // UDOT <Zda>.S, <Zn>.B, <Zms>.B[<imms>]  \\ Dot product, 8 bit  \\ 1 3 1 2.0 V1UnitV01
# CHECK-NEXT:  1      4    1     1.00     -    UDOT_ZZZI_D                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          udot	z2.d, z29.h, z6.h[0]           // UDOT <Zda>.D, <Zn>.H, <Zmd>.H[<immd>]  \\ Dot product, 16 bit  \\ 1 4 1 1.0 V1UnitV0
# CHECK-NEXT:  1      3    1     2.00     -    UDOT_ZZZ_S                     V1UnitV, V1UnitV01,                               udot	z20.s, z8.b, z9.b              // UDOT <Zda>.<T>, <Zn>.<Tb>, <Zm>.<Tb>  \\ Dot product, 8 bit  \\ 1 3 1 2.0 V1UnitV01
# CHECK-NEXT:  1      3    1     4.00     -    UDOTlanev8i8                   V1UnitV,                                          udot	v13.2s, v20.8b, v8.4b[3]       // UDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.4B[<index>]  \\ ASIMD dot product  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      3    1     4.00     -    UDOTv16i8                      V1UnitV,                                          udot	v18.4s, v18.16b, v12.16b       // UDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD dot product  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UHADDv4i16                     V1UnitV,                                          uhadd	v21.4h, v31.4h, v9.4h          // UHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UHSUBv16i8                     V1UnitV,                                          uhsub	v10.16b, v11.16b, v24.16b      // UHSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    1     1.00     -    UMADDLrrr                      V1UnitI, V1UnitM, V1UnitM0,                       umaddl	x17, w5, w15, x4               // UMADDL <Xd>, <Wn>, <Wm>, <Xa>  \\ Multiply accumulate long  \\ 1 2 1 1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     2.00     -    UMAX_ZI_B                      V1UnitV, V1UnitV01,                               umax	z22.b, z22.b, #117             // UMAX <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    UMAX_ZPmZ_D                    V1UnitV, V1UnitV01,                               umax	z25.d, p5/m, z25.d, z1.d       // UMAX <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    UMAXv4i32                      V1UnitV,                                          umax	v7.4s, v1.4s, v19.4s           // UMAX <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UMAXPv4i16                     V1UnitV,                                          umaxp	v18.4h, v26.4h, v1.4h          // UMAXP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    UMAXVv8i8v                     V1UnitV[2], V1UnitV13,                            umaxv	b25, v27.8b                    // UMAXV B<d>, <Vn>.8B  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  2      4    4     1.00     -    UMAXVv16i8v                    V1UnitV[2], V1UnitV13[2],                         umaxv	b1, v19.16b                    // UMAXV B<d>, <Vn>.16B  \\ ASIMD max/min, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
# CHECK-NEXT:  1      2    2     2.00     -    UMAXVv4i16v                    V1UnitV, V1UnitV13,                               umaxv	h15, v5.4h                     // UMAXV H<d>, <Vn>.4H  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  2      4    4     2.00     -    UMAXVv8i16v                    V1UnitV[2], V1UnitV13,                            umaxv	h28, v23.8h                    // UMAXV H<d>, <Vn>.8H  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    UMAXVv4i32v                    V1UnitV, V1UnitV13,                               umaxv	s22, v5.4s                     // UMAXV S<d>, <Vn>.4S  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  5      14   14    0.50     -    UMAXV_VPZ_B                    V1UnitV[5], V1UnitV0, V1UnitV1[2], V1UnitV01[3], V1UnitV02, V1UnitV13[3],   umaxv	b2, p5, z8.b  // UMAXV B<d>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      12   12    0.50     -    UMAXV_VPZ_H                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   umaxv	h3, p2, z8.h           // UMAXV H<d>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      10   10    0.50     -    UMAXV_VPZ_S                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   umaxv	s21, p4, z10.s         // UMAXV S<d>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
# CHECK-NEXT:  2      8    8     2.00     -    UMAXV_VPZ_D                    V1UnitV[2], V1UnitV01,                            umaxv	d11, p0, z26.d                 // UMAXV D<d>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
# CHECK-NEXT:  1      2    2     2.00     -    UMIN_ZI_B                      V1UnitV, V1UnitV01,                               umin	z8.b, z8.b, #187               // UMIN <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    UMIN_ZPmZ_S                    V1UnitV, V1UnitV01,                               umin	z21.s, p4/m, z21.s, z25.s      // UMIN <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    UMINv4i32                      V1UnitV,                                          umin	v5.4s, v30.4s, v9.4s           // UMIN <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UMINPv4i16                     V1UnitV,                                          uminp	v28.4h, v3.4h, v0.4h           // UMINP <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD max/min, basic and pair-wise  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  2      4    4     2.00     -    UMINVv8i8v                     V1UnitV[2], V1UnitV13,                            uminv	b11, v16.8b                    // UMINV B<d>, <Vn>.8B  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  2      4    4     1.00     -    UMINVv16i8v                    V1UnitV[2], V1UnitV13[2],                         uminv	b5, v10.16b                    // UMINV B<d>, <Vn>.16B  \\ ASIMD max/min, reduce, 16B  \\ 2 4  4  1.00 V1UnitV13[2]
# CHECK-NEXT:  1      2    2     2.00     -    UMINVv4i16v                    V1UnitV, V1UnitV13,                               uminv	h29, v31.4h                    // UMINV H<d>, <Vn>.4H  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  2      4    4     2.00     -    UMINVv8i16v                    V1UnitV[2], V1UnitV13,                            uminv	h0, v19.8h                     // UMINV H<d>, <Vn>.8H  \\ ASIMD max/min, reduce, 8B/8H  \\ 2 4  4  2.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    UMINVv4i32v                    V1UnitV, V1UnitV13,                               uminv	s16, v12.4s                    // UMINV S<d>, <Vn>.4S  \\ ASIMD max/min, reduce, 4H/4S  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  5      14   14    0.50     -    UMINV_VPZ_B                    V1UnitV[5], V1UnitV0, V1UnitV1[2], V1UnitV01[3], V1UnitV02, V1UnitV13[3],   uminv	b6, p6, z6.b  // UMINV B<d>, <Pg>, <Zn>.B  \\ Reduction, arithmetic, B form  \\ 5 14  14  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      12   12    0.50     -    UMINV_VPZ_H                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   uminv	h9, p2, z14.h          // UMINV H<d>, <Pg>, <Zn>.H  \\ Reduction, arithmetic, H form  \\ 4 12  12  0.50 V1UnitV1[2]
# CHECK-NEXT:  4      10   10    0.50     -    UMINV_VPZ_S                    V1UnitV[4], V1UnitV1[2], V1UnitV01[3], V1UnitV13[2],   uminv	s26, p1, z18.s         // UMINV S<d>, <Pg>, <Zn>.S  \\ Reduction, arithmetic, S form  \\ 4 10  10  0.50 V1UnitV1[2]
# CHECK-NEXT:  2      8    8     2.00     -    UMINV_VPZ_D                    V1UnitV[2], V1UnitV01,                            uminv	d12, p6, z4.d                  // UMINV D<d>, <Pg>, <Zn>.D  \\ Reduction, arithmetic, D form  \\ 2 8  8  2.00 V1UnitV1[2]
# CHECK-NEXT:  1      4    1     2.00     -    UMLALv4i16_indexed             V1UnitV, V1UnitV02,                               umlal	v29.4s, v23.4h, v9.h[0]        // UMLAL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLALv2i32_indexed             V1UnitV, V1UnitV02,                               umlal	v25.2d, v27.2s, v3.s[0]        // UMLAL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLALv8i16_indexed             V1UnitV, V1UnitV02,                               umlal2	v6.4s, v30.8h, v2.h[1]         // UMLAL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLALv4i32_indexed             V1UnitV, V1UnitV02,                               umlal2	v22.2d, v22.4s, v6.s[2]        // UMLAL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLALv8i8_v8i16                V1UnitV, V1UnitV02,                               umlal	v21.8h, v20.8b, v26.8b         // UMLAL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLALv4i32_v2i64               V1UnitV, V1UnitV02,                               umlal2	v28.2d, v14.4s, v2.4s          // UMLAL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLSLv4i16_indexed             V1UnitV, V1UnitV02,                               umlsl	v14.4s, v3.4h, v11.h[7]        // UMLSL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLSLv2i32_indexed             V1UnitV, V1UnitV02,                               umlsl	v8.2d, v12.2s, v3.s[2]         // UMLSL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLSLv8i16_indexed             V1UnitV, V1UnitV02,                               umlsl2	v9.4s, v16.8h, v8.h[1]         // UMLSL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLSLv4i32_indexed             V1UnitV, V1UnitV02,                               umlsl2	v7.2d, v3.4s, v7.s[3]          // UMLSL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLSLv2i32_v2i64               V1UnitV, V1UnitV02,                               umlsl	v5.2d, v18.2s, v29.2s          // UMLSL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      4    1     2.00     -    UMLSLv16i8_v8i16               V1UnitV, V1UnitV02,                               umlsl2	v3.8h, v30.16b, v14.16b        // UMLSL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply accumulate long  \\ 1 4 1 2.0 V1UnitV02
# CHECK-NEXT:  1      3    1     4.00     -    UMMLA                          V1UnitV,                                          ummla	v14.4s, v28.16b, v29.16b       // UMMLA <Vd>.4S, <Vn>.16B, <Vm>.16B  \\ ASIMD matrix multiply-accumulate  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    UMSUBLrrr                      V1UnitI, V1UnitM,                                 umnegl	x15, w14, w24                  // UMNEGL <Xd>, <Wn>, <Wm>  \\ Multiply long  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi8_idx0                   V1UnitV,                                          umov	w19, v13.b[0]                  // UMOV <Wd>, <Vn>.B[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi8                        V1UnitV,                                          umov	w7, v20.b[4]                   // UMOV <Wd>, <Vn>.B[<indexb>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi16_idx0                  V1UnitV,                                          umov	w18, v25.h[0]                  // UMOV <Wd>, <Vn>.H[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi16                       V1UnitV,                                          umov	w22, v23.h[3]                  // UMOV <Wd>, <Vn>.H[<indexh>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.00 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi32_idx0                  V1UnitV,                                          mov	w1, v1.s[0]                    // UMOV <Wd>, <Vn>.S[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.0 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi32                       V1UnitV,                                          mov	w23, v29.s[2]                  // UMOV <Wd>, <Vn>.S[<indexs>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.0 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi64_idx0                  V1UnitV,                                          mov	x4, v23.d[0]                   // UMOV <Xd>, <Vn>.D[0]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.0 V1UnitV[4]
# CHECK-NEXT:  1      2    2     4.00     -    UMOVvi64                       V1UnitV,                                          mov	x26, v21.d[1]                  // UMOV <Xd>, <Vn>.D[<indexd>]  \\ ASIMD transfer, element to gen reg  \\ 1 2  2  4.0 V1UnitV[4]
# CHECK-NEXT:  1      2    1     1.00     -    UMSUBLrrr                      V1UnitI, V1UnitM, V1UnitM0,                       umsubl	x1, w3, w27, x7                // UMSUBL <Xd>, <Wn>, <Wm>, <Xa>  \\ Multiply accumulate long  \\ 1 2 1 1.0 V1UnitM0
# CHECK-NEXT:  1      4    4     1.00     -    UMULH_ZPmZ_B                   V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          umulh	z23.b, p4/m, z23.b, z1.b       // UMULH <Zdn>.B, <Pg>/M, <Zdn>.B, <Zm>.B  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    UMULH_ZPmZ_H                   V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          umulh	z16.h, p2/m, z16.h, z16.h      // UMULH <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  1      4    4     1.00     -    UMULH_ZPmZ_S                   V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          umulh	z12.s, p2/m, z12.s, z27.s      // UMULH <Zdn>.S, <Pg>/M, <Zdn>.S, <Zm>.S  \\ Multiply, B, H, S element size  \\ 1 4  4  1.0 V1UnitV0
# CHECK-NEXT:  2      5    5     0.50     -    UMULH_ZPmZ_D                   V1UnitV[2], V1UnitV0[2], V1UnitV01[2], V1UnitV02[2],   umulh	z3.d, p2/m, z3.d, z25.d  // UMULH <Zdn>.D, <Pg>/M, <Zdn>.D, <Zm>.D  \\ Multiply, D element size  \\ 2 5  5  0.50 V1UnitV0[2]
# CHECK-NEXT:  1      3    3     2.00     -    UMULHrr                        V1UnitI, V1UnitM,                                 umulh	x14, x16, x8                   // UMULH <Xd>, <Xn>, <Xm>  \\ Multiply high  \\ 1 3  3  2.0 V1UnitM
# CHECK-NEXT:  1      2    2     2.00     -    UMADDLrrr                      V1UnitI, V1UnitM,                                 umull	x17, w15, w23                  // UMULL <Xd>, <Wn>, <Wm>  \\ Multiply long  \\ 1 2  2  2.0 V1UnitM
# CHECK-NEXT:  1      3    3     2.00     -    UMULLv4i16_indexed             V1UnitV, V1UnitV02,                               umull	v19.4s, v16.4h, v8.h[0]        // UMULL <Vd>.4S, <Vn>.4H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    UMULLv2i32_indexed             V1UnitV, V1UnitV02,                               umull	v6.2d, v9.2s, v1.s[1]          // UMULL <Vd>.2D, <Vn>.2S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    UMULLv8i16_indexed             V1UnitV, V1UnitV02,                               umull2	v23.4s, v9.8h, v1.h[7]         // UMULL2 <Vd>.4S, <Vn>.8H, <Vmh>.H[<indexh>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    UMULLv4i32_indexed             V1UnitV, V1UnitV02,                               umull2	v20.2d, v8.4s, v5.s[0]         // UMULL2 <Vd>.2D, <Vn>.4S, <Vms>.S[<indexs>]  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    UMULLv8i8_v8i16                V1UnitV, V1UnitV02,                               umull	v21.8h, v10.8b, v28.8b         // UMULL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      3    3     2.00     -    UMULLv16i8_v8i16               V1UnitV, V1UnitV02,                               umull2	v21.8h, v29.16b, v10.16b       // UMULL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD multiply long  \\ 1 3  3  2.0 V1UnitV02
# CHECK-NEXT:  1      2    2     2.00     -    UQADD_ZI_B                     V1UnitV, V1UnitV01,                               uqadd	z20.b, z20.b, #203             // UQADD <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    UQADD_ZI_D                     V1UnitV, V1UnitV01,                               uqadd	z5.d, z5.d, #82                // UQADD <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    UQADD_ZI_S                     V1UnitV, V1UnitV01,                               uqadd	z4.s, z4.s, #22272             // UQADD <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    UQADD_ZZZ_D                    V1UnitV, V1UnitV01,                               uqadd	z11.d, z25.d, z19.d            // UQADD <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    UQADDv1i8                      V1UnitV,                                          uqadd	b20, b12, b21                  // UQADD <V><d>, <V><n>, <V><m>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UQADDv4i32                     V1UnitV,                                          uqadd	v28.4s, v4.4s, v0.4s           // UQADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    UQDECB_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecb	w9                             // UQDECB <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECB_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecb	w4, vl8                        // UQDECB <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECB_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecb	w11, mul4, mul #7              // UQDECB <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecb	x30                            // UQDECB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecb	x14, vl256                     // UQDECB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecb	x8, vl6, mul #16               // UQDECB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECD_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecd	w24                            // UQDECD <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECD_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecd	w7, vl8                        // UQDECD <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECD_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecd	w22, mul3, mul #5              // UQDECD <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecd	x11                            // UQDECD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecd	x1, vl2                        // UQDECD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecd	x25, vl128, mul #16            // UQDECD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqdecd	z23.d                          // UQDECD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQDECD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqdecd	z26.d, vl256                   // UQDECD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQDECD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqdecd	z6.d, all, mul #4              // UQDECD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQDECH_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdech	w30                            // UQDECH <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECH_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdech	w21, vl6                       // UQDECH <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECH_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdech	w14, vl6, mul #6               // UQDECH <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdech	x16                            // UQDECH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdech	x30, vl256                     // UQDECH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdech	x6, vl64, mul #2               // UQDECH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqdech	z5.h                           // UQDECH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQDECH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqdech	z27.h, mul3                    // UQDECH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQDECH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqdech	z5.h, all, mul #3              // UQDECH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQDECP_WP_B                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecp	w24, p7.b                      // UQDECP <Wdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECP_XP_H                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecp	x8, p1.h                       // UQDECP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  3      7    7     0.50     -    UQDECP_ZP_S                    V1UnitI[2], V1UnitM[2], V1UnitM0[2], V1UnitV, V1UnitV01,   uqdecp	z15.s, p6.s    // UQDECP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
# CHECK-NEXT:  1      2    2     1.00     -    UQDECW_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecw	w13                            // UQDECW <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECW_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecw	w27, vl32                      // UQDECW <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECW_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecw	w25, vl7, mul #2               // UQDECW <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecw	x0                             // UQDECW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecw	x19, vl64                      // UQDECW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqdecw	x17, vl32, mul #3              // UQDECW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQDECW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqdecw	z5.s                           // UQDECW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQDECW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqdecw	z13.s                          // UQDECW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQDECW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqdecw	z2.s, vl2, mul #6              // UQDECW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQINCB_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincb	w1                             // UQINCB <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCB_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincb	w15, pow2                      // UQINCB <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCB_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincb	w8, vl256, mul #10             // UQINCB <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincb	x10                            // UQINCB <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincb	x27, mul3                      // UQINCB <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCB_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincb	x29, vl1, mul #10              // UQINCB <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCD_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincd	w9                             // UQINCD <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCD_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincd	w26, vl64                      // UQINCD <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCD_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincd	w11, vl32, mul #12             // UQINCD <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincd	x6                             // UQINCD <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincd	x26, mul3                      // UQINCD <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCD_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincd	x5, vl64, mul #16              // UQINCD <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqincd	z2.d                           // UQINCD <Zdn>.D  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQINCD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqincd	z9.d, vl8                      // UQINCD <Zdn>.D, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQINCD_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqincd	z11.d, vl3, mul #11            // UQINCD <Zdn>.D, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQINCH_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqinch	w9                             // UQINCH <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCH_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqinch	w5, vl3                        // UQINCH <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCH_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqinch	w18, all, mul #11              // UQINCH <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqinch	x7                             // UQINCH <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqinch	x21, vl1                       // UQINCH <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCH_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqinch	x1, vl16                       // UQINCH <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqinch	z6.h                           // UQINCH <Zdn>.H  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQINCH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqinch	z10.h, vl64                    // UQINCH <Zdn>.H, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQINCH_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqinch	z9.h, vl64, mul #14            // UQINCH <Zdn>.H, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQINCP_WP_H                    V1UnitI, V1UnitM, V1UnitM0,                       uqincp	w2, p0.h                       // UQINCP <Wdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCP_XP_D                    V1UnitI, V1UnitM, V1UnitM0,                       uqincp	x3, p6.d                       // UQINCP <Xdn>, <Pm>.<T>  \\ Predicate counting scalar, active predicate  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  3      7    7     0.50     -    UQINCP_ZP_H                    V1UnitI[2], V1UnitM[2], V1UnitM0[2], V1UnitV, V1UnitV01,   uqincp	z15.h, p6.h    // UQINCP <Zdn>.<T>, <Pm>  \\ Predicate counting vector, active predicate  \\ 3 7  7  0.50 V1UnitM0[2],V1UnitV01[2]
# CHECK-NEXT:  1      2    2     1.00     -    UQINCW_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincw	w10                            // UQINCW <Wdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCW_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincw	w28, vl5                       // UQINCW <Wdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCW_WPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincw	w10, vl4, mul #2               // UQINCW <Wdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincw	x20                            // UQINCW <Xdn>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincw	x4                             // UQINCW <Xdn>, <pattern>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCW_XPiI                    V1UnitI, V1UnitM, V1UnitM0,                       uqincw	x1, vl5, mul #12               // UQINCW <Xdn>, <pattern>, MUL #<imm>  \\ Predicate counting scalar  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UQINCW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqincw	z10.s                          // UQINCW <Zdn>.S  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQINCW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqincw	z24.s, mul4                    // UQINCW <Zdn>.S, <pattern>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      2    2     1.00     -    UQINCW_ZPiI                    V1UnitV, V1UnitV0, V1UnitV01, V1UnitV02,          uqincw	z16.s, vl16, mul #7            // UQINCW <Zdn>.S, <pattern>, MUL #<imm>  \\ Predicate counting vector  \\ 1 2  2  1.00 V1UnitV01
# CHECK-NEXT:  1      4    4     2.00     -    UQRSHLv1i64                    V1UnitV, V1UnitV13,                               uqrshl	d8, d7, d29                    // UQRSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQRSHLv2i32                    V1UnitV, V1UnitV13,                               uqrshl	v16.2s, v10.2s, v23.2s         // UQRSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    UQRSHRNb                       V1UnitV,                                          uqrshrn	b0, h17, #4            // UQRSHRN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    UQRSHRNh                       V1UnitV,                                          uqrshrn	h1, s2, #15            // UQRSHRN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    UQRSHRNs                       V1UnitV,                                          uqrshrn	s17, d1, #22           // UQRSHRN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQRSHRNv8i8_shift              V1UnitV, V1UnitV13,                               uqrshrn	v14.8b, v21.8h, #3     // UQRSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQRSHRNv4i16_shift             V1UnitV, V1UnitV13,                               uqrshrn	v16.4h, v4.4s, #15     // UQRSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQRSHRNv2i32_shift             V1UnitV, V1UnitV13,                               uqrshrn	v12.2s, v31.2d, #9     // UQRSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQRSHRNv16i8_shift             V1UnitV, V1UnitV13,                               uqrshrn2	v28.16b, v17.8h, #7    // UQRSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQRSHRNv8i16_shift             V1UnitV, V1UnitV13,                               uqrshrn2	v24.8h, v16.4s, #13    // UQRSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQRSHRNv4i32_shift             V1UnitV, V1UnitV13,                               uqrshrn2	v26.4s, v11.2d, #6     // UQRSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLb                         V1UnitV, V1UnitV13,                               uqshl	b10, b10, #1                   // UQSHL B<d>, B<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLh                         V1UnitV, V1UnitV13,                               uqshl	h15, h1, #7                    // UQSHL H<d>, H<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLs                         V1UnitV, V1UnitV13,                               uqshl	s22, s20, #8                   // UQSHL S<d>, S<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLd                         V1UnitV, V1UnitV13,                               uqshl	d26, d12, #40                  // UQSHL D<d>, D<n>, #<shiftd>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLv8i8_shift                V1UnitV, V1UnitV13,                               uqshl	v9.8b, v23.8b, #5              // UQSHL <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLv8i16_shift               V1UnitV, V1UnitV13,                               uqshl	v15.8h, v10.8h, #7             // UQSHL <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLv4i32_shift               V1UnitV, V1UnitV13,                               uqshl	v12.4s, v27.4s, #11            // UQSHL <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLv2i64_shift               V1UnitV, V1UnitV13,                               uqshl	v14.2d, v26.2d, #31            // UQSHL <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLv1i16                     V1UnitV, V1UnitV13,                               uqshl	h16, h17, h27                  // UQSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHLv8i16                     V1UnitV, V1UnitV13,                               uqshl	v6.8h, v27.8h, v16.8h          // UQSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    UQSHRNb                        V1UnitV,                                          uqshrn	b21, h9, #4                    // UQSHRN B<d>, H<n>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    UQSHRNh                        V1UnitV,                                          uqshrn	h24, s24, #15                  // UQSHRN H<d>, S<n>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    UQSHRNs                        V1UnitV,                                          uqshrn	s25, d10, #30                  // UQSHRN S<d>, D<n>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHRNv8i8_shift               V1UnitV, V1UnitV13,                               uqshrn	v21.8b, v2.8h, #7              // UQSHRN <Vd>.8B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHRNv4i16_shift              V1UnitV, V1UnitV13,                               uqshrn	v29.4h, v2.4s, #16             // UQSHRN <Vd>.4H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHRNv2i32_shift              V1UnitV, V1UnitV13,                               uqshrn	v14.2s, v19.2d, #25            // UQSHRN <Vd>.2S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHRNv16i8_shift              V1UnitV, V1UnitV13,                               uqshrn2	v11.16b, v31.8h, #5    // UQSHRN2 <Vd>.16B, <Vn>.8H, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHRNv8i16_shift              V1UnitV, V1UnitV13,                               uqshrn2	v21.8h, v17.4s, #5     // UQSHRN2 <Vd>.8H, <Vn>.4S, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQSHRNv4i32_shift              V1UnitV, V1UnitV13,                               uqshrn2	v5.4s, v19.2d, #5      // UQSHRN2 <Vd>.4S, <Vn>.2D, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    UQSUB_ZI_B                     V1UnitV, V1UnitV01,                               uqsub	z6.b, z6.b, #50                // UQSUB <Zdn>.B, <Zdn>.B, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    UQSUB_ZI_S                     V1UnitV, V1UnitV01,                               uqsub	z6.s, z6.s, #194               // UQSUB <Zdn>.<T>, <Zdn>.<T>, #<imm>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    UQSUB_ZI_H                     V1UnitV, V1UnitV01,                               uqsub	z29.h, z29.h, #135             // UQSUB <Zdn>.<T>, <Zdn>.<T>, #<imm>, <shift>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    UQSUB_ZZZ_B                    V1UnitV, V1UnitV01,                               uqsub	z10.b, z25.b, z22.b            // UQSUB <Zd>.<T>, <Zn>.<T>, <Zm>.<T>  \\ Arithmetic, basic  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     4.00     -    UQSUBv1i64                     V1UnitV,                                          uqsub	d12, d1, d12                   // UQSUB <V><d>, <V><n>, <V><m>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    UQSUBv8i8                      V1UnitV,                                          uqsub	v31.8b, v15.8b, v23.8b         // UQSUB <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     2.00     -    UQXTNv1i32                     V1UnitV, V1UnitV13,                               uqxtn	s14, d12                       // UQXTN <Vb><d>, <Va><n>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQXTNv8i8                      V1UnitV, V1UnitV13,                               uqxtn	v22.8b, v6.8h                  // UQXTN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    UQXTNv16i8                     V1UnitV, V1UnitV13,                               uqxtn2	v15.16b, v7.8h                 // UQXTN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow, saturating  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      3    3     2.00     -    URECPEv2i32                    V1UnitV, V1UnitV02,                               urecpe	v6.2s, v6.2s                   // URECPE <Vd>.2S, <Vn>.2S  \\ ASIMD reciprocal and square root estimate, D-form U32  \\ 1  3   3  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    URECPEv4i32                    V1UnitV, V1UnitV02,                               urecpe	v18.4s, v17.4s                 // URECPE <Vd>.4S, <Vn>.4S  \\ ASIMD reciprocal and square root estimate, Q-form U32  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  1      2    2     4.00     -    URHADDv2i32                    V1UnitV,                                          urhadd	v6.2s, v15.2s, v22.2s          // URHADD <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      4    4     2.00     -    URSHLv1i64                     V1UnitV, V1UnitV13,                               urshl	d26, d17, d24                  // URSHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    URSHLv8i16                     V1UnitV, V1UnitV13,                               urshl	v15.8h, v26.8h, v6.8h          // URSHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    URSHRd                         V1UnitV,                                          urshr	d23, d29, #52                  // URSHR <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, complex  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    URSHRv8i8_shift                V1UnitV, V1UnitV13,                               urshr	v18.8b, v27.8b, #8             // URSHR <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    URSHRv8i16_shift               V1UnitV, V1UnitV13,                               urshr	v26.8h, v29.8h, #11            // URSHR <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    URSHRv4i32_shift               V1UnitV, V1UnitV13,                               urshr	v20.4s, v13.4s, #19            // URSHR <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      4    4     2.00     -    URSHRv2i64_shift               V1UnitV, V1UnitV13,                               urshr	v25.2d, v24.2d, #22            // URSHR <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, complex  \\ 1 4  4  2.0 V1UnitV13
# CHECK-NEXT:  1      3    3     2.00     -    URSQRTEv2i32                   V1UnitV, V1UnitV02,                               ursqrte	v0.2s, v21.2s          // URSQRTE <Vd>.2S, <Vn>.2S  \\ ASIMD reciprocal and square root estimate, D-form U32  \\ 1  3   3  2.0 V1UnitV02
# CHECK-NEXT:  1      4    4     2.00     -    URSQRTEv4i32                   V1UnitV, V1UnitV02,                               ursqrte	v21.4s, v31.4s         // URSQRTE <Vd>.4S, <Vn>.4S  \\ ASIMD reciprocal and square root estimate, Q-form U32  \\ 1 4  4  2.00 V1UnitV02[2]
# CHECK-NEXT:  1      2    2     4.00     -    URSRAd                         V1UnitV,                                          ursra	d11, d23, #38                  // URSRA <V><d>, <V><n>, #<shift>  \\ ASIMD shift accumulate  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    URSRAv8i8_shift                V1UnitV, V1UnitV13,                               ursra	v12.8b, v27.8b, #1             // URSRA <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    URSRAv4i16_shift               V1UnitV, V1UnitV13,                               ursra	v2.4h, v26.4h, #14             // URSRA <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    URSRAv4i32_shift               V1UnitV, V1UnitV13,                               ursra	v10.4s, v12.4s, #21            // URSRA <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    URSRAv2i64_shift               V1UnitV, V1UnitV13,                               ursra	v20.2d, v30.2d, #26            // URSRA <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      3    1     4.00     -    USDOTlanev8i8                  V1UnitV,                                          usdot	v2.2s, v26.8b, v18.4b[2]       // USDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.4B[<index>]  \\ ASIMD dot product using signed and unsigned integers  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      3    1     4.00     -    USDOT_ZZZI                     V1UnitV,                                          usdot	z6.s, z3.b, z2.b[2]            // USDOT <Zda>.S, <Zn>.B, <Zm>.B[<imm>]  \\ Dot product, 8 bit, using signed and unsigned integers  \\ 1 3  1  4.00 V1UnitV[2]
# CHECK-NEXT:  1      3    1     4.00     -    USDOTv8i8                      V1UnitV,                                          usdot	v9.2s, v11.8b, v28.8b          // USDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD dot product using signed and unsigned integers  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      3    1     4.00     -    USDOT_ZZZ                      V1UnitV,                                          usdot	z20.s, z20.b, z9.b             // USDOT <Zda>.S, <Zn>.B, <Zm>.B  \\ Dot product, 8 bit, using signed and unsigned integers  \\ 1 3  1  4.00 V1UnitV[2]
# CHECK-NEXT:  1      2    2     2.00     -    USHLv1i64                      V1UnitV, V1UnitV13,                               ushl	d16, d3, d6                    // USHL <V><d>, <V><n>, <V><m>  \\ ASIMD shift by register, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHLv4i16                      V1UnitV, V1UnitV13,                               ushl	v18.4h, v8.4h, v23.4h          // USHL <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD shift by register, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHLLv8i8_shift                V1UnitV, V1UnitV13,                               ushll	v11.8h, v8.8b, #7              // USHLL <Vd>.8H, <Vn>.8B, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHLLv4i16_shift               V1UnitV, V1UnitV13,                               ushll	v29.4s, v5.4h, #11             // USHLL <Vd>.4S, <Vn>.4H, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHLLv2i32_shift               V1UnitV, V1UnitV13,                               ushll	v16.2d, v9.2s, #10             // USHLL <Vd>.2D, <Vn>.2S, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHLLv16i8_shift               V1UnitV, V1UnitV13,                               ushll2	v29.8h, v3.16b, #5             // USHLL2 <Vd>.8H, <Vn>.16B, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHLLv8i16_shift               V1UnitV, V1UnitV13,                               ushll2	v10.4s, v21.8h, #9             // USHLL2 <Vd>.4S, <Vn>.8H, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHLLv4i32_shift               V1UnitV, V1UnitV13,                               ushll2	v10.2d, v26.4s, #28            // USHLL2 <Vd>.2D, <Vn>.4S, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    USHRd                          V1UnitV,                                          ushr	d15, d18, #11                  // USHR <V><d>, <V><n>, #<shift>  \\ ASIMD shift by immed, basic  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHRv16i8_shift                V1UnitV, V1UnitV13,                               ushr	v26.16b, v8.16b, #4            // USHR <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHRv4i16_shift                V1UnitV, V1UnitV13,                               ushr	v22.4h, v1.4h, #7              // USHR <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHRv2i32_shift                V1UnitV, V1UnitV13,                               ushr	v3.2s, v3.2s, #29              // USHR <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHRv2i64_shift                V1UnitV, V1UnitV13,                               ushr	v1.2d, v14.2d, #58             // USHR <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      3    1     4.00     -    USMMLA                         V1UnitV,                                          usmmla	v29.4s, v23.16b, v11.16b       // USMMLA <Vd>.4S, <Vn>.16B, <Vm>.16B  \\ ASIMD matrix multiply-accumulate  \\ 1 3 1 4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    USQADDv1i64                    V1UnitV,                                          usqadd	d21, d19                       // USQADD <V><d>, <V><n>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    USQADDv16i8                    V1UnitV,                                          usqadd	v23.16b, v2.16b                // USQADD <Vd>.<T>, <Vn>.<T>  \\ ASIMD arith, complex  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    USRAd                          V1UnitV,                                          usra	d30, d3, #34                   // USRA <V><d>, <V><n>, #<shift>  \\ ASIMD shift accumulate  \\ 1 2  2  4.00 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    USRAv8i8_shift                 V1UnitV, V1UnitV13,                               usra	v27.8b, v2.8b, #2              // USRA <Vd>.<Tb>, <Vn>.<Tb>, #<shiftb>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    USRAv4i16_shift                V1UnitV, V1UnitV13,                               usra	v29.4h, v15.4h, #11            // USRA <Vd>.<Th>, <Vn>.<Th>, #<shifth>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    USRAv4i32_shift                V1UnitV, V1UnitV13,                               usra	v4.4s, v11.4s, #30             // USRA <Vd>.<Ts>, <Vn>.<Ts>, #<shifts>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      4    1     2.00     -    USRAv2i64_shift                V1UnitV, V1UnitV13,                               usra	v4.2d, v10.2d, #31             // USRA <Vd>.<Td>, <Vn>.<Td>, #<shiftd>  \\ ASIMD shift accumulate  \\ 1 4 1 2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    USUBLv8i8_v8i16                V1UnitV,                                          usubl	v24.8h, v24.8b, v13.8b         // USUBL <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    USUBLv4i32_v2i64               V1UnitV,                                          usubl2	v11.2d, v8.4s, v14.4s          // USUBL2 <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    USUBWv4i16_v4i32               V1UnitV,                                          usubw	v25.4s, v16.4s, v0.4h          // USUBW <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    USUBWv8i16_v4i32               V1UnitV,                                          usubw2	v8.4s, v1.4s, v21.8h           // USUBW2 <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>  \\ ASIMD arith, basic  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     2.00     -    UUNPKHI_ZZ_H                   V1UnitV, V1UnitV01,                               uunpkhi	z15.h, z5.b            // UUNPKHI <Zd>.<T>, <Zn>.<Tb>  \\ Unpack and extend  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      2    2     2.00     -    UUNPKLO_ZZ_S                   V1UnitV, V1UnitV01,                               uunpklo	z22.s, z21.h           // UUNPKLO <Zd>.<T>, <Zn>.<Tb>  \\ Unpack and extend  \\ 1 2  2  2.0 V1UnitV01
# CHECK-NEXT:  1      1    1     4.00     -    UBFMWri                        V1UnitI,                                          uxtb	w25, w14                       // UXTB <Wd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     1.00     -    UXTB_ZPmZ_S                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          uxtb	z17.s, p1/m, z25.s             // UXTB <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    UXTH_ZPmZ_S                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          uxth	z19.s, p1/m, z17.s             // UXTH <Zd>.<T>, <Pg>/M, <Zn>.<T>  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      2    2     1.00     -    UXTW_ZPmZ_D                    V1UnitV, V1UnitV1, V1UnitV01, V1UnitV13,          uxtw	z17.d, p0/m, z29.d             // UXTW <Zd>.D, <Pg>/M, <Zn>.D  \\ Extend, sign or zero  \\ 1 2  2  1.0 V1UnitV1
# CHECK-NEXT:  1      1    1     4.00     -    UBFMWri                        V1UnitI,                                          uxth	w12, w5                        // UXTH <Wd>, <Wn>  \\ Sign/zero extend, normal  \\ 1 1  1  4.0 V1UnitI
# CHECK-NEXT:  1      2    2     2.00     -    USHLLv2i32_shift               V1UnitV, V1UnitV13,                               ushll	v7.2d, v4.2s, #0               // UXTL <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     2.00     -    USHLLv4i32_shift               V1UnitV, V1UnitV13,                               ushll2	v27.2d, v2.4s, #0              // UXTL2 <Vd>.<Ta>, <Vn>.<Tb>  \\ ASIMD shift by immed, basic  \\ 1 2  2  2.0 V1UnitV13
# CHECK-NEXT:  1      2    2     4.00     -    UZP1v2i64                      V1UnitV,                                          uzp1	v24.2d, v20.2d, v7.2d          // UZP1 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD unzip/zip  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    UZP1_PPP_D                     V1UnitI, V1UnitM, V1UnitM0,                       uzp1	p6.d, p5.d, p7.d               // UZP1 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate zip/unzip  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    UZP2_PPP_B                     V1UnitI, V1UnitM, V1UnitM0,                       uzp2	p7.b, p6.b, p5.b               // UZP2 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate zip/unzip  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     4.00     -    UZP2v4i32                      V1UnitV,                                          uzp2	v7.4s, v26.4s, v17.4s          // UZP2 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD unzip/zip  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             wfe                                  // WFE  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             wfi                                  // WFI  \\ No description \\ No scheduling info
# CHECK-NEXT:  2      3    3     0.50     -    WHILELE_PXX_D                  V1UnitI[2], V1UnitM[2], V1UnitM0[2],              whilele	p4.d, x21, x14         // WHILELE <Pd>.<T>, <R><n>, <R><m>  \\ Loop control, based on GPR  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  2      3    3     0.50     -    WHILELO_PWW_B                  V1UnitI[2], V1UnitM[2], V1UnitM0[2],              whilelo	p3.b, w13, w2          // WHILELO <Pd>.<T>, <R><n>, <R><m>  \\ Loop control, based on GPR  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  2      3    3     0.50     -    WHILELS_PXX_H                  V1UnitI[2], V1UnitM[2], V1UnitM0[2],              whilels	p7.h, x0, x29          // WHILELS <Pd>.<T>, <R><n>, <R><m>  \\ Loop control, based on GPR  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  2      3    3     0.50     -    WHILELT_PXX_H                  V1UnitI[2], V1UnitM[2], V1UnitM0[2],              whilelt	p6.h, x15, x22         // WHILELT <Pd>.<T>, <R><n>, <R><m>  \\ Loop control, based on GPR  \\ 2 3  3  0.50 V1UnitM0[2]
# CHECK-NEXT:  1      2    2     1.00     SE   WRFFR                          V1UnitI, V1UnitM, V1UnitM0,                       wrffr	p0.b                           // WRFFR <Pn>.B  \\ Write to first fault register  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     4.00     -    XTNv8i8                        V1UnitV,                                          xtn	v14.8b, v3.8h                  // XTN <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     4.00     -    XTNv16i8                       V1UnitV,                                          xtn2	v15.16b, v26.8h                // XTN2 <Vd>.<Tb>, <Vn>.<Ta>  \\ ASIMD extract narrow  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      1    1     15.00    SE   HINT                                                                             yield                                // YIELD  \\ No description \\ No scheduling info
# CHECK-NEXT:  1      2    2     4.00     -    ZIP1v2i32                      V1UnitV,                                          zip1	v4.2s, v19.2s, v18.2s          // ZIP1 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD unzip/zip  \\ 1 2  2  4.0 V1UnitV
# CHECK-NEXT:  1      2    2     1.00     -    ZIP1_PPP_H                     V1UnitI, V1UnitM, V1UnitM0,                       zip1	p0.h, p6.h, p2.h               // ZIP1 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate zip/unzip  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     1.00     -    ZIP2_PPP_H                     V1UnitI, V1UnitM, V1UnitM0,                       zip2	p3.h, p0.h, p3.h               // ZIP2 <Pd>.<T>, <Pn>.<T>, <Pm>.<T>  \\ Predicate zip/unzip  \\ 1 2  2  1.0 V1UnitM0
# CHECK-NEXT:  1      2    2     4.00     -    ZIP2v4i32                      V1UnitV,                                          zip2	v28.4s, v6.4s, v20.4s          // ZIP2 <Vd>.<T>, <Vn>.<T>, <Vm>.<T>  \\ ASIMD unzip/zip  \\ 1 2  2  4.0 V1UnitV
